
basketball_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7b4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800a990  0800a990  0001a990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa30  0800aa30  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa30  0800aa30  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa30  0800aa30  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa30  0800aa30  0001aa30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa34  0800aa34  0001aa34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800aa38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  200001f0  0800ac28  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  0800ac28  00021640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a753  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003448  00000000  00000000  0003a973  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003f120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020844  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ba2  00000000  00000000  00060b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4be1  00000000  00000000  000726ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001372cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  0013734c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001f0 	.word	0x200001f0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a974 	.word	0x0800a974

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001f4 	.word	0x200001f4
 8000214:	0800a974 	.word	0x0800a974

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <CDC_On_Receive>:
uint8_t lastlen=100;

Command command = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .throwerSpeed = 0, .delimiter = 0}; // (4)
volatile uint8_t isCommandReceived = 0; // (5)

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  //if (*length == sizeof(Command)) { // (7)
	uint8_t len1=(uint8_t) *length;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	73fb      	strb	r3, [r7, #15]
	lastlen=len1;
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <CDC_On_Receive+0x48>)
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	7013      	strb	r3, [r2, #0]
	memset(usbuf, "\0",100);
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <CDC_On_Receive+0x4c>)
 8000b98:	2264      	movs	r2, #100	; 0x64
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <CDC_On_Receive+0x50>)
 8000b9e:	f008 fe8a 	bl	80098b6 <memset>
   memcpy(usbuf, buffer, len1);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <CDC_On_Receive+0x50>)
 8000baa:	f008 fe79 	bl	80098a0 <memcpy>
	memset(buffer, "\0",100);
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <CDC_On_Receive+0x4c>)
 8000bb0:	2264      	movs	r2, #100	; 0x64
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f008 fe7e 	bl	80098b6 <memset>
   // (8)
    //memcpy(&rec, buffer, 200);
   // if (command.delimiter == 43690) { // (9)
      isCommandReceived = 1;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <CDC_On_Receive+0x54>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
   // }
 //}
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	0800a990 	.word	0x0800a990
 8000bd0:	20000578 	.word	0x20000578
 8000bd4:	2000020c 	.word	0x2000020c

08000bd8 <splitm>:
int m2s=0;
uint16_t values[9];
//m1speed,m2speed,m3speed,m1dir,m2dir,m3dir,servo1,servo2,esc


void splitm(uint8_t* msg){
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  for (int i=0;i<9;i++){
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	e007      	b.n	8000bf6 <splitm+0x1e>

      values[i]=0;
 8000be6:	4a46      	ldr	r2, [pc, #280]	; (8000d00 <splitm+0x128>)
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2100      	movs	r1, #0
 8000bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0;i<9;i++){
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	ddf4      	ble.n	8000be6 <splitm+0xe>

  }


int count=0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
int mpov=-1;
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	617b      	str	r3, [r7, #20]


  for (int i=0;i<lastlen;i++){
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	e069      	b.n	8000ce0 <splitm+0x108>


    if(msg[i]==';'){int mpov1=mpov;
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b3b      	cmp	r3, #59	; 0x3b
 8000c16:	d14f      	bne.n	8000cb8 <splitm+0xe0>
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	60fb      	str	r3, [r7, #12]
      while(mpov!=-1){
 8000c1c:	e041      	b.n	8000ca2 <splitm+0xca>
        values[count]+=(ret[count][mpov1-mpov]-48)*pow(10,mpov);
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	1ad1      	subs	r1, r2, r3
 8000c24:	4837      	ldr	r0, [pc, #220]	; (8000d04 <splitm+0x12c>)
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4403      	add	r3, r0
 8000c30:	440b      	add	r3, r1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	3b30      	subs	r3, #48	; 0x30
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc40 	bl	80004bc <__aeabi_i2d>
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460d      	mov	r5, r1
 8000c40:	6978      	ldr	r0, [r7, #20]
 8000c42:	f7ff fc3b 	bl	80004bc <__aeabi_i2d>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	ec43 2b11 	vmov	d1, r2, r3
 8000c4e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8000cf8 <splitm+0x120>
 8000c52:	f008 fe39 	bl	80098c8 <pow>
 8000c56:	ec53 2b10 	vmov	r2, r3, d0
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	4629      	mov	r1, r5
 8000c5e:	f7ff fc97 	bl	8000590 <__aeabi_dmul>
 8000c62:	4603      	mov	r3, r0
 8000c64:	460c      	mov	r4, r1
 8000c66:	4625      	mov	r5, r4
 8000c68:	461c      	mov	r4, r3
 8000c6a:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <splitm+0x128>)
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc22 	bl	80004bc <__aeabi_i2d>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4629      	mov	r1, r5
 8000c80:	f7ff fad0 	bl	8000224 <__adddf3>
 8000c84:	4603      	mov	r3, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	f7ff ff58 	bl	8000b40 <__aeabi_d2uiz>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b299      	uxth	r1, r3
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <splitm+0x128>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        mpov--;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
      while(mpov!=-1){
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d1b9      	bne.n	8000c1e <splitm+0x46>


      }

      count++; mpov=-1;}
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	3301      	adds	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e010      	b.n	8000cda <splitm+0x102>

    else{


      mpov++;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
      ret[count][mpov]=msg[i];
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	7818      	ldrb	r0, [r3, #0]
 8000cc6:	490f      	ldr	r1, [pc, #60]	; (8000d04 <splitm+0x12c>)
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	18ca      	adds	r2, r1, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	701a      	strb	r2, [r3, #0]
  for (int i=0;i<lastlen;i++){
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <splitm+0x130>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	db8f      	blt.n	8000c0c <splitm+0x34>





}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	40240000 	.word	0x40240000
 8000d00:	20000480 	.word	0x20000480
 8000d04:	20000674 	.word	0x20000674
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	00000000 	.word	0x00000000

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d16:	f000 fe84 	bl	8001a22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1a:	f000 f903 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1e:	f000 fc0f 	bl	8001540 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000d22:	f008 f8c1 	bl	8008ea8 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000d26:	f000 f967 	bl	8000ff8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d2a:	f000 f9f9 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d2e:	f000 fa51 	bl	80011d4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000d32:	f000 fab7 	bl	80012a4 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000d36:	f000 fb49 	bl	80013cc <MX_TIM15_Init>
  MX_TIM17_Init();
 8000d3a:	f000 fbdb 	bl	80014f4 <MX_TIM17_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  MX_TIM15_Init();//m1en and m2en
 8000d3e:	f000 fb45 	bl	80013cc <MX_TIM15_Init>
  MX_TIM8_Init();//m3en
 8000d42:	f000 faaf 	bl	80012a4 <MX_TIM8_Init>

  MX_TIM3_Init();//servo2 channel 2
 8000d46:	f000 fa45 	bl	80011d4 <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//m1
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	486a      	ldr	r0, [pc, #424]	; (8000ef8 <main+0x1e8>)
 8000d4e:	f003 fd53 	bl	80047f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);//m2
 8000d52:	2100      	movs	r1, #0
 8000d54:	4868      	ldr	r0, [pc, #416]	; (8000ef8 <main+0x1e8>)
 8000d56:	f003 fd4f 	bl	80047f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);//m3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4867      	ldr	r0, [pc, #412]	; (8000efc <main+0x1ec>)
 8000d5e:	f003 fd4b 	bl	80047f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//servo
 8000d62:	2104      	movs	r1, #4
 8000d64:	4866      	ldr	r0, [pc, #408]	; (8000f00 <main+0x1f0>)
 8000d66:	f003 fd47 	bl	80047f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);//esc
 8000d6a:	210c      	movs	r1, #12
 8000d6c:	4865      	ldr	r0, [pc, #404]	; (8000f04 <main+0x1f4>)
 8000d6e:	f003 fd43 	bl	80047f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//esc
 8000d72:	2108      	movs	r1, #8
 8000d74:	4862      	ldr	r0, [pc, #392]	; (8000f00 <main+0x1f0>)
 8000d76:	f003 fd3f 	bl	80047f8 <HAL_TIM_PWM_Start>


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f001 f950 	bl	8002028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f001 f94a 	bl	8002028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2110      	movs	r1, #16
 8000d98:	485b      	ldr	r0, [pc, #364]	; (8000f08 <main+0x1f8>)
 8000d9a:	f001 f945 	bl	8002028 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if (isCommandReceived) { // (2)
 8000d9e:	4b5b      	ldr	r3, [pc, #364]	; (8000f0c <main+0x1fc>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0fa      	beq.n	8000d9e <main+0x8e>
	        isCommandReceived = 0;
 8000da8:	4b58      	ldr	r3, [pc, #352]	; (8000f0c <main+0x1fc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3); // (3)
 8000dae:	2108      	movs	r1, #8
 8000db0:	4855      	ldr	r0, [pc, #340]	; (8000f08 <main+0x1f8>)
 8000db2:	f001 f951 	bl	8002058 <HAL_GPIO_TogglePin>



	      splitm(usbuf);//allocate values sent from pc to values variable
 8000db6:	4856      	ldr	r0, [pc, #344]	; (8000f10 <main+0x200>)
 8000db8:	f7ff ff0e 	bl	8000bd8 <splitm>

	      //phase of M1
	      if(values[3]==1)HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <main+0x204>)
 8000dbe:	88db      	ldrh	r3, [r3, #6]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d107      	bne.n	8000dd4 <main+0xc4>
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f001 f92b 	bl	8002028 <HAL_GPIO_WritePin>
 8000dd2:	e00b      	b.n	8000dec <main+0xdc>
	      	  	  else if(values[3]==0)GPIOA -> ODR &= ~GPIO_PIN_9;
 8000dd4:	4b4f      	ldr	r3, [pc, #316]	; (8000f14 <main+0x204>)
 8000dd6:	88db      	ldrh	r3, [r3, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d107      	bne.n	8000dec <main+0xdc>
 8000ddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000de6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dea:	6153      	str	r3, [r2, #20]
	      //phase of M2
	      if(values[4]==1)HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <main+0x204>)
 8000dee:	891b      	ldrh	r3, [r3, #8]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d106      	bne.n	8000e02 <main+0xf2>
 8000df4:	2201      	movs	r2, #1
 8000df6:	2120      	movs	r1, #32
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 f914 	bl	8002028 <HAL_GPIO_WritePin>
 8000e00:	e00b      	b.n	8000e1a <main+0x10a>
	     	      else if(values[4]==0)GPIOA -> ODR &= ~GPIO_PIN_5;
 8000e02:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <main+0x204>)
 8000e04:	891b      	ldrh	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d107      	bne.n	8000e1a <main+0x10a>
 8000e0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e14:	f023 0320 	bic.w	r3, r3, #32
 8000e18:	6153      	str	r3, [r2, #20]
	      //phase of M3
	      if(values[5]==1)HAL_GPIO_WritePin(GPIOB, M3PH_Pin, GPIO_PIN_SET);
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <main+0x204>)
 8000e1c:	895b      	ldrh	r3, [r3, #10]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d105      	bne.n	8000e2e <main+0x11e>
 8000e22:	2201      	movs	r2, #1
 8000e24:	2110      	movs	r1, #16
 8000e26:	4838      	ldr	r0, [pc, #224]	; (8000f08 <main+0x1f8>)
 8000e28:	f001 f8fe 	bl	8002028 <HAL_GPIO_WritePin>
 8000e2c:	e009      	b.n	8000e42 <main+0x132>
	     	      else if(values[5]==0)GPIOB -> ODR &= ~M3PH_Pin;
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <main+0x204>)
 8000e30:	895b      	ldrh	r3, [r3, #10]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d105      	bne.n	8000e42 <main+0x132>
 8000e36:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <main+0x1f8>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a33      	ldr	r2, [pc, #204]	; (8000f08 <main+0x1f8>)
 8000e3c:	f023 0310 	bic.w	r3, r3, #16
 8000e40:	6153      	str	r3, [r2, #20]




	        TIM15->CCR2 = values[0];//M1EN
 8000e42:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <main+0x204>)
 8000e44:	881a      	ldrh	r2, [r3, #0]
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <main+0x208>)
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
	          TIM15->CCR1 = values[1];//M2En
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <main+0x204>)
 8000e4c:	885a      	ldrh	r2, [r3, #2]
 8000e4e:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <main+0x208>)
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
	          TIM8->CCR1 = values[2];//M3EN
 8000e52:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <main+0x204>)
 8000e54:	889a      	ldrh	r2, [r3, #4]
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <main+0x20c>)
 8000e58:	635a      	str	r2, [r3, #52]	; 0x34



              //11111;11111;11111;1;1;1;1000;1000;99999 test transmition
//servo and esc receive values from 0-10000, motors from 0 - 65535
int servod=values[6];
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <main+0x204>)
 8000e5c:	899b      	ldrh	r3, [r3, #12]
 8000e5e:	60bb      	str	r3, [r7, #8]
servod=(int)servod/1.574;
 8000e60:	68b8      	ldr	r0, [r7, #8]
 8000e62:	f7ff fb2b 	bl	80004bc <__aeabi_i2d>
 8000e66:	a320      	add	r3, pc, #128	; (adr r3, 8000ee8 <main+0x1d8>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fcba 	bl	80007e4 <__aeabi_ddiv>
 8000e70:	4603      	mov	r3, r0
 8000e72:	460c      	mov	r4, r1
 8000e74:	4618      	mov	r0, r3
 8000e76:	4621      	mov	r1, r4
 8000e78:	f7ff fe3a 	bl	8000af0 <__aeabi_d2iz>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60bb      	str	r3, [r7, #8]
servod=servod+1640;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8000e86:	60bb      	str	r3, [r7, #8]

	TIM3->CCR2 = servod;//servo2
 8000e88:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <main+0x210>)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	6393      	str	r3, [r2, #56]	; 0x38





int escs=values[7];
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <main+0x204>)
 8000e90:	89db      	ldrh	r3, [r3, #14]
 8000e92:	607b      	str	r3, [r7, #4]
if(escs!=0){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d081      	beq.n	8000d9e <main+0x8e>
escs=(int)escs/3.335;
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fb0e 	bl	80004bc <__aeabi_i2d>
 8000ea0:	a313      	add	r3, pc, #76	; (adr r3, 8000ef0 <main+0x1e0>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fc9d 	bl	80007e4 <__aeabi_ddiv>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460c      	mov	r4, r1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	4621      	mov	r1, r4
 8000eb2:	f7ff fe1d 	bl	8000af0 <__aeabi_d2iz>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	607b      	str	r3, [r7, #4]
escs=escs+3500;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 8000ec0:	607b      	str	r3, [r7, #4]
int ec=0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
while(ec<escs){
 8000ec6:	e009      	b.n	8000edc <main+0x1cc>
//
TIM2->CCR4 = escs;//esc
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CCR3 = escs;//esc
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <main+0x210>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	63d3      	str	r3, [r2, #60]	; 0x3c
ec++;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
while(ec<escs){
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf1      	blt.n	8000ec8 <main+0x1b8>
	  if (isCommandReceived) { // (2)
 8000ee4:	e75b      	b.n	8000d9e <main+0x8e>
 8000ee6:	bf00      	nop
 8000ee8:	9fbe76c9 	.word	0x9fbe76c9
 8000eec:	3ff92f1a 	.word	0x3ff92f1a
 8000ef0:	7ae147ae 	.word	0x7ae147ae
 8000ef4:	400aae14 	.word	0x400aae14
 8000ef8:	20000494 	.word	0x20000494
 8000efc:	20000434 	.word	0x20000434
 8000f00:	2000052c 	.word	0x2000052c
 8000f04:	20000628 	.word	0x20000628
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	2000020c 	.word	0x2000020c
 8000f10:	20000578 	.word	0x20000578
 8000f14:	20000480 	.word	0x20000480
 8000f18:	40014000 	.word	0x40014000
 8000f1c:	40013400 	.word	0x40013400
 8000f20:	40000400 	.word	0x40000400

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0a4      	sub	sp, #144	; 0x90
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f2e:	2238      	movs	r2, #56	; 0x38
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f008 fcbf 	bl	80098b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2244      	movs	r2, #68	; 0x44
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 fcb1 	bl	80098b6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f58:	f002 fc00 	bl	800375c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000f5c:	2322      	movs	r3, #34	; 0x22
 8000f5e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f66:	2340      	movs	r3, #64	; 0x40
 8000f68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f72:	2302      	movs	r3, #2
 8000f74:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000f76:	2305      	movs	r3, #5
 8000f78:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000f86:	2308      	movs	r3, #8
 8000f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fc94 	bl	80038c4 <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fa2:	f000 fb23 	bl	80015ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000faa:	2303      	movs	r3, #3
 8000fac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000fb2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 ff96 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fce:	f000 fb0d 	bl	80015ec <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 f96c 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fea:	f000 faff 	bl	80015ec <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3790      	adds	r7, #144	; 0x90
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b098      	sub	sp, #96	; 0x60
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]
 800101c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2234      	movs	r2, #52	; 0x34
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f008 fc46 	bl	80098b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <MX_TIM1_Init+0x120>)
 800102c:	4a3b      	ldr	r2, [pc, #236]	; (800111c <MX_TIM1_Init+0x124>)
 800102e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <MX_TIM1_Init+0x120>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_TIM1_Init+0x120>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <MX_TIM1_Init+0x120>)
 800103e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001042:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	4b34      	ldr	r3, [pc, #208]	; (8001118 <MX_TIM1_Init+0x120>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <MX_TIM1_Init+0x120>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <MX_TIM1_Init+0x120>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001056:	4830      	ldr	r0, [pc, #192]	; (8001118 <MX_TIM1_Init+0x120>)
 8001058:	f003 fb77 	bl	800474a <HAL_TIM_PWM_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001062:	f000 fac3 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001072:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001076:	4619      	mov	r1, r3
 8001078:	4827      	ldr	r0, [pc, #156]	; (8001118 <MX_TIM1_Init+0x120>)
 800107a:	f004 f979 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 fab2 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001088:	2360      	movs	r3, #96	; 0x60
 800108a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001090:	2300      	movs	r3, #0
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001094:	2300      	movs	r3, #0
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	481a      	ldr	r0, [pc, #104]	; (8001118 <MX_TIM1_Init+0x120>)
 80010ae:	f003 fca3 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010b8:	f000 fa98 	bl	80015ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM1_Init+0x120>)
 80010fa:	f004 f9bb 	bl	8005474 <HAL_TIMEx_ConfigBreakDeadTime>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001104:	f000 fa72 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM1_Init+0x120>)
 800110a:	f000 fb29 	bl	8001760 <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3760      	adds	r7, #96	; 0x60
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200005dc 	.word	0x200005dc
 800111c:	40012c00 	.word	0x40012c00

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800115a:	f04f 32ff 	mov.w	r2, #4294967295
 800115e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800116c:	4818      	ldr	r0, [pc, #96]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800116e:	f003 faec 	bl	800474a <HAL_TIM_PWM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001178:	f000 fa38 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	4811      	ldr	r0, [pc, #68]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800118c:	f004 f8f0 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001196:	f000 fa29 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	220c      	movs	r2, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <MX_TIM2_Init+0xb0>)
 80011b2:	f003 fc21 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011bc:	f000 fa16 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <MX_TIM2_Init+0xb0>)
 80011c2:	f000 facd 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000628 	.word	0x20000628

080011d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f8:	4b28      	ldr	r3, [pc, #160]	; (800129c <MX_TIM3_Init+0xc8>)
 80011fa:	4a29      	ldr	r2, [pc, #164]	; (80012a0 <MX_TIM3_Init+0xcc>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MX_TIM3_Init+0xc8>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <MX_TIM3_Init+0xc8>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <MX_TIM3_Init+0xc8>)
 800120c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001210:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_TIM3_Init+0xc8>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <MX_TIM3_Init+0xc8>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800121e:	481f      	ldr	r0, [pc, #124]	; (800129c <MX_TIM3_Init+0xc8>)
 8001220:	f003 fa93 	bl	800474a <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800122a:	f000 f9df 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4817      	ldr	r0, [pc, #92]	; (800129c <MX_TIM3_Init+0xc8>)
 800123e:	f004 f897 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001248:	f000 f9d0 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2204      	movs	r2, #4
 8001260:	4619      	mov	r1, r3
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <MX_TIM3_Init+0xc8>)
 8001264:	f003 fbc8 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800126e:	f000 f9bd 	bl	80015ec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	2208      	movs	r2, #8
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM3_Init+0xc8>)
 800127e:	f003 fbbb 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001288:	f000 f9b0 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM3_Init+0xc8>)
 800128e:	f000 fa67 	bl	8001760 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000052c 	.word	0x2000052c
 80012a0:	40000400 	.word	0x40000400

080012a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b098      	sub	sp, #96	; 0x60
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2234      	movs	r2, #52	; 0x34
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 faf0 	bl	80098b6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <MX_TIM8_Init+0x120>)
 80012d8:	4a3b      	ldr	r2, [pc, #236]	; (80013c8 <MX_TIM8_Init+0x124>)
 80012da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <MX_TIM8_Init+0x120>)
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <MX_TIM8_Init+0x120>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <MX_TIM8_Init+0x120>)
 80012ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <MX_TIM8_Init+0x120>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_TIM8_Init+0x120>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <MX_TIM8_Init+0x120>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001302:	4830      	ldr	r0, [pc, #192]	; (80013c4 <MX_TIM8_Init+0x120>)
 8001304:	f003 fa21 	bl	800474a <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800130e:	f000 f96d 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800131e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001322:	4619      	mov	r1, r3
 8001324:	4827      	ldr	r0, [pc, #156]	; (80013c4 <MX_TIM8_Init+0x120>)
 8001326:	f004 f823 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001330:	f000 f95c 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001350:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	481a      	ldr	r0, [pc, #104]	; (80013c4 <MX_TIM8_Init+0x120>)
 800135a:	f003 fb4d 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001364:	f000 f942 	bl	80015ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800138e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_TIM8_Init+0x120>)
 80013a6:	f004 f865 	bl	8005474 <HAL_TIMEx_ConfigBreakDeadTime>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80013b0:	f000 f91c 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013b4:	4803      	ldr	r0, [pc, #12]	; (80013c4 <MX_TIM8_Init+0x120>)
 80013b6:	f000 f9d3 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80013ba:	bf00      	nop
 80013bc:	3760      	adds	r7, #96	; 0x60
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000434 	.word	0x20000434
 80013c8:	40013400 	.word	0x40013400

080013cc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b098      	sub	sp, #96	; 0x60
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2234      	movs	r2, #52	; 0x34
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f008 fa5c 	bl	80098b6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <MX_TIM15_Init+0x120>)
 8001400:	4a3b      	ldr	r2, [pc, #236]	; (80014f0 <MX_TIM15_Init+0x124>)
 8001402:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <MX_TIM15_Init+0x120>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <MX_TIM15_Init+0x120>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <MX_TIM15_Init+0x120>)
 8001412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001416:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <MX_TIM15_Init+0x120>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <MX_TIM15_Init+0x120>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <MX_TIM15_Init+0x120>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800142a:	4830      	ldr	r0, [pc, #192]	; (80014ec <MX_TIM15_Init+0x120>)
 800142c:	f003 f98d 	bl	800474a <HAL_TIM_PWM_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 f8d9 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001442:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001446:	4619      	mov	r1, r3
 8001448:	4828      	ldr	r0, [pc, #160]	; (80014ec <MX_TIM15_Init+0x120>)
 800144a:	f003 ff91 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001454:	f000 f8ca 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001458:	2360      	movs	r3, #96	; 0x60
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <MX_TIM15_Init+0x120>)
 800147e:	f003 fabb 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001488:	f000 f8b0 	bl	80015ec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001490:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001494:	2204      	movs	r2, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4814      	ldr	r0, [pc, #80]	; (80014ec <MX_TIM15_Init+0x120>)
 800149a:	f003 faad 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 80014a4:	f000 f8a2 	bl	80015ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM15_Init+0x120>)
 80014d0:	f003 ffd0 	bl	8005474 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80014da:	f000 f887 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM15_Init+0x120>)
 80014e0:	f000 f93e 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3760      	adds	r7, #96	; 0x60
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000494 	.word	0x20000494
 80014f0:	40014000 	.word	0x40014000

080014f4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_TIM17_Init+0x44>)
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <MX_TIM17_Init+0x48>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_TIM17_Init+0x44>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_TIM17_Init+0x44>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_TIM17_Init+0x44>)
 800150c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001510:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_TIM17_Init+0x44>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_TIM17_Init+0x44>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_TIM17_Init+0x44>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_TIM17_Init+0x44>)
 8001526:	f003 f8b9 	bl	800469c <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001530:	f000 f85c 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200004e0 	.word	0x200004e0
 800153c:	40014800 	.word	0x40014800

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <MX_GPIO_Init+0xa4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <MX_GPIO_Init+0xa4>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MX_GPIO_Init+0xa4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_GPIO_Init+0xa4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_GPIO_Init+0xa4>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_GPIO_Init+0xa4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2PH_Pin|M1PH_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7108 	mov.w	r1, #544	; 0x220
 800158c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001590:	f000 fd4a 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_Pin|M3PH_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2118      	movs	r1, #24
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <MX_GPIO_Init+0xa8>)
 800159a:	f000 fd45 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M2PH_Pin M1PH_Pin */
  GPIO_InitStruct.Pin = M2PH_Pin|M1PH_Pin;
 800159e:	f44f 7308 	mov.w	r3, #544	; 0x220
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f000 fbb3 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin M3PH_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|M3PH_Pin;
 80015be:	2318      	movs	r3, #24
 80015c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_GPIO_Init+0xa8>)
 80015d6:	f000 fba5 	bl	8001d24 <HAL_GPIO_Init>

}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	48000400 	.word	0x48000400

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_MspInit+0x44>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_MspInit+0x44>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6613      	str	r3, [r2, #96]	; 0x60
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_MspInit+0x44>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x44>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x44>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6593      	str	r3, [r2, #88]	; 0x58
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001632:	f002 f937 	bl	80038a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a2e      	ldr	r2, [pc, #184]	; (800170c <HAL_TIM_PWM_MspInit+0xc8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10c      	bne.n	8001670 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 800165c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001660:	6613      	str	r3, [r2, #96]	; 0x60
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800166e:	e046      	b.n	80016fe <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001678:	d10c      	bne.n	8001694 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	4a24      	ldr	r2, [pc, #144]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]
}
 8001692:	e034      	b.n	80016fe <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_TIM_PWM_MspInit+0xd0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10c      	bne.n	80016b8 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6593      	str	r3, [r2, #88]	; 0x58
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
}
 80016b6:	e022      	b.n	80016fe <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_TIM_PWM_MspInit+0xd4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10c      	bne.n	80016dc <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
}
 80016da:	e010      	b.n	80016fe <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM15)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_TIM_PWM_MspInit+0xd8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10b      	bne.n	80016fe <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6613      	str	r3, [r2, #96]	; 0x60
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_TIM_PWM_MspInit+0xcc>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
}
 80016fe:	bf00      	nop
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40012c00 	.word	0x40012c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40000400 	.word	0x40000400
 8001718:	40013400 	.word	0x40013400
 800171c:	40014000 	.word	0x40014000

08001720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_TIM_Base_MspInit+0x38>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10b      	bne.n	800174a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6613      	str	r3, [r2, #96]	; 0x60
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40014800 	.word	0x40014800
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08e      	sub	sp, #56	; 0x38
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a67      	ldr	r2, [pc, #412]	; (800191c <HAL_TIM_MspPostInit+0x1bc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d11e      	bne.n	80017c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a66      	ldr	r2, [pc, #408]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin;
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017ac:	2306      	movs	r3, #6
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM1_CH1_SERVO1_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f000 fab3 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80017be:	e0a8      	b.n	8001912 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c8:	d11e      	bne.n	8001808 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b52      	ldr	r3, [pc, #328]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80017f4:	230a      	movs	r3, #10
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001802:	f000 fa8f 	bl	8001d24 <HAL_GPIO_Init>
}
 8001806:	e084      	b.n	8001912 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a45      	ldr	r2, [pc, #276]	; (8001924 <HAL_TIM_MspPostInit+0x1c4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d139      	bne.n	8001886 <HAL_TIM_MspPostInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a42      	ldr	r2, [pc, #264]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001852:	2302      	movs	r3, #2
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f000 fa60 	bl	8001d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001874:	2302      	movs	r3, #2
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	482a      	ldr	r0, [pc, #168]	; (8001928 <HAL_TIM_MspPostInit+0x1c8>)
 8001880:	f000 fa50 	bl	8001d24 <HAL_GPIO_Init>
}
 8001884:	e045      	b.n	8001912 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM8)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a28      	ldr	r2, [pc, #160]	; (800192c <HAL_TIM_MspPostInit+0x1cc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d11e      	bne.n	80018ce <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	4a22      	ldr	r2, [pc, #136]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM8_CH1_M3EN_Pin;
 80018a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80018ba:	2302      	movs	r3, #2
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM8_CH1_M3EN_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f000 fa2c 	bl	8001d24 <HAL_GPIO_Init>
}
 80018cc:	e021      	b.n	8001912 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM15)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_TIM_MspPostInit+0x1d0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d11c      	bne.n	8001912 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_TIM_MspPostInit+0x1c0>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM15_CH1_M2EN_Pin|TIM15_CH2_M1EN_Pin;
 80018f0:	230c      	movs	r3, #12
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001900:	2309      	movs	r3, #9
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190e:	f000 fa09 	bl	8001d24 <HAL_GPIO_Init>
}
 8001912:	bf00      	nop
 8001914:	3738      	adds	r7, #56	; 0x38
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012c00 	.word	0x40012c00
 8001920:	40021000 	.word	0x40021000
 8001924:	40000400 	.word	0x40000400
 8001928:	48000400 	.word	0x48000400
 800192c:	40013400 	.word	0x40013400
 8001930:	40014000 	.word	0x40014000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f89e 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <USB_LP_IRQHandler+0x10>)
 8001996:	f000 fc80 	bl	800229a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000134c 	.word	0x2000134c

080019a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <SystemInit+0x28>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <SystemInit+0x28>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SystemInit+0x28>)
 80019ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019be:	609a      	str	r2, [r3, #8]
#endif
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <LoopForever+0xe>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ec:	4c0b      	ldr	r4, [pc, #44]	; (8001a1c <LoopForever+0x16>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019fa:	f7ff ffd3 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f007 ff2b 	bl	8009858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a02:	f7ff f985 	bl	8000d10 <main>

08001a06 <LoopForever>:

LoopForever:
    b LoopForever
 8001a06:	e7fe      	b.n	8001a06 <LoopForever>
  ldr   r0, =_estack
 8001a08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001a14:	0800aa38 	.word	0x0800aa38
  ldr r2, =_sbss
 8001a18:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001a1c:	20001640 	.word	0x20001640

08001a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC1_2_IRQHandler>

08001a22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f939 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f80e 	bl	8001a54 <HAL_InitTick>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	e001      	b.n	8001a48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a44:	f7ff fdda 	bl	80015fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a48:	79fb      	ldrb	r3, [r7, #7]

}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_InitTick+0x68>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d022      	beq.n	8001aae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_InitTick+0x6c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_InitTick+0x68>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f944 	bl	8001d0a <HAL_SYSTICK_Config>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10f      	bne.n	8001aa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	d809      	bhi.n	8001aa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	f04f 30ff 	mov.w	r0, #4294967295
 8001a96:	f000 f910 	bl	8001cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_InitTick+0x70>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e007      	b.n	8001ab2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e004      	b.n	8001ab2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e001      	b.n	8001ab2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000000c 	.word	0x2000000c
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_IncTick+0x1c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <HAL_IncTick+0x1c>)
 8001ad8:	6013      	str	r3, [r2, #0]
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	200006a8 	.word	0x200006a8
 8001ae8:	2000000c 	.word	0x2000000c

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200006a8 	.word	0x200006a8

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc8:	f7ff ff40 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff90 	bl	8001bf8 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5f 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff33 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffa4 	bl	8001c60 <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d32:	e15a      	b.n	8001fea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 814c 	beq.w	8001fe4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d00b      	beq.n	8001d6c <HAL_GPIO_Init+0x48>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d60:	2b11      	cmp	r3, #17
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b12      	cmp	r3, #18
 8001d6a:	d130      	bne.n	8001dce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da2:	2201      	movs	r2, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	f003 0201 	and.w	r2, r3, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0xea>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d123      	bne.n	8001e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	6939      	ldr	r1, [r7, #16]
 8001e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0203 	and.w	r2, r3, #3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80a6 	beq.w	8001fe4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e98:	4b5b      	ldr	r3, [pc, #364]	; (8002008 <HAL_GPIO_Init+0x2e4>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	4a5a      	ldr	r2, [pc, #360]	; (8002008 <HAL_GPIO_Init+0x2e4>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea4:	4b58      	ldr	r3, [pc, #352]	; (8002008 <HAL_GPIO_Init+0x2e4>)
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb0:	4a56      	ldr	r2, [pc, #344]	; (800200c <HAL_GPIO_Init+0x2e8>)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eda:	d01f      	beq.n	8001f1c <HAL_GPIO_Init+0x1f8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a4c      	ldr	r2, [pc, #304]	; (8002010 <HAL_GPIO_Init+0x2ec>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d019      	beq.n	8001f18 <HAL_GPIO_Init+0x1f4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <HAL_GPIO_Init+0x2f0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a4a      	ldr	r2, [pc, #296]	; (8002018 <HAL_GPIO_Init+0x2f4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00d      	beq.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_GPIO_Init+0x2f8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <HAL_GPIO_Init+0x1e8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x2fc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_GPIO_Init+0x1e4>
 8001f04:	2305      	movs	r3, #5
 8001f06:	e00a      	b.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f08:	2306      	movs	r3, #6
 8001f0a:	e008      	b.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e006      	b.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e004      	b.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2e:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_GPIO_Init+0x2e8>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f3c:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f60:	4a30      	ldr	r2, [pc, #192]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f8a:	4a26      	ldr	r2, [pc, #152]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f47f ae9d 	bne.w	8001d34 <HAL_GPIO_Init+0x10>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40010000 	.word	0x40010000
 8002010:	48000400 	.word	0x48000400
 8002014:	48000800 	.word	0x48000800
 8002018:	48000c00 	.word	0x48000c00
 800201c:	48001000 	.word	0x48001000
 8002020:	48001400 	.word	0x48001400
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002044:	e002      	b.n	800204c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43d9      	mvns	r1, r3
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	400b      	ands	r3, r1
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	b08b      	sub	sp, #44	; 0x2c
 8002090:	af06      	add	r7, sp, #24
 8002092:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0d7      	b.n	800224e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f007 f8da 	bl	800926c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fa8c 	bl	80055e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e04c      	b.n	800216a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	3301      	adds	r3, #1
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	b298      	uxth	r0, r3
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3336      	adds	r3, #54	; 0x36
 800210e:	4602      	mov	r2, r0
 8002110:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3303      	adds	r3, #3
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	3338      	adds	r3, #56	; 0x38
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	333c      	adds	r3, #60	; 0x3c
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	3340      	adds	r3, #64	; 0x40
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	3301      	adds	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	d3ad      	bcc.n	80020d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e044      	b.n	8002204 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	f203 1369 	addw	r3, r3, #361	; 0x169
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	3301      	adds	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d3b5      	bcc.n	800217a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	687e      	ldr	r6, [r7, #4]
 8002216:	466d      	mov	r5, sp
 8002218:	f106 0410 	add.w	r4, r6, #16
 800221c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	602b      	str	r3, [r5, #0]
 8002224:	1d33      	adds	r3, r6, #4
 8002226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f003 f9f5 	bl	8005618 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f001 fa5e 	bl	8003708 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002256 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_PCD_Start+0x16>
 8002268:	2302      	movs	r3, #2
 800226a:	e012      	b.n	8002292 <HAL_PCD_Start+0x3c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f003 f99b 	bl	80055b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f005 f987 	bl	8007596 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f005 f98c 	bl	80075c4 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b6:	d102      	bne.n	80022be <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fb5b 	bl	8002974 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 f97e 	bl	80075c4 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d2:	d112      	bne.n	80022fa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e6:	b292      	uxth	r2, r2
 80022e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f007 f838 	bl	8009362 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022f2:	2100      	movs	r1, #0
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f91e 	bl	8002536 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f005 f960 	bl	80075c4 <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800230e:	d10b      	bne.n	8002328 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002322:	b292      	uxth	r2, r2
 8002324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f005 f949 	bl	80075c4 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233c:	d10b      	bne.n	8002356 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002346:	b29a      	uxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002350:	b292      	uxth	r2, r2
 8002352:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f005 f932 	bl	80075c4 <USB_ReadInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236a:	d133      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0204 	bic.w	r2, r2, #4
 800237e:	b292      	uxth	r2, r2
 8002380:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0208 	bic.w	r2, r2, #8
 8002396:	b292      	uxth	r2, r2
 8002398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023ae:	2100      	movs	r1, #0
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f007 f9cb 	bl	800974c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f007 f80c 	bl	80093d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ce:	b292      	uxth	r2, r2
 80023d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f005 f8f3 	bl	80075c4 <USB_ReadInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e8:	d126      	bne.n	8002438 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0208 	orr.w	r2, r2, #8
 80023fc:	b292      	uxth	r2, r2
 80023fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002414:	b292      	uxth	r2, r2
 8002416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0204 	orr.w	r2, r2, #4
 800242c:	b292      	uxth	r2, r2
 800242e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f006 ffb4 	bl	80093a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f005 f8c1 	bl	80075c4 <USB_ReadInterrupts>
 8002442:	4603      	mov	r3, r0
 8002444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002448:	2b80      	cmp	r3, #128	; 0x80
 800244a:	d13f      	bne.n	80024cc <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245e:	b292      	uxth	r2, r2
 8002460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d12b      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0204 	orr.w	r2, r2, #4
 8002480:	b292      	uxth	r2, r2
 8002482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800248e:	b29a      	uxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0208 	orr.w	r2, r2, #8
 8002498:	b292      	uxth	r2, r2
 800249a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024bc:	2101      	movs	r1, #1
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f007 f944 	bl	800974c <HAL_PCDEx_LPM_Callback>
 80024c4:	e002      	b.n	80024cc <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f006 ff6a 	bl	80093a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f005 f877 	bl	80075c4 <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e0:	d10e      	bne.n	8002500 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f4:	b292      	uxth	r2, r2
 80024f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f006 ff23 	bl	8009346 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f005 f85d 	bl	80075c4 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002514:	d10b      	bne.n	800252e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800251e:	b29a      	uxth	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002528:	b292      	uxth	r2, r2
 800252a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_PCD_SetAddress+0x1a>
 800254c:	2302      	movs	r3, #2
 800254e:	e013      	b.n	8002578 <HAL_PCD_SetAddress+0x42>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f005 f800 	bl	800756e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	70fb      	strb	r3, [r7, #3]
 8002592:	460b      	mov	r3, r1
 8002594:	803b      	strh	r3, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800259e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	da0e      	bge.n	80025c4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	705a      	strb	r2, [r3, #1]
 80025c2:	e00e      	b.n	80025e2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 0207 	and.w	r2, r3, #7
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025ee:	883a      	ldrh	r2, [r7, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	78ba      	ldrb	r2, [r7, #2]
 80025f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800260c:	78bb      	ldrb	r3, [r7, #2]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d102      	bne.n	8002618 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_PCD_EP_Open+0xa6>
 8002622:	2302      	movs	r3, #2
 8002624:	e00e      	b.n	8002644 <HAL_PCD_EP_Open+0xc4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	4618      	mov	r0, r3
 8002636:	f003 f811 	bl	800565c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002642:	7afb      	ldrb	r3, [r7, #11]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da0e      	bge.n	800267e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	705a      	strb	r2, [r3, #1]
 800267c:	e00e      	b.n	800269c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	f003 0207 	and.w	r2, r3, #7
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_PCD_EP_Close+0x6a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e00e      	b.n	80026d4 <HAL_PCD_EP_Close+0x88>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fb37 	bl	8005d38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	f003 0207 	and.w	r2, r3, #7
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	b2da      	uxtb	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6979      	ldr	r1, [r7, #20]
 8002738:	4618      	mov	r0, r3
 800273a:	f003 fcea 	bl	8006112 <USB_EPStartXfer>
 800273e:	e005      	b.n	800274c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6979      	ldr	r1, [r7, #20]
 8002746:	4618      	mov	r0, r3
 8002748:	f003 fce3 	bl	8006112 <USB_EPStartXfer>
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 0207 	and.w	r2, r3, #7
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002778:	681b      	ldr	r3, [r3, #0]
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	460b      	mov	r3, r1
 8002794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2200      	movs	r2, #0
 80027ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2201      	movs	r2, #1
 80027d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027de:	7afb      	ldrb	r3, [r7, #11]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fc8f 	bl	8006112 <USB_EPStartXfer>
 80027f4:	e005      	b.n	8002802 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6979      	ldr	r1, [r7, #20]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fc88 	bl	8006112 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 0207 	and.w	r2, r3, #7
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d901      	bls.n	800282a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e04c      	b.n	80028c4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800282a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	da0e      	bge.n	8002850 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	705a      	strb	r2, [r3, #1]
 800284e:	e00c      	b.n	800286a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	b2da      	uxtb	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_PCD_EP_SetStall+0x7e>
 8002886:	2302      	movs	r3, #2
 8002888:	e01c      	b.n	80028c4 <HAL_PCD_EP_SetStall+0xb8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68f9      	ldr	r1, [r7, #12]
 8002898:	4618      	mov	r0, r3
 800289a:	f004 fd69 	bl	8007370 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d108      	bne.n	80028ba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f004 fe95 	bl	80075e4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d901      	bls.n	80028ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e040      	b.n	800296c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	da0e      	bge.n	8002910 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	705a      	strb	r2, [r3, #1]
 800290e:	e00e      	b.n	800292e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 0207 	and.w	r2, r3, #7
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_PCD_EP_ClrStall+0x82>
 800294a:	2302      	movs	r3, #2
 800294c:	e00e      	b.n	800296c <HAL_PCD_EP_ClrStall+0xa0>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	4618      	mov	r0, r3
 800295e:	f004 fd58 	bl	8007412 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08e      	sub	sp, #56	; 0x38
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800297c:	e2d1      	b.n	8002f22 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002986:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002988:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002994:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 8152 	bne.w	8002c42 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800299e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d150      	bne.n	8002a4a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	81fb      	strh	r3, [r7, #14]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	89fb      	ldrh	r3, [r7, #14]
 80029c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3328      	adds	r3, #40	; 0x28
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	441a      	add	r2, r3
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f006 fc81 	bl	8009312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8282 	beq.w	8002f22 <PCD_EP_ISR_Handler+0x5ae>
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 827d 	bne.w	8002f22 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a48:	e26b      	b.n	8002f22 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d032      	beq.n	8002aca <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f004 fded 	bl	800767e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	823b      	strh	r3, [r7, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	8a3a      	ldrh	r2, [r7, #16]
 8002aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f006 fbf8 	bl	80092b8 <HAL_PCD_SetupStageCallback>
 8002ac8:	e22b      	b.n	8002f22 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002aca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f280 8227 	bge.w	8002f22 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	83bb      	strh	r3, [r7, #28]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	8bba      	ldrh	r2, [r7, #28]
 8002aea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aee:	b292      	uxth	r2, r2
 8002af0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d019      	beq.n	8002b56 <PCD_EP_ISR_Handler+0x1e2>
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d015      	beq.n	8002b56 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	6959      	ldr	r1, [r3, #20]
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f004 fd9f 	bl	800767e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	441a      	add	r2, r3
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b4e:	2100      	movs	r1, #0
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f006 fbc3 	bl	80092dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d112      	bne.n	8002ba4 <PCD_EP_ISR_Handler+0x230>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	e02f      	b.n	8002c04 <PCD_EP_ISR_Handler+0x290>
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8002baa:	d813      	bhi.n	8002bd4 <PCD_EP_ISR_Handler+0x260>
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <PCD_EP_ISR_Handler+0x252>
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	029b      	lsls	r3, r3, #10
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	e017      	b.n	8002c04 <PCD_EP_ISR_Handler+0x290>
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <PCD_EP_ISR_Handler+0x27a>
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	3b01      	subs	r3, #1
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	029b      	lsls	r3, r3, #10
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c14:	827b      	strh	r3, [r7, #18]
 8002c16:	8a7b      	ldrh	r3, [r7, #18]
 8002c18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c1c:	827b      	strh	r3, [r7, #18]
 8002c1e:	8a7b      	ldrh	r3, [r7, #18]
 8002c20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c24:	827b      	strh	r3, [r7, #18]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	8a7b      	ldrh	r3, [r7, #18]
 8002c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	8013      	strh	r3, [r2, #0]
 8002c40:	e16f      	b.n	8002f22 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c54:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f280 80e4 	bge.w	8002e26 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c74:	4013      	ands	r3, r2
 8002c76:	853b      	strh	r3, [r7, #40]	; 0x28
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c8c:	b292      	uxth	r2, r2
 8002c8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c90:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	7b1b      	ldrb	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d120      	bne.n	8002cf0 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002cd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8083 	beq.w	8002de2 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	6959      	ldr	r1, [r3, #20]
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	88da      	ldrh	r2, [r3, #6]
 8002ce8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cea:	f004 fcc8 	bl	800767e <USB_ReadPMA>
 8002cee:	e078      	b.n	8002de2 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	78db      	ldrb	r3, [r3, #3]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d108      	bne.n	8002d0a <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002cf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f91d 	bl	8002f3e <HAL_PCD_EP_DB_Receive>
 8002d04:	4603      	mov	r3, r0
 8002d06:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002d08:	e06b      	b.n	8002de2 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d24:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	441a      	add	r2, r3
 8002d34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01f      	beq.n	8002da4 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d88:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d028      	beq.n	8002de2 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	6959      	ldr	r1, [r3, #20]
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	891a      	ldrh	r2, [r3, #8]
 8002d9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d9e:	f004 fc6e 	bl	800767e <USB_ReadPMA>
 8002da2:	e01e      	b.n	8002de2 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002dca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	6959      	ldr	r1, [r3, #20]
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	895a      	ldrh	r2, [r3, #10]
 8002ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dde:	f004 fc4e 	bl	800767e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002de8:	441a      	add	r2, r3
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002df4:	441a      	add	r2, r3
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <PCD_EP_ISR_Handler+0x498>
 8002e02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d206      	bcs.n	8002e1a <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f006 fa62 	bl	80092dc <HAL_PCD_DataOutStageCallback>
 8002e18:	e005      	b.n	8002e26 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 f976 	bl	8006112 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d078      	beq.n	8002f22 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	843b      	strh	r3, [r7, #32]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	8c3b      	ldrh	r3, [r7, #32]
 8002e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	78db      	ldrb	r3, [r3, #3]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d108      	bne.n	8002e96 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d144      	bne.n	8002f16 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d13f      	bne.n	8002f16 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eba:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	8bfb      	ldrh	r3, [r7, #30]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d906      	bls.n	8002ed4 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	8bfb      	ldrh	r3, [r7, #30]
 8002ecc:	1ad2      	subs	r2, r2, r3
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	619a      	str	r2, [r3, #24]
 8002ed2:	e002      	b.n	8002eda <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f006 fa12 	bl	8009312 <HAL_PCD_DataInStageCallback>
 8002eee:	e018      	b.n	8002f22 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	8bfb      	ldrh	r3, [r7, #30]
 8002ef6:	441a      	add	r2, r3
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	8bfb      	ldrh	r3, [r7, #30]
 8002f02:	441a      	add	r2, r3
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 f8ff 	bl	8006112 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002f14:	e005      	b.n	8002f22 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f917 	bl	8003150 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f6ff ad25 	blt.w	800297e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3738      	adds	r7, #56	; 0x38
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b088      	sub	sp, #32
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d07c      	beq.n	8003050 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	8b7b      	ldrh	r3, [r7, #26]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d306      	bcc.n	8002f94 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	8b7b      	ldrh	r3, [r7, #26]
 8002f8c:	1ad2      	subs	r2, r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	619a      	str	r2, [r3, #24]
 8002f92:	e002      	b.n	8002f9a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d123      	bne.n	8002fea <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	833b      	strh	r3, [r7, #24]
 8002fbe:	8b3b      	ldrh	r3, [r7, #24]
 8002fc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fc4:	833b      	strh	r3, [r7, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	441a      	add	r2, r3
 8002fd4:	8b3b      	ldrh	r3, [r7, #24]
 8002fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01f      	beq.n	8003034 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	82fb      	strh	r3, [r7, #22]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	8afb      	ldrh	r3, [r7, #22]
 8003020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003030:	b29b      	uxth	r3, r3
 8003032:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003034:	8b7b      	ldrh	r3, [r7, #26]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8085 	beq.w	8003146 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6959      	ldr	r1, [r3, #20]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	891a      	ldrh	r2, [r3, #8]
 8003048:	8b7b      	ldrh	r3, [r7, #26]
 800304a:	f004 fb18 	bl	800767e <USB_ReadPMA>
 800304e:	e07a      	b.n	8003146 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	4413      	add	r3, r2
 800306a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003074:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	8b7b      	ldrh	r3, [r7, #26]
 800307c:	429a      	cmp	r2, r3
 800307e:	d306      	bcc.n	800308e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	8b7b      	ldrh	r3, [r7, #26]
 8003086:	1ad2      	subs	r2, r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	619a      	str	r2, [r3, #24]
 800308c:	e002      	b.n	8003094 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d123      	bne.n	80030e4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b6:	83fb      	strh	r3, [r7, #30]
 80030b8:	8bfb      	ldrh	r3, [r7, #30]
 80030ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030be:	83fb      	strh	r3, [r7, #30]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	8bfb      	ldrh	r3, [r7, #30]
 80030d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11f      	bne.n	800312e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003108:	83bb      	strh	r3, [r7, #28]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	8bbb      	ldrh	r3, [r7, #28]
 800311a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800312e:	8b7b      	ldrh	r3, [r7, #26]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6959      	ldr	r1, [r3, #20]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	895a      	ldrh	r2, [r3, #10]
 8003140:	8b7b      	ldrh	r3, [r7, #26]
 8003142:	f004 fa9c 	bl	800767e <USB_ReadPMA>
    }
  }

  return count;
 8003146:	8b7b      	ldrh	r3, [r7, #26]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b092      	sub	sp, #72	; 0x48
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8130 	beq.w	80033ca <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	4413      	add	r3, r2
 8003184:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003196:	429a      	cmp	r2, r3
 8003198:	d906      	bls.n	80031a8 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	619a      	str	r2, [r3, #24]
 80031a6:	e002      	b.n	80031ae <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d12c      	bne.n	8003210 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f006 f8a8 	bl	8009312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 822d 	beq.w	8003628 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e8:	827b      	strh	r3, [r7, #18]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	8a7b      	ldrh	r3, [r7, #18]
 80031fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320a:	b29b      	uxth	r3, r3
 800320c:	8013      	strh	r3, [r2, #0]
 800320e:	e20b      	b.n	8003628 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01f      	beq.n	800325a <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003234:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003256:	b29b      	uxth	r3, r3
 8003258:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 81e1 	bne.w	8003628 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800326c:	441a      	add	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003278:	441a      	add	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	429a      	cmp	r2, r3
 8003288:	d309      	bcc.n	800329e <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	621a      	str	r2, [r3, #32]
 800329c:	e014      	b.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80032a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032a8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032b2:	e009      	b.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2200      	movs	r2, #0
 80032c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d155      	bne.n	800337c <HAL_PCD_EP_DB_Transmit+0x22c>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032de:	b29b      	uxth	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4413      	add	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	00da      	lsls	r2, r3, #3
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4413      	add	r3, r2
 80032f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d112      	bne.n	8003324 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003308:	b29a      	uxth	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800331c:	b29a      	uxth	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	801a      	strh	r2, [r3, #0]
 8003322:	e047      	b.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x264>
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	2b3e      	cmp	r3, #62	; 0x3e
 8003328:	d811      	bhi.n	800334e <HAL_PCD_EP_DB_Transmit+0x1fe>
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_PCD_EP_DB_Transmit+0x1f0>
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	3301      	adds	r3, #1
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	b29b      	uxth	r3, r3
 8003344:	029b      	lsls	r3, r3, #10
 8003346:	b29a      	uxth	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	801a      	strh	r2, [r3, #0]
 800334c:	e032      	b.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x264>
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <HAL_PCD_EP_DB_Transmit+0x214>
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	b29b      	uxth	r3, r3
 8003368:	029b      	lsls	r3, r3, #10
 800336a:	b29b      	uxth	r3, r3
 800336c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003374:	b29a      	uxth	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	801a      	strh	r2, [r3, #0]
 800337a:	e01b      	b.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x264>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d117      	bne.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x264>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	623b      	str	r3, [r7, #32]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	4413      	add	r3, r2
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	00da      	lsls	r2, r3, #3
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	4413      	add	r3, r2
 80033a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6959      	ldr	r1, [r3, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	891a      	ldrh	r2, [r3, #8]
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f004 f91a 	bl	80075fc <USB_WritePMA>
 80033c8:	e12e      	b.n	8003628 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d306      	bcc.n	8003408 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003400:	1ad2      	subs	r2, r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	619a      	str	r2, [r3, #24]
 8003406:	e002      	b.n	800340e <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d12c      	bne.n	8003470 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f005 ff78 	bl	8009312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 80fd 	bne.w	8003628 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	84fb      	strh	r3, [r7, #38]	; 0x26
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]
 800346e:	e0db      	b.n	8003628 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11f      	bne.n	80034ba <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003494:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	441a      	add	r2, r3
 80034a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	f040 80b1 	bne.w	8003628 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034cc:	441a      	add	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034d8:	441a      	add	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d309      	bcc.n	80034fe <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6a1a      	ldr	r2, [r3, #32]
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	621a      	str	r2, [r3, #32]
 80034fc:	e014      	b.n	8003528 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003508:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003512:	e009      	b.n	8003528 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d155      	bne.n	80035e2 <HAL_PCD_EP_DB_Transmit+0x492>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	647b      	str	r3, [r7, #68]	; 0x44
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003544:	b29b      	uxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354a:	4413      	add	r3, r2
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	00da      	lsls	r2, r3, #3
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	4413      	add	r3, r2
 8003558:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800355c:	643b      	str	r3, [r7, #64]	; 0x40
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	2b00      	cmp	r3, #0
 8003562:	d112      	bne.n	800358a <HAL_PCD_EP_DB_Transmit+0x43a>
 8003564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800356e:	b29a      	uxth	r2, r3
 8003570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800357e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003582:	b29a      	uxth	r2, r3
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	801a      	strh	r2, [r3, #0]
 8003588:	e044      	b.n	8003614 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	2b3e      	cmp	r3, #62	; 0x3e
 800358e:	d811      	bhi.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x464>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	085b      	lsrs	r3, r3, #1
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_PCD_EP_DB_Transmit+0x456>
 80035a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a2:	3301      	adds	r3, #1
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	e02f      	b.n	8003614 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <HAL_PCD_EP_DB_Transmit+0x47a>
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	3b01      	subs	r3, #1
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	029b      	lsls	r3, r3, #10
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	e018      	b.n	8003614 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d114      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	4413      	add	r3, r2
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	00da      	lsls	r2, r3, #3
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	4413      	add	r3, r2
 8003606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800360a:	633b      	str	r3, [r7, #48]	; 0x30
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	b29a      	uxth	r2, r3
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6959      	ldr	r1, [r3, #20]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	895a      	ldrh	r2, [r3, #10]
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	b29b      	uxth	r3, r3
 8003624:	f003 ffea 	bl	80075fc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003642:	823b      	strh	r3, [r7, #16]
 8003644:	8a3b      	ldrh	r3, [r7, #16]
 8003646:	f083 0310 	eor.w	r3, r3, #16
 800364a:	823b      	strh	r3, [r7, #16]
 800364c:	8a3b      	ldrh	r3, [r7, #16]
 800364e:	f083 0320 	eor.w	r3, r3, #32
 8003652:	823b      	strh	r3, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	8a3b      	ldrh	r3, [r7, #16]
 8003664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800366c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003674:	b29b      	uxth	r3, r3
 8003676:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3748      	adds	r7, #72	; 0x48
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	817b      	strh	r3, [r7, #10]
 8003690:	4613      	mov	r3, r2
 8003692:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003694:	897b      	ldrh	r3, [r7, #10]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a0:	897b      	ldrh	r3, [r7, #10]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e009      	b.n	80036cc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036b8:	897a      	ldrh	r2, [r7, #10]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036cc:	893b      	ldrh	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	80da      	strh	r2, [r3, #6]
 80036e0:	e00b      	b.n	80036fa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2201      	movs	r2, #1
 80036e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800372c:	b29b      	uxth	r3, r3
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003740:	b29b      	uxth	r3, r3
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d141      	bne.n	80037ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800376a:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d131      	bne.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003778:	4b47      	ldr	r3, [pc, #284]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800377e:	4a46      	ldr	r2, [pc, #280]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003788:	4b43      	ldr	r3, [pc, #268]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003790:	4a41      	ldr	r2, [pc, #260]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003796:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003798:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2232      	movs	r2, #50	; 0x32
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	4a3f      	ldr	r2, [pc, #252]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	0c9b      	lsrs	r3, r3, #18
 80037aa:	3301      	adds	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ae:	e002      	b.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b6:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c2:	d102      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f2      	bne.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ca:	4b33      	ldr	r3, [pc, #204]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d158      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e057      	b.n	800388c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037dc:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e2:	4a2d      	ldr	r2, [pc, #180]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037ec:	e04d      	b.n	800388a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f4:	d141      	bne.n	800387a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037f6:	4b28      	ldr	r3, [pc, #160]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d131      	bne.n	8003868 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800380a:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003814:	4b20      	ldr	r3, [pc, #128]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800381c:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003822:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2232      	movs	r2, #50	; 0x32
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	0c9b      	lsrs	r3, r3, #18
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800383a:	e002      	b.n	8003842 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3b01      	subs	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384e:	d102      	bne.n	8003856 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f2      	bne.n	800383c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003862:	d112      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e011      	b.n	800388c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003878:	e007      	b.n	800388a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003882:	4a05      	ldr	r2, [pc, #20]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003888:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40007000 	.word	0x40007000
 800389c:	20000004 	.word	0x20000004
 80038a0:	431bde83 	.word	0x431bde83

080038a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b2:	6093      	str	r3, [r2, #8]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40007000 	.word	0x40007000

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e308      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e2:	4ba3      	ldr	r3, [pc, #652]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ec:	4ba0      	ldr	r3, [pc, #640]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d102      	bne.n	8003902 <HAL_RCC_OscConfig+0x3e>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d002      	beq.n	8003908 <HAL_RCC_OscConfig+0x44>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4b99      	ldr	r3, [pc, #612]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05b      	beq.n	80039cc <HAL_RCC_OscConfig+0x108>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d157      	bne.n	80039cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e2e3      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x74>
 800392a:	4b91      	ldr	r3, [pc, #580]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a90      	ldr	r2, [pc, #576]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x98>
 8003942:	4b8b      	ldr	r3, [pc, #556]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a8a      	ldr	r2, [pc, #552]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a87      	ldr	r2, [pc, #540]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 800395c:	4b84      	ldr	r3, [pc, #528]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a83      	ldr	r2, [pc, #524]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe f8b6 	bl	8001aec <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe f8b2 	bl	8001aec <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e2a8      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003996:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xc0>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fe f8a2 	bl	8001aec <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe f89e 	bl	8001aec <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e294      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039be:	4b6c      	ldr	r3, [pc, #432]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0xe8>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d075      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e4:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_OscConfig+0x136>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d002      	beq.n	8003a00 <HAL_RCC_OscConfig+0x13c>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d11f      	bne.n	8003a40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a00:	4b5b      	ldr	r3, [pc, #364]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_OscConfig+0x154>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e267      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a18:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	4952      	ldr	r1, [pc, #328]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a2c:	4b51      	ldr	r3, [pc, #324]	; (8003b74 <HAL_RCC_OscConfig+0x2b0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe f80f 	bl	8001a54 <HAL_InitTick>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d043      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e253      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d023      	beq.n	8003a90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a48:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a48      	ldr	r2, [pc, #288]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe f84a 	bl	8001aec <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5c:	f7fe f846 	bl	8001aec <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e23c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6e:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	061b      	lsls	r3, r3, #24
 8003a88:	4939      	ldr	r1, [pc, #228]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]
 8003a8e:	e01a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a90:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a36      	ldr	r2, [pc, #216]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe f826 	bl	8001aec <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fe f822 	bl	8001aec <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e218      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1e0>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d03c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ada:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae0:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fd ffff 	bl	8001aec <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fd fffb 	bl	8001aec <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1f1      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ef      	beq.n	8003af2 <HAL_RCC_OscConfig+0x22e>
 8003b12:	e01b      	b.n	8003b4c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b14:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b1a:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd ffe2 	bl	8001aec <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fd ffde 	bl	8001aec <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1d4      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ef      	bne.n	8003b2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80ab 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2b4>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e005      	b.n	8003b7a <HAL_RCC_OscConfig+0x2b6>
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	20000008 	.word	0x20000008
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	4baf      	ldr	r3, [pc, #700]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	4aae      	ldr	r2, [pc, #696]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b88:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8a:	4bac      	ldr	r3, [pc, #688]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b96:	2301      	movs	r3, #1
 8003b98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9a:	4ba9      	ldr	r3, [pc, #676]	; (8003e40 <HAL_RCC_OscConfig+0x57c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d118      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba6:	4ba6      	ldr	r3, [pc, #664]	; (8003e40 <HAL_RCC_OscConfig+0x57c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4aa5      	ldr	r2, [pc, #660]	; (8003e40 <HAL_RCC_OscConfig+0x57c>)
 8003bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb2:	f7fd ff9b 	bl	8001aec <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bba:	f7fd ff97 	bl	8001aec <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e18d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bcc:	4b9c      	ldr	r3, [pc, #624]	; (8003e40 <HAL_RCC_OscConfig+0x57c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d108      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x32e>
 8003be0:	4b96      	ldr	r3, [pc, #600]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	4a95      	ldr	r2, [pc, #596]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf0:	e024      	b.n	8003c3c <HAL_RCC_OscConfig+0x378>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d110      	bne.n	8003c1c <HAL_RCC_OscConfig+0x358>
 8003bfa:	4b90      	ldr	r3, [pc, #576]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	4a8e      	ldr	r2, [pc, #568]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c0a:	4b8c      	ldr	r3, [pc, #560]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	4a8a      	ldr	r2, [pc, #552]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c1a:	e00f      	b.n	8003c3c <HAL_RCC_OscConfig+0x378>
 8003c1c:	4b87      	ldr	r3, [pc, #540]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	4a86      	ldr	r2, [pc, #536]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2c:	4b83      	ldr	r3, [pc, #524]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a82      	ldr	r2, [pc, #520]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d016      	beq.n	8003c72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fd ff52 	bl	8001aec <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fd ff4e 	bl	8001aec <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e142      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ed      	beq.n	8003c4c <HAL_RCC_OscConfig+0x388>
 8003c70:	e015      	b.n	8003c9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fd ff3b 	bl	8001aec <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd ff37 	bl	8001aec <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e12b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c90:	4b6a      	ldr	r3, [pc, #424]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ed      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	4a64      	ldr	r2, [pc, #400]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d03c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cc4:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cca:	4a5c      	ldr	r2, [pc, #368]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd ff0a 	bl	8001aec <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cdc:	f7fd ff06 	bl	8001aec <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0fc      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cee:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCC_OscConfig+0x418>
 8003cfc:	e01b      	b.n	8003d36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cfe:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d04:	4a4d      	ldr	r2, [pc, #308]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd feed 	bl	8001aec <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d16:	f7fd fee9 	bl	8001aec <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0df      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d28:	4b44      	ldr	r3, [pc, #272]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ef      	bne.n	8003d16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80d3 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d40:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b0c      	cmp	r3, #12
 8003d4a:	f000 808d 	beq.w	8003e68 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d15a      	bne.n	8003e0c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd fec3 	bl	8001aec <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd febf 	bl	8001aec <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0b5      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7c:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d88:	4b2c      	ldr	r3, [pc, #176]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_RCC_OscConfig+0x580>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6a11      	ldr	r1, [r2, #32]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d98:	3a01      	subs	r2, #1
 8003d9a:	0112      	lsls	r2, r2, #4
 8003d9c:	4311      	orrs	r1, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003da2:	0212      	lsls	r2, r2, #8
 8003da4:	4311      	orrs	r1, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003daa:	0852      	lsrs	r2, r2, #1
 8003dac:	3a01      	subs	r2, #1
 8003dae:	0552      	lsls	r2, r2, #21
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003db6:	0852      	lsrs	r2, r2, #1
 8003db8:	3a01      	subs	r2, #1
 8003dba:	0652      	lsls	r2, r2, #25
 8003dbc:	4311      	orrs	r1, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dc2:	06d2      	lsls	r2, r2, #27
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	491d      	ldr	r1, [pc, #116]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003de2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd fe82 	bl	8001aec <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fd fe7e 	bl	8001aec <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e074      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x528>
 8003e0a:	e06c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e16:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_RCC_OscConfig+0x578>)
 8003e2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd fe5a 	bl	8001aec <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3a:	e00e      	b.n	8003e5a <HAL_RCC_OscConfig+0x596>
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40007000 	.word	0x40007000
 8003e44:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fd fe50 	bl	8001aec <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e046      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5a:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_OscConfig+0x62c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x584>
 8003e66:	e03e      	b.n	8003ee6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e039      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_RCC_OscConfig+0x62c>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d12c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	3b01      	subs	r3, #1
 8003e94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d123      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d11b      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d113      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e11e      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b91      	ldr	r3, [pc, #580]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d910      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b8e      	ldr	r3, [pc, #568]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 020f 	bic.w	r2, r3, #15
 8003f22:	498c      	ldr	r1, [pc, #560]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b8a      	ldr	r3, [pc, #552]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e106      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d073      	beq.n	8004030 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d129      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f50:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0f4      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f60:	f000 f966 	bl	8004230 <RCC_GetSysClockFreqFromPLLSource>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4a7c      	ldr	r2, [pc, #496]	; (800415c <HAL_RCC_ClockConfig+0x268>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d93f      	bls.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d033      	beq.n	8003fee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d12f      	bne.n	8003fee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f96:	4a70      	ldr	r2, [pc, #448]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e024      	b.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fac:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0c6      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fbc:	4b66      	ldr	r3, [pc, #408]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0be      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fcc:	f000 f8ce 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4a61      	ldr	r2, [pc, #388]	; (800415c <HAL_RCC_ClockConfig+0x268>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d909      	bls.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fda:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe2:	4a5d      	ldr	r2, [pc, #372]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fee:	4b5a      	ldr	r3, [pc, #360]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4957      	ldr	r1, [pc, #348]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fd fd74 	bl	8001aec <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	e00a      	b.n	800401e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004008:	f7fd fd70 	bl	8001aec <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e095      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	4b4e      	ldr	r3, [pc, #312]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 020c 	and.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d1eb      	bne.n	8004008 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d023      	beq.n	8004084 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a42      	ldr	r2, [pc, #264]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800404e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004052:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004060:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004068:	4a3b      	ldr	r2, [pc, #236]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800406a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800406e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4936      	ldr	r1, [pc, #216]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
 8004082:	e008      	b.n	8004096 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d105      	bne.n	8004096 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800408a:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004094:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d21d      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 020f 	bic.w	r2, r3, #15
 80040ac:	4929      	ldr	r1, [pc, #164]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040b4:	f7fd fd1a 	bl	8001aec <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fd fd16 	bl	8001aec <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e03b      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b20      	ldr	r3, [pc, #128]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1ed      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4917      	ldr	r1, [pc, #92]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	490f      	ldr	r1, [pc, #60]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800411e:	f000 f825 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004122:	4601      	mov	r1, r0
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <HAL_RCC_ClockConfig+0x26c>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	fa21 f303 	lsr.w	r3, r1, r3
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x270>)
 800413c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <HAL_RCC_ClockConfig+0x274>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fc86 	bl	8001a54 <HAL_InitTick>
 8004148:	4603      	mov	r3, r0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40022000 	.word	0x40022000
 8004158:	40021000 	.word	0x40021000
 800415c:	04c4b400 	.word	0x04c4b400
 8004160:	0800a9dc 	.word	0x0800a9dc
 8004164:	20000004 	.word	0x20000004
 8004168:	20000008 	.word	0x20000008

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b04      	cmp	r3, #4
 800417c:	d102      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e047      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d102      	bne.n	8004196 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004190:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e03e      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004196:	4b23      	ldr	r3, [pc, #140]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d136      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3301      	adds	r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d10c      	bne.n	80041da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c0:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ca:	68d2      	ldr	r2, [r2, #12]
 80041cc:	0a12      	lsrs	r2, r2, #8
 80041ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
      break;
 80041d8:	e00c      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	0a12      	lsrs	r2, r2, #8
 80041e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
      break;
 80041f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0e5b      	lsrs	r3, r3, #25
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	e001      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004214:	693b      	ldr	r3, [r7, #16]
}
 8004216:	4618      	mov	r0, r3
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200

08004230 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	3301      	adds	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d10c      	bne.n	800426e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800425e:	68d2      	ldr	r2, [r2, #12]
 8004260:	0a12      	lsrs	r2, r2, #8
 8004262:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	617b      	str	r3, [r7, #20]
    break;
 800426c:	e00c      	b.n	8004288 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	4a0e      	ldr	r2, [pc, #56]	; (80042b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	0a12      	lsrs	r2, r2, #8
 800427c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	617b      	str	r3, [r7, #20]
    break;
 8004286:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0e5b      	lsrs	r3, r3, #25
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	3301      	adds	r3, #1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042a2:	687b      	ldr	r3, [r7, #4]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	40021000 	.word	0x40021000
 80042b4:	007a1200 	.word	0x007a1200
 80042b8:	00f42400 	.word	0x00f42400

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042c4:	2300      	movs	r3, #0
 80042c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042c8:	2300      	movs	r3, #0
 80042ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8098 	beq.w	800440a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042de:	4b43      	ldr	r3, [pc, #268]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	4b40      	ldr	r3, [pc, #256]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4a3f      	ldr	r2, [pc, #252]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6593      	str	r3, [r2, #88]	; 0x58
 80042f6:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004306:	4b3a      	ldr	r3, [pc, #232]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a39      	ldr	r2, [pc, #228]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800430c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004310:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004312:	f7fd fbeb 	bl	8001aec <HAL_GetTick>
 8004316:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004318:	e009      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431a:	f7fd fbe7 	bl	8001aec <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d902      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	74fb      	strb	r3, [r7, #19]
        break;
 800432c:	e005      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800432e:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0ef      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d159      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004340:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01e      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	429a      	cmp	r2, r3
 800435a:	d019      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800435c:	4b23      	ldr	r3, [pc, #140]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004368:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	4a1f      	ldr	r2, [pc, #124]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004388:	4a18      	ldr	r2, [pc, #96]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fd fba7 	bl	8001aec <HAL_GetTick>
 800439e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a0:	e00b      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fd fba3 	bl	8001aec <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d902      	bls.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	74fb      	strb	r3, [r7, #19]
            break;
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ec      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10b      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	4903      	ldr	r1, [pc, #12]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043e4:	e008      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043e6:	7cfb      	ldrb	r3, [r7, #19]
 80043e8:	74bb      	strb	r3, [r7, #18]
 80043ea:	e005      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f8:	7c7b      	ldrb	r3, [r7, #17]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fe:	4ba6      	ldr	r3, [pc, #664]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	4aa5      	ldr	r2, [pc, #660]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004408:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004416:	4ba0      	ldr	r3, [pc, #640]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	f023 0203 	bic.w	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	499c      	ldr	r1, [pc, #624]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004438:	4b97      	ldr	r3, [pc, #604]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f023 020c 	bic.w	r2, r3, #12
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	4994      	ldr	r1, [pc, #592]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800445a:	4b8f      	ldr	r3, [pc, #572]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	498b      	ldr	r1, [pc, #556]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800447c:	4b86      	ldr	r3, [pc, #536]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	4983      	ldr	r1, [pc, #524]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800449e:	4b7e      	ldr	r3, [pc, #504]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	497a      	ldr	r1, [pc, #488]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c0:	4b75      	ldr	r3, [pc, #468]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	4972      	ldr	r1, [pc, #456]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e2:	4b6d      	ldr	r3, [pc, #436]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	4969      	ldr	r1, [pc, #420]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004504:	4b64      	ldr	r3, [pc, #400]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	4961      	ldr	r1, [pc, #388]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004526:	4b5c      	ldr	r3, [pc, #368]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	4958      	ldr	r1, [pc, #352]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004548:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	4950      	ldr	r1, [pc, #320]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004566:	d105      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004568:	4b4b      	ldr	r3, [pc, #300]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a4a      	ldr	r2, [pc, #296]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004572:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004580:	4b45      	ldr	r3, [pc, #276]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	4942      	ldr	r1, [pc, #264]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459e:	d105      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a0:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a3c      	ldr	r2, [pc, #240]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045b8:	4b37      	ldr	r3, [pc, #220]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	4934      	ldr	r1, [pc, #208]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d6:	d105      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d8:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a2e      	ldr	r2, [pc, #184]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f0:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	4926      	ldr	r1, [pc, #152]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800460e:	d105      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004610:	4b21      	ldr	r3, [pc, #132]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a20      	ldr	r2, [pc, #128]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800461a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	4918      	ldr	r1, [pc, #96]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004646:	d105      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a12      	ldr	r2, [pc, #72]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004652:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d015      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	490a      	ldr	r1, [pc, #40]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800467e:	d105      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a04      	ldr	r2, [pc, #16]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800468c:	7cbb      	ldrb	r3, [r7, #18]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000

0800469c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e049      	b.n	8004742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd f82c 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 fa9c 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e049      	b.n	80047f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fc ff67 	bl	8001644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 fa45 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_TIM_PWM_Start+0x24>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e03c      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d109      	bne.n	8004836 <HAL_TIM_PWM_Start+0x3e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e02f      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d109      	bne.n	8004850 <HAL_TIM_PWM_Start+0x58>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e022      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d109      	bne.n	800486a <HAL_TIM_PWM_Start+0x72>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	e015      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b10      	cmp	r3, #16
 800486e:	d109      	bne.n	8004884 <HAL_TIM_PWM_Start+0x8c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e008      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e097      	b.n	80049ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_PWM_Start+0xb6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ac:	e023      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start+0xc6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048bc:	e01b      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0xd6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048cc:	e013      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0xe6>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048dc:	e00b      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_PWM_Start+0xf6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ec:	e003      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fd10 	bl	8005324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a33      	ldr	r2, [pc, #204]	; (80049d8 <HAL_TIM_PWM_Start+0x1e0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_TIM_PWM_Start+0x13e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a32      	ldr	r2, [pc, #200]	; (80049dc <HAL_TIM_PWM_Start+0x1e4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_TIM_PWM_Start+0x13e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a30      	ldr	r2, [pc, #192]	; (80049e0 <HAL_TIM_PWM_Start+0x1e8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_TIM_PWM_Start+0x13e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <HAL_TIM_PWM_Start+0x1ec>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_TIM_PWM_Start+0x13e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2d      	ldr	r2, [pc, #180]	; (80049e8 <HAL_TIM_PWM_Start+0x1f0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_TIM_PWM_Start+0x142>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_TIM_PWM_Start+0x144>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800494e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_TIM_PWM_Start+0x1e0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d018      	beq.n	800498c <HAL_TIM_PWM_Start+0x194>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004962:	d013      	beq.n	800498c <HAL_TIM_PWM_Start+0x194>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <HAL_TIM_PWM_Start+0x1f4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <HAL_TIM_PWM_Start+0x194>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <HAL_TIM_PWM_Start+0x1f8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d009      	beq.n	800498c <HAL_TIM_PWM_Start+0x194>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_TIM_PWM_Start+0x1e4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_TIM_PWM_Start+0x194>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIM_PWM_Start+0x1e8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d115      	bne.n	80049b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <HAL_TIM_PWM_Start+0x1fc>)
 8004994:	4013      	ands	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b06      	cmp	r3, #6
 800499c:	d015      	beq.n	80049ca <HAL_TIM_PWM_Start+0x1d2>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d011      	beq.n	80049ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b6:	e008      	b.n	80049ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e000      	b.n	80049cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40013400 	.word	0x40013400
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	40014800 	.word	0x40014800
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	00010007 	.word	0x00010007

080049f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e0fd      	b.n	8004c0e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b14      	cmp	r3, #20
 8004a1e:	f200 80f0 	bhi.w	8004c02 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a7d 	.word	0x08004a7d
 8004a2c:	08004c03 	.word	0x08004c03
 8004a30:	08004c03 	.word	0x08004c03
 8004a34:	08004c03 	.word	0x08004c03
 8004a38:	08004abd 	.word	0x08004abd
 8004a3c:	08004c03 	.word	0x08004c03
 8004a40:	08004c03 	.word	0x08004c03
 8004a44:	08004c03 	.word	0x08004c03
 8004a48:	08004aff 	.word	0x08004aff
 8004a4c:	08004c03 	.word	0x08004c03
 8004a50:	08004c03 	.word	0x08004c03
 8004a54:	08004c03 	.word	0x08004c03
 8004a58:	08004b3f 	.word	0x08004b3f
 8004a5c:	08004c03 	.word	0x08004c03
 8004a60:	08004c03 	.word	0x08004c03
 8004a64:	08004c03 	.word	0x08004c03
 8004a68:	08004b81 	.word	0x08004b81
 8004a6c:	08004c03 	.word	0x08004c03
 8004a70:	08004c03 	.word	0x08004c03
 8004a74:	08004c03 	.word	0x08004c03
 8004a78:	08004bc1 	.word	0x08004bc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f958 	bl	8004d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0208 	orr.w	r2, r2, #8
 8004a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0204 	bic.w	r2, r2, #4
 8004aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6999      	ldr	r1, [r3, #24]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	619a      	str	r2, [r3, #24]
      break;
 8004aba:	e0a3      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f9c8 	bl	8004e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6999      	ldr	r1, [r3, #24]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	619a      	str	r2, [r3, #24]
      break;
 8004afc:	e082      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fa31 	bl	8004f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0208 	orr.w	r2, r2, #8
 8004b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0204 	bic.w	r2, r2, #4
 8004b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69d9      	ldr	r1, [r3, #28]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	61da      	str	r2, [r3, #28]
      break;
 8004b3c:	e062      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fa99 	bl	800507c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69d9      	ldr	r1, [r3, #28]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	021a      	lsls	r2, r3, #8
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	61da      	str	r2, [r3, #28]
      break;
 8004b7e:	e041      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fb02 	bl	8005190 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0208 	orr.w	r2, r2, #8
 8004b9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0204 	bic.w	r2, r2, #4
 8004baa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004bbe:	e021      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fb46 	bl	8005258 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	021a      	lsls	r2, r3, #8
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c00:	e000      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004c02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop

08004c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3c      	ldr	r2, [pc, #240]	; (8004d1c <TIM_Base_SetConfig+0x104>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00f      	beq.n	8004c50 <TIM_Base_SetConfig+0x38>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d00b      	beq.n	8004c50 <TIM_Base_SetConfig+0x38>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a39      	ldr	r2, [pc, #228]	; (8004d20 <TIM_Base_SetConfig+0x108>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_Base_SetConfig+0x38>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a38      	ldr	r2, [pc, #224]	; (8004d24 <TIM_Base_SetConfig+0x10c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_Base_SetConfig+0x38>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a37      	ldr	r2, [pc, #220]	; (8004d28 <TIM_Base_SetConfig+0x110>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d108      	bne.n	8004c62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2d      	ldr	r2, [pc, #180]	; (8004d1c <TIM_Base_SetConfig+0x104>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01b      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d017      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <TIM_Base_SetConfig+0x108>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <TIM_Base_SetConfig+0x10c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a28      	ldr	r2, [pc, #160]	; (8004d28 <TIM_Base_SetConfig+0x110>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a27      	ldr	r2, [pc, #156]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a26      	ldr	r2, [pc, #152]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <TIM_Base_SetConfig+0x104>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00f      	beq.n	8004d00 <TIM_Base_SetConfig+0xe8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <TIM_Base_SetConfig+0x110>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <TIM_Base_SetConfig+0xe8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a10      	ldr	r2, [pc, #64]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_Base_SetConfig+0xe8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0xe8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a0e      	ldr	r2, [pc, #56]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d103      	bne.n	8004d08 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	615a      	str	r2, [r3, #20]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40013400 	.word	0x40013400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800

08004d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f023 0201 	bic.w	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 0302 	bic.w	r3, r3, #2
 8004d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a2c      	ldr	r2, [pc, #176]	; (8004e44 <TIM_OC1_SetConfig+0x10c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00f      	beq.n	8004db8 <TIM_OC1_SetConfig+0x80>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <TIM_OC1_SetConfig+0x110>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <TIM_OC1_SetConfig+0x80>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a2a      	ldr	r2, [pc, #168]	; (8004e4c <TIM_OC1_SetConfig+0x114>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_OC1_SetConfig+0x80>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a29      	ldr	r2, [pc, #164]	; (8004e50 <TIM_OC1_SetConfig+0x118>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_OC1_SetConfig+0x80>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a28      	ldr	r2, [pc, #160]	; (8004e54 <TIM_OC1_SetConfig+0x11c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d10c      	bne.n	8004dd2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f023 0308 	bic.w	r3, r3, #8
 8004dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1b      	ldr	r2, [pc, #108]	; (8004e44 <TIM_OC1_SetConfig+0x10c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00f      	beq.n	8004dfa <TIM_OC1_SetConfig+0xc2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a1a      	ldr	r2, [pc, #104]	; (8004e48 <TIM_OC1_SetConfig+0x110>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <TIM_OC1_SetConfig+0xc2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <TIM_OC1_SetConfig+0x114>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <TIM_OC1_SetConfig+0xc2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <TIM_OC1_SetConfig+0x118>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_OC1_SetConfig+0xc2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <TIM_OC1_SetConfig+0x11c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d111      	bne.n	8004e1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	621a      	str	r2, [r3, #32]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40013400 	.word	0x40013400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800

08004e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f023 0210 	bic.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a28      	ldr	r2, [pc, #160]	; (8004f58 <TIM_OC2_SetConfig+0x100>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_OC2_SetConfig+0x6c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a27      	ldr	r2, [pc, #156]	; (8004f5c <TIM_OC2_SetConfig+0x104>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d10d      	bne.n	8004ee0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <TIM_OC2_SetConfig+0x100>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00f      	beq.n	8004f08 <TIM_OC2_SetConfig+0xb0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <TIM_OC2_SetConfig+0x104>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_OC2_SetConfig+0xb0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <TIM_OC2_SetConfig+0x108>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_OC2_SetConfig+0xb0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <TIM_OC2_SetConfig+0x10c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_OC2_SetConfig+0xb0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <TIM_OC2_SetConfig+0x110>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d113      	bne.n	8004f30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40013400 	.word	0x40013400
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800

08004f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a27      	ldr	r2, [pc, #156]	; (8005068 <TIM_OC3_SetConfig+0xfc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_OC3_SetConfig+0x6a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a26      	ldr	r2, [pc, #152]	; (800506c <TIM_OC3_SetConfig+0x100>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d10d      	bne.n	8004ff2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1c      	ldr	r2, [pc, #112]	; (8005068 <TIM_OC3_SetConfig+0xfc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_OC3_SetConfig+0xae>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1b      	ldr	r2, [pc, #108]	; (800506c <TIM_OC3_SetConfig+0x100>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_OC3_SetConfig+0xae>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <TIM_OC3_SetConfig+0x104>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_OC3_SetConfig+0xae>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a19      	ldr	r2, [pc, #100]	; (8005074 <TIM_OC3_SetConfig+0x108>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC3_SetConfig+0xae>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a18      	ldr	r2, [pc, #96]	; (8005078 <TIM_OC3_SetConfig+0x10c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d113      	bne.n	8005042 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800

0800507c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	031b      	lsls	r3, r3, #12
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a28      	ldr	r2, [pc, #160]	; (800517c <TIM_OC4_SetConfig+0x100>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC4_SetConfig+0x6c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a27      	ldr	r2, [pc, #156]	; (8005180 <TIM_OC4_SetConfig+0x104>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10d      	bne.n	8005104 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	031b      	lsls	r3, r3, #12
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1d      	ldr	r2, [pc, #116]	; (800517c <TIM_OC4_SetConfig+0x100>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00f      	beq.n	800512c <TIM_OC4_SetConfig+0xb0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <TIM_OC4_SetConfig+0x104>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00b      	beq.n	800512c <TIM_OC4_SetConfig+0xb0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <TIM_OC4_SetConfig+0x108>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_OC4_SetConfig+0xb0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <TIM_OC4_SetConfig+0x10c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC4_SetConfig+0xb0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a19      	ldr	r2, [pc, #100]	; (800518c <TIM_OC4_SetConfig+0x110>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d113      	bne.n	8005154 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005132:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800513a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	019b      	lsls	r3, r3, #6
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40013400 	.word	0x40013400
 8005184:	40014000 	.word	0x40014000
 8005188:	40014400 	.word	0x40014400
 800518c:	40014800 	.word	0x40014800

08005190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a17      	ldr	r2, [pc, #92]	; (8005244 <TIM_OC5_SetConfig+0xb4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00f      	beq.n	800520a <TIM_OC5_SetConfig+0x7a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a16      	ldr	r2, [pc, #88]	; (8005248 <TIM_OC5_SetConfig+0xb8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_OC5_SetConfig+0x7a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <TIM_OC5_SetConfig+0xbc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_OC5_SetConfig+0x7a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a14      	ldr	r2, [pc, #80]	; (8005250 <TIM_OC5_SetConfig+0xc0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_OC5_SetConfig+0x7a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a13      	ldr	r2, [pc, #76]	; (8005254 <TIM_OC5_SetConfig+0xc4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d109      	bne.n	800521e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40013400 	.word	0x40013400
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800

08005258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800529e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	051b      	lsls	r3, r3, #20
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a18      	ldr	r2, [pc, #96]	; (8005310 <TIM_OC6_SetConfig+0xb8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00f      	beq.n	80052d4 <TIM_OC6_SetConfig+0x7c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a17      	ldr	r2, [pc, #92]	; (8005314 <TIM_OC6_SetConfig+0xbc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_OC6_SetConfig+0x7c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a16      	ldr	r2, [pc, #88]	; (8005318 <TIM_OC6_SetConfig+0xc0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_OC6_SetConfig+0x7c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <TIM_OC6_SetConfig+0xc4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC6_SetConfig+0x7c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a14      	ldr	r2, [pc, #80]	; (8005320 <TIM_OC6_SetConfig+0xc8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d109      	bne.n	80052e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	029b      	lsls	r3, r3, #10
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40013400 	.word	0x40013400
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800

08005324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2201      	movs	r2, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	43db      	mvns	r3, r3
 8005346:	401a      	ands	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005384:	2302      	movs	r3, #2
 8005386:	e065      	b.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2c      	ldr	r2, [pc, #176]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d108      	bne.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80053d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d018      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d013      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a18      	ldr	r2, [pc, #96]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00e      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a17      	ldr	r2, [pc, #92]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a12      	ldr	r2, [pc, #72]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a13      	ldr	r2, [pc, #76]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10c      	bne.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40014000 	.word	0x40014000

08005474 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800548c:	2302      	movs	r3, #2
 800548e:	e087      	b.n	80055a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	041b      	lsls	r3, r3, #16
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a27      	ldr	r2, [pc, #156]	; (80055ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d106      	bne.n	800552c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d004      	beq.n	8005540 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d126      	bne.n	800558e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	051b      	lsls	r3, r3, #20
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a0d      	ldr	r2, [pc, #52]	; (80055b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d106      	bne.n	800558e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40013400 	.word	0x40013400

080055b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055ea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	43db      	mvns	r3, r3
 80055fe:	b29b      	uxth	r3, r3
 8005600:	4013      	ands	r3, r2
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005618:	b084      	sub	sp, #16
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	f107 0014 	add.w	r0, r7, #20
 8005626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	b004      	add	sp, #16
 8005658:	4770      	bx	lr
	...

0800565c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800565c:	b480      	push	{r7}
 800565e:	b09b      	sub	sp, #108	; 0x6c
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	78db      	ldrb	r3, [r3, #3]
 800568a:	2b03      	cmp	r3, #3
 800568c:	d81f      	bhi.n	80056ce <USB_ActivateEndpoint+0x72>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <USB_ActivateEndpoint+0x38>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056a5 	.word	0x080056a5
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056d7 	.word	0x080056d7
 80056a0:	080056b3 	.word	0x080056b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056b0:	e012      	b.n	80056d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80056ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056be:	e00b      	b.n	80056d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056cc:	e004      	b.n	80056d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80056d4:	e000      	b.n	80056d8 <USB_ActivateEndpoint+0x7c>
      break;
 80056d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	b21b      	sxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	b21a      	sxth	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b21b      	sxth	r3, r3
 800571a:	4313      	orrs	r3, r2
 800571c:	b21b      	sxth	r3, r3
 800571e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	441a      	add	r2, r3
 800572c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	7b1b      	ldrb	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 8149 	bne.w	80059e0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8084 	beq.w	8005860 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005762:	b29b      	uxth	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	00da      	lsls	r2, r3, #3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	88db      	ldrh	r3, [r3, #6]
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	b29b      	uxth	r3, r3
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	81fb      	strh	r3, [r7, #14]
 800579a:	89fb      	ldrh	r3, [r7, #14]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01b      	beq.n	80057dc <USB_ActivateEndpoint+0x180>
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	81bb      	strh	r3, [r7, #12]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	89bb      	ldrh	r3, [r7, #12]
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d020      	beq.n	8005826 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fa:	813b      	strh	r3, [r7, #8]
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	f083 0320 	eor.w	r3, r3, #32
 8005802:	813b      	strh	r3, [r7, #8]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	441a      	add	r2, r3
 800580e:	893b      	ldrh	r3, [r7, #8]
 8005810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800581c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005820:	b29b      	uxth	r3, r3
 8005822:	8013      	strh	r3, [r2, #0]
 8005824:	e27f      	b.n	8005d26 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583c:	817b      	strh	r3, [r7, #10]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	897b      	ldrh	r3, [r7, #10]
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]
 800585e:	e262      	b.n	8005d26 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	4413      	add	r3, r2
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	00da      	lsls	r2, r3, #3
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	4413      	add	r3, r2
 800587e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	88db      	ldrh	r3, [r3, #6]
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	b29b      	uxth	r3, r3
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	4413      	add	r3, r2
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	00da      	lsls	r2, r3, #3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	4413      	add	r3, r2
 80058b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d112      	bne.n	80058e6 <USB_ActivateEndpoint+0x28a>
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e02f      	b.n	8005946 <USB_ActivateEndpoint+0x2ea>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b3e      	cmp	r3, #62	; 0x3e
 80058ec:	d813      	bhi.n	8005916 <USB_ActivateEndpoint+0x2ba>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	663b      	str	r3, [r7, #96]	; 0x60
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <USB_ActivateEndpoint+0x2ac>
 8005902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005904:	3301      	adds	r3, #1
 8005906:	663b      	str	r3, [r7, #96]	; 0x60
 8005908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800590a:	b29b      	uxth	r3, r3
 800590c:	029b      	lsls	r3, r3, #10
 800590e:	b29a      	uxth	r2, r3
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e017      	b.n	8005946 <USB_ActivateEndpoint+0x2ea>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <USB_ActivateEndpoint+0x2d4>
 800592a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592c:	3b01      	subs	r3, #1
 800592e:	663b      	str	r3, [r7, #96]	; 0x60
 8005930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005932:	b29b      	uxth	r3, r3
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	83fb      	strh	r3, [r7, #30]
 8005954:	8bfb      	ldrh	r3, [r7, #30]
 8005956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01b      	beq.n	8005996 <USB_ActivateEndpoint+0x33a>
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	83bb      	strh	r3, [r7, #28]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	8bbb      	ldrh	r3, [r7, #28]
 8005982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800598e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005992:	b29b      	uxth	r3, r3
 8005994:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	837b      	strh	r3, [r7, #26]
 80059ae:	8b7b      	ldrh	r3, [r7, #26]
 80059b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059b4:	837b      	strh	r3, [r7, #26]
 80059b6:	8b7b      	ldrh	r3, [r7, #26]
 80059b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059bc:	837b      	strh	r3, [r7, #26]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	8b7b      	ldrh	r3, [r7, #26]
 80059ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]
 80059de:	e1a2      	b.n	8005d26 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	441a      	add	r2, r3
 8005a04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a10:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a2c:	4413      	add	r3, r2
 8005a2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	00da      	lsls	r2, r3, #3
 8005a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	891b      	ldrh	r3, [r3, #8]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a4e:	801a      	strh	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	653b      	str	r3, [r7, #80]	; 0x50
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a60:	4413      	add	r3, r2
 8005a62:	653b      	str	r3, [r7, #80]	; 0x50
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	00da      	lsls	r2, r3, #3
 8005a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	895b      	ldrh	r3, [r3, #10]
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 8091 	bne.w	8005bb0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005a9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01b      	beq.n	8005ade <USB_ActivateEndpoint+0x482>
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	873b      	strh	r3, [r7, #56]	; 0x38
 8005aec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01b      	beq.n	8005b2e <USB_ActivateEndpoint+0x4d2>
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	441a      	add	r2, r3
 8005b98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	8013      	strh	r3, [r2, #0]
 8005bae:	e0ba      	b.n	8005d26 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01d      	beq.n	8005c08 <USB_ActivateEndpoint+0x5ac>
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	441a      	add	r2, r3
 8005bf0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005c18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01d      	beq.n	8005c60 <USB_ActivateEndpoint+0x604>
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	78db      	ldrb	r3, [r3, #3]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d024      	beq.n	8005cb2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c86:	f083 0320 	eor.w	r3, r3, #32
 8005c8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	8013      	strh	r3, [r2, #0]
 8005cb0:	e01d      	b.n	8005cee <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005d26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	376c      	adds	r7, #108	; 0x6c
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop

08005d38 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b08d      	sub	sp, #52	; 0x34
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	7b1b      	ldrb	r3, [r3, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f040 808e 	bne.w	8005e68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d044      	beq.n	8005dde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	81bb      	strh	r3, [r7, #12]
 8005d62:	89bb      	ldrh	r3, [r7, #12]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01b      	beq.n	8005da4 <USB_DeactivateEndpoint+0x6c>
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	817b      	strh	r3, [r7, #10]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	441a      	add	r2, r3
 8005d8e:	897b      	ldrh	r3, [r7, #10]
 8005d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dba:	813b      	strh	r3, [r7, #8]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	441a      	add	r2, r3
 8005dc6:	893b      	ldrh	r3, [r7, #8]
 8005dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	8013      	strh	r3, [r2, #0]
 8005ddc:	e192      	b.n	8006104 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	827b      	strh	r3, [r7, #18]
 8005dec:	8a7b      	ldrh	r3, [r7, #18]
 8005dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01b      	beq.n	8005e2e <USB_DeactivateEndpoint+0xf6>
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0c:	823b      	strh	r3, [r7, #16]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	8a3b      	ldrh	r3, [r7, #16]
 8005e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e44:	81fb      	strh	r3, [r7, #14]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]
 8005e66:	e14d      	b.n	8006104 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f040 80a5 	bne.w	8005fbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	843b      	strh	r3, [r7, #32]
 8005e80:	8c3b      	ldrh	r3, [r7, #32]
 8005e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01b      	beq.n	8005ec2 <USB_DeactivateEndpoint+0x18a>
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	83fb      	strh	r3, [r7, #30]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	441a      	add	r2, r3
 8005eac:	8bfb      	ldrh	r3, [r7, #30]
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	83bb      	strh	r3, [r7, #28]
 8005ed0:	8bbb      	ldrh	r3, [r7, #28]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01b      	beq.n	8005f12 <USB_DeactivateEndpoint+0x1da>
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef0:	837b      	strh	r3, [r7, #26]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	8b7b      	ldrh	r3, [r7, #26]
 8005efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f28:	833b      	strh	r3, [r7, #24]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	8b3b      	ldrh	r3, [r7, #24]
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f60:	82fb      	strh	r3, [r7, #22]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	8afb      	ldrh	r3, [r7, #22]
 8005f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f98:	82bb      	strh	r3, [r7, #20]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	441a      	add	r2, r3
 8005fa4:	8abb      	ldrh	r3, [r7, #20]
 8005fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	8013      	strh	r3, [r2, #0]
 8005fba:	e0a3      	b.n	8006104 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01b      	beq.n	800600c <USB_DeactivateEndpoint+0x2d4>
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	441a      	add	r2, r3
 8005ff6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	857b      	strh	r3, [r7, #42]	; 0x2a
 800601a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01b      	beq.n	800605c <USB_DeactivateEndpoint+0x324>
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	853b      	strh	r3, [r7, #40]	; 0x28
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	441a      	add	r2, r3
 8006046:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006058:	b29b      	uxth	r3, r3
 800605a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	441a      	add	r2, r3
 800607e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800608c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006090:	b29b      	uxth	r3, r3
 8006092:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006100:	b29b      	uxth	r3, r3
 8006102:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3734      	adds	r7, #52	; 0x34
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b0c4      	sub	sp, #272	; 0x110
 8006116:	af00      	add	r7, sp, #0
 8006118:	1d3b      	adds	r3, r7, #4
 800611a:	6018      	str	r0, [r3, #0]
 800611c:	463b      	mov	r3, r7
 800611e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b01      	cmp	r3, #1
 8006128:	f040 8566 	bne.w	8006bf8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	429a      	cmp	r2, r3
 800613a:	d905      	bls.n	8006148 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800613c:	463b      	mov	r3, r7
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006146:	e004      	b.n	8006152 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006152:	463b      	mov	r3, r7
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	7b1b      	ldrb	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d12c      	bne.n	80061b6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800615c:	463b      	mov	r3, r7
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6959      	ldr	r1, [r3, #20]
 8006162:	463b      	mov	r3, r7
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	88da      	ldrh	r2, [r3, #6]
 8006168:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800616c:	b29b      	uxth	r3, r3
 800616e:	1d38      	adds	r0, r7, #4
 8006170:	6800      	ldr	r0, [r0, #0]
 8006172:	f001 fa43 	bl	80075fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	1d3b      	adds	r3, r7, #4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006184:	b29b      	uxth	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4413      	add	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	463b      	mov	r3, r7
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	00da      	lsls	r2, r3, #3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800619e:	f107 0310 	add.w	r3, r7, #16
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f107 0310 	add.w	r3, r7, #16
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	f000 bcec 	b.w	8006b8e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80061b6:	463b      	mov	r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	78db      	ldrb	r3, [r3, #3]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	f040 8356 	bne.w	800686e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	f240 82fa 	bls.w	80067c8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80061d4:	1d3b      	adds	r3, r7, #4
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	441a      	add	r2, r3
 8006200:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800620c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006214:	b29b      	uxth	r3, r3
 8006216:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800622c:	1ad2      	subs	r2, r2, r3
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 815e 	beq.w	800650c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006250:	1d3b      	adds	r3, r7, #4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
 8006256:	463b      	mov	r3, r7
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d164      	bne.n	800632a <USB_EPStartXfer+0x218>
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	4413      	add	r3, r2
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006278:	463b      	mov	r3, r7
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	00da      	lsls	r2, r3, #3
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	4413      	add	r3, r2
 8006284:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
 800628a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800628e:	2b00      	cmp	r3, #0
 8006290:	d112      	bne.n	80062b8 <USB_EPStartXfer+0x1a6>
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800629c:	b29a      	uxth	r2, r3
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	e054      	b.n	8006362 <USB_EPStartXfer+0x250>
 80062b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062bc:	2b3e      	cmp	r3, #62	; 0x3e
 80062be:	d817      	bhi.n	80062f0 <USB_EPStartXfer+0x1de>
 80062c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <USB_EPStartXfer+0x1ce>
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062da:	3301      	adds	r3, #1
 80062dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	029b      	lsls	r3, r3, #10
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e038      	b.n	8006362 <USB_EPStartXfer+0x250>
 80062f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <USB_EPStartXfer+0x1fe>
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630a:	3b01      	subs	r3, #1
 800630c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006314:	b29b      	uxth	r3, r3
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006322:	b29a      	uxth	r2, r3
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e01b      	b.n	8006362 <USB_EPStartXfer+0x250>
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d116      	bne.n	8006362 <USB_EPStartXfer+0x250>
 8006334:	1d3b      	adds	r3, r7, #4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633c:	b29b      	uxth	r3, r3
 800633e:	461a      	mov	r2, r3
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	4413      	add	r3, r2
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	00da      	lsls	r2, r3, #3
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	4413      	add	r3, r2
 8006352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
 8006358:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800635c:	b29a      	uxth	r2, r3
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006362:	463b      	mov	r3, r7
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	895b      	ldrh	r3, [r3, #10]
 8006368:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800636c:	463b      	mov	r3, r7
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6959      	ldr	r1, [r3, #20]
 8006372:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006376:	b29b      	uxth	r3, r3
 8006378:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800637c:	1d38      	adds	r0, r7, #4
 800637e:	6800      	ldr	r0, [r0, #0]
 8006380:	f001 f93c 	bl	80075fc <USB_WritePMA>
            ep->xfer_buff += len;
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695a      	ldr	r2, [r3, #20]
 800638a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800638e:	441a      	add	r2, r3
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	463b      	mov	r3, r7
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d90e      	bls.n	80063c4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80063a6:	463b      	mov	r3, r7
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6a1a      	ldr	r2, [r3, #32]
 80063b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	463b      	mov	r3, r7
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	621a      	str	r2, [r3, #32]
 80063c2:	e008      	b.n	80063d6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80063ce:	463b      	mov	r3, r7
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2200      	movs	r2, #0
 80063d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d164      	bne.n	80064aa <USB_EPStartXfer+0x398>
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	463b      	mov	r3, r7
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800640e:	2b00      	cmp	r3, #0
 8006410:	d112      	bne.n	8006438 <USB_EPStartXfer+0x326>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800641c:	b29a      	uxth	r2, r3
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006430:	b29a      	uxth	r2, r3
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e057      	b.n	80064e8 <USB_EPStartXfer+0x3d6>
 8006438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800643c:	2b3e      	cmp	r3, #62	; 0x3e
 800643e:	d817      	bhi.n	8006470 <USB_EPStartXfer+0x35e>
 8006440:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800644a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <USB_EPStartXfer+0x34e>
 8006456:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800645a:	3301      	adds	r3, #1
 800645c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006460:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006464:	b29b      	uxth	r3, r3
 8006466:	029b      	lsls	r3, r3, #10
 8006468:	b29a      	uxth	r2, r3
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	e03b      	b.n	80064e8 <USB_EPStartXfer+0x3d6>
 8006470:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800647a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <USB_EPStartXfer+0x37e>
 8006486:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800648a:	3b01      	subs	r3, #1
 800648c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006490:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006494:	b29b      	uxth	r3, r3
 8006496:	029b      	lsls	r3, r3, #10
 8006498:	b29b      	uxth	r3, r3
 800649a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e01e      	b.n	80064e8 <USB_EPStartXfer+0x3d6>
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d119      	bne.n	80064e8 <USB_EPStartXfer+0x3d6>
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	1d3b      	adds	r3, r7, #4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	4413      	add	r3, r2
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	00da      	lsls	r2, r3, #3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064dc:	623b      	str	r3, [r7, #32]
 80064de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	891b      	ldrh	r3, [r3, #8]
 80064ee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6959      	ldr	r1, [r3, #20]
 80064f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006502:	1d38      	adds	r0, r7, #4
 8006504:	6800      	ldr	r0, [r0, #0]
 8006506:	f001 f879 	bl	80075fc <USB_WritePMA>
 800650a:	e340      	b.n	8006b8e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800650c:	463b      	mov	r3, r7
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d164      	bne.n	80065e0 <USB_EPStartXfer+0x4ce>
 8006516:	1d3b      	adds	r3, r7, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800651c:	1d3b      	adds	r3, r7, #4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006524:	b29b      	uxth	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652a:	4413      	add	r3, r2
 800652c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652e:	463b      	mov	r3, r7
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	00da      	lsls	r2, r3, #3
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	4413      	add	r3, r2
 800653a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800653e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006540:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006544:	2b00      	cmp	r3, #0
 8006546:	d112      	bne.n	800656e <USB_EPStartXfer+0x45c>
 8006548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006552:	b29a      	uxth	r2, r3
 8006554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006566:	b29a      	uxth	r2, r3
 8006568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e057      	b.n	800661e <USB_EPStartXfer+0x50c>
 800656e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006572:	2b3e      	cmp	r3, #62	; 0x3e
 8006574:	d817      	bhi.n	80065a6 <USB_EPStartXfer+0x494>
 8006576:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006580:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <USB_EPStartXfer+0x484>
 800658c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006590:	3301      	adds	r3, #1
 8006592:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659a:	b29b      	uxth	r3, r3
 800659c:	029b      	lsls	r3, r3, #10
 800659e:	b29a      	uxth	r2, r3
 80065a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e03b      	b.n	800661e <USB_EPStartXfer+0x50c>
 80065a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <USB_EPStartXfer+0x4b4>
 80065bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c0:	3b01      	subs	r3, #1
 80065c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	029b      	lsls	r3, r3, #10
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d8:	b29a      	uxth	r2, r3
 80065da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	e01e      	b.n	800661e <USB_EPStartXfer+0x50c>
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d119      	bne.n	800661e <USB_EPStartXfer+0x50c>
 80065ea:	1d3b      	adds	r3, r7, #4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	657b      	str	r3, [r7, #84]	; 0x54
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fe:	4413      	add	r3, r2
 8006600:	657b      	str	r3, [r7, #84]	; 0x54
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	00da      	lsls	r2, r3, #3
 800660a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800660c:	4413      	add	r3, r2
 800660e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006612:	653b      	str	r3, [r7, #80]	; 0x50
 8006614:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006618:	b29a      	uxth	r2, r3
 800661a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800661e:	463b      	mov	r3, r7
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	891b      	ldrh	r3, [r3, #8]
 8006624:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006628:	463b      	mov	r3, r7
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6959      	ldr	r1, [r3, #20]
 800662e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006632:	b29b      	uxth	r3, r3
 8006634:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006638:	1d38      	adds	r0, r7, #4
 800663a:	6800      	ldr	r0, [r0, #0]
 800663c:	f000 ffde 	bl	80075fc <USB_WritePMA>
            ep->xfer_buff += len;
 8006640:	463b      	mov	r3, r7
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664a:	441a      	add	r2, r3
 800664c:	463b      	mov	r3, r7
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d90e      	bls.n	8006680 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800666c:	463b      	mov	r3, r7
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6a1a      	ldr	r2, [r3, #32]
 8006672:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006676:	1ad2      	subs	r2, r2, r3
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	621a      	str	r2, [r3, #32]
 800667e:	e008      	b.n	8006692 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006680:	463b      	mov	r3, r7
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800668a:	463b      	mov	r3, r7
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2200      	movs	r2, #0
 8006690:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	647b      	str	r3, [r7, #68]	; 0x44
 8006698:	463b      	mov	r3, r7
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d164      	bne.n	800676c <USB_EPStartXfer+0x65a>
 80066a2:	1d3b      	adds	r3, r7, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a8:	1d3b      	adds	r3, r7, #4
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b6:	4413      	add	r3, r2
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	00da      	lsls	r2, r3, #3
 80066c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80066cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d112      	bne.n	80066fa <USB_EPStartXfer+0x5e8>
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066de:	b29a      	uxth	r2, r3
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	e054      	b.n	80067a4 <USB_EPStartXfer+0x692>
 80066fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006700:	d817      	bhi.n	8006732 <USB_EPStartXfer+0x620>
 8006702:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800670c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <USB_EPStartXfer+0x610>
 8006718:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800671c:	3301      	adds	r3, #1
 800671e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006722:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006726:	b29b      	uxth	r3, r3
 8006728:	029b      	lsls	r3, r3, #10
 800672a:	b29a      	uxth	r2, r3
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e038      	b.n	80067a4 <USB_EPStartXfer+0x692>
 8006732:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800673c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <USB_EPStartXfer+0x640>
 8006748:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800674c:	3b01      	subs	r3, #1
 800674e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29a      	uxth	r2, r3
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e01b      	b.n	80067a4 <USB_EPStartXfer+0x692>
 800676c:	463b      	mov	r3, r7
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d116      	bne.n	80067a4 <USB_EPStartXfer+0x692>
 8006776:	1d3b      	adds	r3, r7, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677e:	b29b      	uxth	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006784:	4413      	add	r3, r2
 8006786:	647b      	str	r3, [r7, #68]	; 0x44
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	00da      	lsls	r2, r3, #3
 8006790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006792:	4413      	add	r3, r2
 8006794:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006798:	643b      	str	r3, [r7, #64]	; 0x40
 800679a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	895b      	ldrh	r3, [r3, #10]
 80067aa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6959      	ldr	r1, [r3, #20]
 80067b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067be:	1d38      	adds	r0, r7, #4
 80067c0:	6800      	ldr	r0, [r0, #0]
 80067c2:	f000 ff1b 	bl	80075fc <USB_WritePMA>
 80067c6:	e1e2      	b.n	8006b8e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80067c8:	463b      	mov	r3, r7
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80067d2:	1d3b      	adds	r3, r7, #4
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	463b      	mov	r3, r7
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80067e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80067f0:	1d3b      	adds	r3, r7, #4
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	b29b      	uxth	r3, r3
 8006814:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	663b      	str	r3, [r7, #96]	; 0x60
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006824:	b29b      	uxth	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800682a:	4413      	add	r3, r2
 800682c:	663b      	str	r3, [r7, #96]	; 0x60
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	00da      	lsls	r2, r3, #3
 8006836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006838:	4413      	add	r3, r2
 800683a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800683e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006840:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006844:	b29a      	uxth	r2, r3
 8006846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006848:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800684a:	463b      	mov	r3, r7
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	891b      	ldrh	r3, [r3, #8]
 8006850:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6959      	ldr	r1, [r3, #20]
 800685a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800685e:	b29b      	uxth	r3, r3
 8006860:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006864:	1d38      	adds	r0, r7, #4
 8006866:	6800      	ldr	r0, [r0, #0]
 8006868:	f000 fec8 	bl	80075fc <USB_WritePMA>
 800686c:	e18f      	b.n	8006b8e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 808f 	beq.w	80069a8 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800688a:	1d3b      	adds	r3, r7, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006890:	463b      	mov	r3, r7
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d164      	bne.n	8006964 <USB_EPStartXfer+0x852>
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	673b      	str	r3, [r7, #112]	; 0x70
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ae:	4413      	add	r3, r2
 80068b0:	673b      	str	r3, [r7, #112]	; 0x70
 80068b2:	463b      	mov	r3, r7
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	00da      	lsls	r2, r3, #3
 80068ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068bc:	4413      	add	r3, r2
 80068be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d112      	bne.n	80068f2 <USB_EPStartXfer+0x7e0>
 80068cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ee:	801a      	strh	r2, [r3, #0]
 80068f0:	e054      	b.n	800699c <USB_EPStartXfer+0x88a>
 80068f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068f6:	2b3e      	cmp	r3, #62	; 0x3e
 80068f8:	d817      	bhi.n	800692a <USB_EPStartXfer+0x818>
 80068fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006904:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <USB_EPStartXfer+0x808>
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	3301      	adds	r3, #1
 8006916:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691e:	b29b      	uxth	r3, r3
 8006920:	029b      	lsls	r3, r3, #10
 8006922:	b29a      	uxth	r2, r3
 8006924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006926:	801a      	strh	r2, [r3, #0]
 8006928:	e038      	b.n	800699c <USB_EPStartXfer+0x88a>
 800692a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006934:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <USB_EPStartXfer+0x838>
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	3b01      	subs	r3, #1
 8006946:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800694a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694e:	b29b      	uxth	r3, r3
 8006950:	029b      	lsls	r3, r3, #10
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29a      	uxth	r2, r3
 800695e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	e01b      	b.n	800699c <USB_EPStartXfer+0x88a>
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d116      	bne.n	800699c <USB_EPStartXfer+0x88a>
 800696e:	1d3b      	adds	r3, r7, #4
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800697c:	4413      	add	r3, r2
 800697e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	00da      	lsls	r2, r3, #3
 8006988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698a:	4413      	add	r3, r2
 800698c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006990:	677b      	str	r3, [r7, #116]	; 0x74
 8006992:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006996:	b29a      	uxth	r2, r3
 8006998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800699a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	895b      	ldrh	r3, [r3, #10]
 80069a2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80069a6:	e097      	b.n	8006ad8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069a8:	463b      	mov	r3, r7
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d168      	bne.n	8006a84 <USB_EPStartXfer+0x972>
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069ba:	1d3b      	adds	r3, r7, #4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069ca:	4413      	add	r3, r2
 80069cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069d0:	463b      	mov	r3, r7
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	00da      	lsls	r2, r3, #3
 80069d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069dc:	4413      	add	r3, r2
 80069de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d112      	bne.n	8006a12 <USB_EPStartXfer+0x900>
 80069ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069fa:	801a      	strh	r2, [r3, #0]
 80069fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e05d      	b.n	8006ace <USB_EPStartXfer+0x9bc>
 8006a12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a16:	2b3e      	cmp	r3, #62	; 0x3e
 8006a18:	d817      	bhi.n	8006a4a <USB_EPStartXfer+0x938>
 8006a1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <USB_EPStartXfer+0x928>
 8006a30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a34:	3301      	adds	r3, #1
 8006a36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	029b      	lsls	r3, r3, #10
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e041      	b.n	8006ace <USB_EPStartXfer+0x9bc>
 8006a4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a58:	f003 031f 	and.w	r3, r3, #31
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d104      	bne.n	8006a6a <USB_EPStartXfer+0x958>
 8006a60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a64:	3b01      	subs	r3, #1
 8006a66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	029b      	lsls	r3, r3, #10
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e024      	b.n	8006ace <USB_EPStartXfer+0x9bc>
 8006a84:	463b      	mov	r3, r7
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d11f      	bne.n	8006ace <USB_EPStartXfer+0x9bc>
 8006a8e:	1d3b      	adds	r3, r7, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a96:	1d3b      	adds	r3, r7, #4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006aac:	463b      	mov	r3, r7
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	00da      	lsls	r2, r3, #3
 8006ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ab8:	4413      	add	r3, r2
 8006aba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ac2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006acc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	891b      	ldrh	r3, [r3, #8]
 8006ad4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ad8:	463b      	mov	r3, r7
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6959      	ldr	r1, [r3, #20]
 8006ade:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006ae8:	1d38      	adds	r0, r7, #4
 8006aea:	6800      	ldr	r0, [r0, #0]
 8006aec:	f000 fd86 	bl	80075fc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006af0:	463b      	mov	r3, r7
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d122      	bne.n	8006b40 <USB_EPStartXfer+0xa2e>
 8006afa:	1d3b      	adds	r3, r7, #4
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	463b      	mov	r3, r7
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b14:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006b18:	1d3b      	adds	r3, r7, #4
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]
 8006b3e:	e026      	b.n	8006b8e <USB_EPStartXfer+0xa7c>
 8006b40:	463b      	mov	r3, r7
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d121      	bne.n	8006b8e <USB_EPStartXfer+0xa7c>
 8006b4a:	1d3b      	adds	r3, r7, #4
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	463b      	mov	r3, r7
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006b68:	1d3b      	adds	r3, r7, #4
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	463b      	mov	r3, r7
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f107 020e 	add.w	r2, r7, #14
 8006ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bac:	8013      	strh	r3, [r2, #0]
 8006bae:	f107 030e 	add.w	r3, r7, #14
 8006bb2:	f107 020e 	add.w	r2, r7, #14
 8006bb6:	8812      	ldrh	r2, [r2, #0]
 8006bb8:	f082 0210 	eor.w	r2, r2, #16
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	f107 030e 	add.w	r3, r7, #14
 8006bc2:	f107 020e 	add.w	r2, r7, #14
 8006bc6:	8812      	ldrh	r2, [r2, #0]
 8006bc8:	f082 0220 	eor.w	r2, r2, #32
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	f107 030e 	add.w	r3, r7, #14
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	8013      	strh	r3, [r2, #0]
 8006bf6:	e3b5      	b.n	8007364 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	7b1b      	ldrb	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 8090 	bne.w	8006d24 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006c04:	463b      	mov	r3, r7
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d90e      	bls.n	8006c32 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	463b      	mov	r3, r7
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	619a      	str	r2, [r3, #24]
 8006c30:	e008      	b.n	8006c44 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006c32:	463b      	mov	r3, r7
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c44:	1d3b      	adds	r3, r7, #4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c4c:	1d3b      	adds	r3, r7, #4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c62:	463b      	mov	r3, r7
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	00da      	lsls	r2, r3, #3
 8006c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d116      	bne.n	8006cae <USB_EPStartXfer+0xb9c>
 8006c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	e32c      	b.n	8007308 <USB_EPStartXfer+0x11f6>
 8006cae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8006cb4:	d818      	bhi.n	8006ce8 <USB_EPStartXfer+0xbd6>
 8006cb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cba:	085b      	lsrs	r3, r3, #1
 8006cbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <USB_EPStartXfer+0xbc4>
 8006ccc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	029b      	lsls	r3, r3, #10
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ce4:	801a      	strh	r2, [r3, #0]
 8006ce6:	e30f      	b.n	8007308 <USB_EPStartXfer+0x11f6>
 8006ce8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <USB_EPStartXfer+0xbf6>
 8006cfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d02:	3b01      	subs	r3, #1
 8006d04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	029b      	lsls	r3, r3, #10
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	e2f1      	b.n	8007308 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006d24:	463b      	mov	r3, r7
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	78db      	ldrb	r3, [r3, #3]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	f040 818f 	bne.w	800704e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d30:	463b      	mov	r3, r7
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d175      	bne.n	8006e26 <USB_EPStartXfer+0xd14>
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d42:	1d3b      	adds	r3, r7, #4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d52:	4413      	add	r3, r2
 8006d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	00da      	lsls	r2, r3, #3
 8006d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d6e:	463b      	mov	r3, r7
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d116      	bne.n	8006da6 <USB_EPStartXfer+0xc94>
 8006d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d8a:	801a      	strh	r2, [r3, #0]
 8006d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	e065      	b.n	8006e72 <USB_EPStartXfer+0xd60>
 8006da6:	463b      	mov	r3, r7
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b3e      	cmp	r3, #62	; 0x3e
 8006dae:	d81a      	bhi.n	8006de6 <USB_EPStartXfer+0xcd4>
 8006db0:	463b      	mov	r3, r7
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <USB_EPStartXfer+0xcc2>
 8006dca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	029b      	lsls	r3, r3, #10
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e045      	b.n	8006e72 <USB_EPStartXfer+0xd60>
 8006de6:	463b      	mov	r3, r7
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006df2:	463b      	mov	r3, r7
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d104      	bne.n	8006e0a <USB_EPStartXfer+0xcf8>
 8006e00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e04:	3b01      	subs	r3, #1
 8006e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	029b      	lsls	r3, r3, #10
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e025      	b.n	8006e72 <USB_EPStartXfer+0xd60>
 8006e26:	463b      	mov	r3, r7
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d120      	bne.n	8006e72 <USB_EPStartXfer+0xd60>
 8006e30:	1d3b      	adds	r3, r7, #4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e38:	1d3b      	adds	r3, r7, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e48:	4413      	add	r3, r2
 8006e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e4e:	463b      	mov	r3, r7
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	00da      	lsls	r2, r3, #3
 8006e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e64:	463b      	mov	r3, r7
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	1d3b      	adds	r3, r7, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	785b      	ldrb	r3, [r3, #1]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d175      	bne.n	8006f70 <USB_EPStartXfer+0xe5e>
 8006e84:	1d3b      	adds	r3, r7, #4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e8c:	1d3b      	adds	r3, r7, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	00da      	lsls	r2, r3, #3
 8006eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eae:	4413      	add	r3, r2
 8006eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eb8:	463b      	mov	r3, r7
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d116      	bne.n	8006ef0 <USB_EPStartXfer+0xdde>
 8006ec2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	e061      	b.n	8006fb4 <USB_EPStartXfer+0xea2>
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef8:	d81a      	bhi.n	8006f30 <USB_EPStartXfer+0xe1e>
 8006efa:	463b      	mov	r3, r7
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f06:	463b      	mov	r3, r7
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <USB_EPStartXfer+0xe0c>
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f18:	3301      	adds	r3, #1
 8006f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	029b      	lsls	r3, r3, #10
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	e041      	b.n	8006fb4 <USB_EPStartXfer+0xea2>
 8006f30:	463b      	mov	r3, r7
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 031f 	and.w	r3, r3, #31
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <USB_EPStartXfer+0xe42>
 8006f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	029b      	lsls	r3, r3, #10
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e021      	b.n	8006fb4 <USB_EPStartXfer+0xea2>
 8006f70:	463b      	mov	r3, r7
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d11c      	bne.n	8006fb4 <USB_EPStartXfer+0xea2>
 8006f7a:	1d3b      	adds	r3, r7, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f90:	463b      	mov	r3, r7
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	00da      	lsls	r2, r3, #3
 8006f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fb2:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006fb4:	463b      	mov	r3, r7
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 81a4 	beq.w	8007308 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006fc0:	1d3b      	adds	r3, r7, #4
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fd4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <USB_EPStartXfer+0xeda>
 8006fe0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10d      	bne.n	8007008 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 8187 	bne.w	8007308 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ffa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 8180 	bne.w	8007308 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007008:	1d3b      	adds	r3, r7, #4
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	463b      	mov	r3, r7
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007022:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800703c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]
 800704c:	e15c      	b.n	8007308 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800704e:	463b      	mov	r3, r7
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	78db      	ldrb	r3, [r3, #3]
 8007054:	2b01      	cmp	r3, #1
 8007056:	f040 8155 	bne.w	8007304 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800705a:	463b      	mov	r3, r7
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	463b      	mov	r3, r7
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	429a      	cmp	r2, r3
 8007068:	d90e      	bls.n	8007088 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800706a:	463b      	mov	r3, r7
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007074:	463b      	mov	r3, r7
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800707e:	1ad2      	subs	r2, r2, r3
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	619a      	str	r2, [r3, #24]
 8007086:	e008      	b.n	800709a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007088:	463b      	mov	r3, r7
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007092:	463b      	mov	r3, r7
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800709a:	463b      	mov	r3, r7
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d16f      	bne.n	8007184 <USB_EPStartXfer+0x1072>
 80070a4:	1d3b      	adds	r3, r7, #4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070bc:	4413      	add	r3, r2
 80070be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070c2:	463b      	mov	r3, r7
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	00da      	lsls	r2, r3, #3
 80070ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070ce:	4413      	add	r3, r2
 80070d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d116      	bne.n	800710e <USB_EPStartXfer+0xffc>
 80070e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007104:	b29a      	uxth	r2, r3
 8007106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800710a:	801a      	strh	r2, [r3, #0]
 800710c:	e05f      	b.n	80071ce <USB_EPStartXfer+0x10bc>
 800710e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007112:	2b3e      	cmp	r3, #62	; 0x3e
 8007114:	d818      	bhi.n	8007148 <USB_EPStartXfer+0x1036>
 8007116:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <USB_EPStartXfer+0x1024>
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007130:	3301      	adds	r3, #1
 8007132:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713a:	b29b      	uxth	r3, r3
 800713c:	029b      	lsls	r3, r3, #10
 800713e:	b29a      	uxth	r2, r3
 8007140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	e042      	b.n	80071ce <USB_EPStartXfer+0x10bc>
 8007148:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007152:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <USB_EPStartXfer+0x1056>
 800715e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007162:	3b01      	subs	r3, #1
 8007164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716c:	b29b      	uxth	r3, r3
 800716e:	029b      	lsls	r3, r3, #10
 8007170:	b29b      	uxth	r3, r3
 8007172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717a:	b29a      	uxth	r2, r3
 800717c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	e024      	b.n	80071ce <USB_EPStartXfer+0x10bc>
 8007184:	463b      	mov	r3, r7
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d11f      	bne.n	80071ce <USB_EPStartXfer+0x10bc>
 800718e:	1d3b      	adds	r3, r7, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007196:	1d3b      	adds	r3, r7, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719e:	b29b      	uxth	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071a6:	4413      	add	r3, r2
 80071a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071ac:	463b      	mov	r3, r7
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	00da      	lsls	r2, r3, #3
 80071b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071b8:	4413      	add	r3, r2
 80071ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	1d3b      	adds	r3, r7, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071d6:	463b      	mov	r3, r7
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d16f      	bne.n	80072c0 <USB_EPStartXfer+0x11ae>
 80071e0:	1d3b      	adds	r3, r7, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071e8:	1d3b      	adds	r3, r7, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071f8:	4413      	add	r3, r2
 80071fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071fe:	463b      	mov	r3, r7
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	00da      	lsls	r2, r3, #3
 8007206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800720a:	4413      	add	r3, r2
 800720c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007214:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007218:	2b00      	cmp	r3, #0
 800721a:	d116      	bne.n	800724a <USB_EPStartXfer+0x1138>
 800721c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007228:	b29a      	uxth	r2, r3
 800722a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007240:	b29a      	uxth	r2, r3
 8007242:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e05e      	b.n	8007308 <USB_EPStartXfer+0x11f6>
 800724a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800724e:	2b3e      	cmp	r3, #62	; 0x3e
 8007250:	d818      	bhi.n	8007284 <USB_EPStartXfer+0x1172>
 8007252:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800725c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d004      	beq.n	8007272 <USB_EPStartXfer+0x1160>
 8007268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726c:	3301      	adds	r3, #1
 800726e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007276:	b29b      	uxth	r3, r3
 8007278:	029b      	lsls	r3, r3, #10
 800727a:	b29a      	uxth	r2, r3
 800727c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e041      	b.n	8007308 <USB_EPStartXfer+0x11f6>
 8007284:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800728e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <USB_EPStartXfer+0x1192>
 800729a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800729e:	3b01      	subs	r3, #1
 80072a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	029b      	lsls	r3, r3, #10
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072bc:	801a      	strh	r2, [r3, #0]
 80072be:	e023      	b.n	8007308 <USB_EPStartXfer+0x11f6>
 80072c0:	463b      	mov	r3, r7
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d11e      	bne.n	8007308 <USB_EPStartXfer+0x11f6>
 80072ca:	1d3b      	adds	r3, r7, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072da:	4413      	add	r3, r2
 80072dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072e0:	463b      	mov	r3, r7
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	00da      	lsls	r2, r3, #3
 80072e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072ec:	4413      	add	r3, r2
 80072ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007300:	801a      	strh	r2, [r3, #0]
 8007302:	e001      	b.n	8007308 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e02e      	b.n	8007366 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	463b      	mov	r3, r7
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007326:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800732a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800732e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007332:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007336:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800733a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800733e:	1d3b      	adds	r3, r7, #4
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	463b      	mov	r3, r7
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	441a      	add	r2, r3
 800734c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007360:	b29b      	uxth	r3, r3
 8007362:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d020      	beq.n	80073c4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007398:	81bb      	strh	r3, [r7, #12]
 800739a:	89bb      	ldrh	r3, [r7, #12]
 800739c:	f083 0310 	eor.w	r3, r3, #16
 80073a0:	81bb      	strh	r3, [r7, #12]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	89bb      	ldrh	r3, [r7, #12]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]
 80073c2:	e01f      	b.n	8007404 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	81fb      	strh	r3, [r7, #14]
 80073dc:	89fb      	ldrh	r3, [r7, #14]
 80073de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073e2:	81fb      	strh	r3, [r7, #14]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	89fb      	ldrh	r3, [r7, #14]
 80073f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007400:	b29b      	uxth	r3, r3
 8007402:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007412:	b480      	push	{r7}
 8007414:	b087      	sub	sp, #28
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	7b1b      	ldrb	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 809d 	bne.w	8007560 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d04c      	beq.n	80074c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	823b      	strh	r3, [r7, #16]
 800743c:	8a3b      	ldrh	r3, [r7, #16]
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01b      	beq.n	800747e <USB_EPClearStall+0x6c>
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745c:	81fb      	strh	r3, [r7, #14]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	441a      	add	r2, r3
 8007468:	89fb      	ldrh	r3, [r7, #14]
 800746a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800746e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800747a:	b29b      	uxth	r3, r3
 800747c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	78db      	ldrb	r3, [r3, #3]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d06c      	beq.n	8007560 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800749c:	81bb      	strh	r3, [r7, #12]
 800749e:	89bb      	ldrh	r3, [r7, #12]
 80074a0:	f083 0320 	eor.w	r3, r3, #32
 80074a4:	81bb      	strh	r3, [r7, #12]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	441a      	add	r2, r3
 80074b0:	89bb      	ldrh	r3, [r7, #12]
 80074b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	8013      	strh	r3, [r2, #0]
 80074c6:	e04b      	b.n	8007560 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	82fb      	strh	r3, [r7, #22]
 80074d6:	8afb      	ldrh	r3, [r7, #22]
 80074d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01b      	beq.n	8007518 <USB_EPClearStall+0x106>
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	82bb      	strh	r3, [r7, #20]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	8abb      	ldrh	r3, [r7, #20]
 8007504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007514:	b29b      	uxth	r3, r3
 8007516:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	827b      	strh	r3, [r7, #18]
 8007530:	8a7b      	ldrh	r3, [r7, #18]
 8007532:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007536:	827b      	strh	r3, [r7, #18]
 8007538:	8a7b      	ldrh	r3, [r7, #18]
 800753a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800753e:	827b      	strh	r3, [r7, #18]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	441a      	add	r2, r3
 800754a:	8a7b      	ldrh	r3, [r7, #18]
 800754c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755c:	b29b      	uxth	r3, r3
 800755e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d103      	bne.n	8007588 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2280      	movs	r2, #128	; 0x80
 8007584:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80075d6:	68fb      	ldr	r3, [r7, #12]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b08d      	sub	sp, #52	; 0x34
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	460b      	mov	r3, r1
 800760c:	80fb      	strh	r3, [r7, #6]
 800760e:	4613      	mov	r3, r2
 8007610:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007612:	88bb      	ldrh	r3, [r7, #4]
 8007614:	3301      	adds	r3, #1
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007632:	e01b      	b.n	800766c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	3301      	adds	r3, #1
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	b29b      	uxth	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	b29a      	uxth	r2, r3
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	3302      	adds	r3, #2
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	3301      	adds	r3, #1
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	3b01      	subs	r3, #1
 800766a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e0      	bne.n	8007634 <USB_WritePMA+0x38>
  }
}
 8007672:	bf00      	nop
 8007674:	3734      	adds	r7, #52	; 0x34
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800767e:	b480      	push	{r7}
 8007680:	b08b      	sub	sp, #44	; 0x2c
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	4611      	mov	r1, r2
 800768a:	461a      	mov	r2, r3
 800768c:	460b      	mov	r3, r1
 800768e:	80fb      	strh	r3, [r7, #6]
 8007690:	4613      	mov	r3, r2
 8007692:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007694:	88bb      	ldrh	r3, [r7, #4]
 8007696:	085b      	lsrs	r3, r3, #1
 8007698:	b29b      	uxth	r3, r3
 800769a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ae:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
 80076b4:	e018      	b.n	80076e8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	3302      	adds	r3, #2
 80076c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	0a1b      	lsrs	r3, r3, #8
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3301      	adds	r3, #1
 80076e0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	3b01      	subs	r3, #1
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e3      	bne.n	80076b6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80076ee:	88bb      	ldrh	r3, [r7, #4]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d007      	beq.n	800770a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	b2da      	uxtb	r2, r3
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	701a      	strb	r2, [r3, #0]
  }
}
 800770a:	bf00      	nop
 800770c:	372c      	adds	r7, #44	; 0x2c
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007722:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007726:	f002 f847 	bl	80097b8 <USBD_static_malloc>
 800772a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d105      	bne.n	800773e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800773a:	2302      	movs	r3, #2
 800773c:	e066      	b.n	800780c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	7c1b      	ldrb	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d119      	bne.n	8007782 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800774e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007752:	2202      	movs	r2, #2
 8007754:	2181      	movs	r1, #129	; 0x81
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fed3 	bl	8009502 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007766:	2202      	movs	r2, #2
 8007768:	2101      	movs	r1, #1
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 fec9 	bl	8009502 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2210      	movs	r2, #16
 800777c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007780:	e016      	b.n	80077b0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007782:	2340      	movs	r3, #64	; 0x40
 8007784:	2202      	movs	r2, #2
 8007786:	2181      	movs	r1, #129	; 0x81
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 feba 	bl	8009502 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007794:	2340      	movs	r3, #64	; 0x40
 8007796:	2202      	movs	r2, #2
 8007798:	2101      	movs	r1, #1
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 feb1 	bl	8009502 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2210      	movs	r2, #16
 80077ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80077b0:	2308      	movs	r3, #8
 80077b2:	2203      	movs	r2, #3
 80077b4:	2182      	movs	r1, #130	; 0x82
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 fea3 	bl	8009502 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7c1b      	ldrb	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f0:	2101      	movs	r1, #1
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 ff75 	bl	80096e2 <USBD_LL_PrepareReceive>
 80077f8:	e007      	b.n	800780a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007800:	2340      	movs	r3, #64	; 0x40
 8007802:	2101      	movs	r1, #1
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 ff6c 	bl	80096e2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007820:	2181      	movs	r1, #129	; 0x81
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fe93 	bl	800954e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800782e:	2101      	movs	r1, #1
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fe8c 	bl	800954e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800783e:	2182      	movs	r1, #130	; 0x82
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fe84 	bl	800954e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00e      	beq.n	800787e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007870:	4618      	mov	r0, r3
 8007872:	f001 ffaf 	bl	80097d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007898:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d03a      	beq.n	8007928 <USBD_CDC_Setup+0xa0>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	f040 8097 	bne.w	80079e6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	88db      	ldrh	r3, [r3, #6]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d029      	beq.n	8007914 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b25b      	sxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da11      	bge.n	80078ee <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80078d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	88d2      	ldrh	r2, [r2, #6]
 80078dc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80078de:	6939      	ldr	r1, [r7, #16]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	88db      	ldrh	r3, [r3, #6]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 fa5d 	bl	8008da6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80078ec:	e082      	b.n	80079f4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785a      	ldrb	r2, [r3, #1]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	88db      	ldrh	r3, [r3, #6]
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007904:	6939      	ldr	r1, [r7, #16]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	88db      	ldrh	r3, [r3, #6]
 800790a:	461a      	mov	r2, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fa76 	bl	8008dfe <USBD_CtlPrepareRx>
      break;
 8007912:	e06f      	b.n	80079f4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	7850      	ldrb	r0, [r2, #1]
 8007920:	2200      	movs	r2, #0
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	4798      	blx	r3
      break;
 8007926:	e065      	b.n	80079f4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b0b      	cmp	r3, #11
 800792e:	d84f      	bhi.n	80079d0 <USBD_CDC_Setup+0x148>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <USBD_CDC_Setup+0xb0>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	08007969 	.word	0x08007969
 800793c:	080079df 	.word	0x080079df
 8007940:	080079d1 	.word	0x080079d1
 8007944:	080079d1 	.word	0x080079d1
 8007948:	080079d1 	.word	0x080079d1
 800794c:	080079d1 	.word	0x080079d1
 8007950:	080079d1 	.word	0x080079d1
 8007954:	080079d1 	.word	0x080079d1
 8007958:	080079d1 	.word	0x080079d1
 800795c:	080079d1 	.word	0x080079d1
 8007960:	08007991 	.word	0x08007991
 8007964:	080079b9 	.word	0x080079b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796e:	2b03      	cmp	r3, #3
 8007970:	d107      	bne.n	8007982 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007972:	f107 030c 	add.w	r3, r7, #12
 8007976:	2202      	movs	r2, #2
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fa13 	bl	8008da6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007980:	e030      	b.n	80079e4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 f99d 	bl	8008cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800798a:	2303      	movs	r3, #3
 800798c:	75fb      	strb	r3, [r7, #23]
          break;
 800798e:	e029      	b.n	80079e4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007996:	2b03      	cmp	r3, #3
 8007998:	d107      	bne.n	80079aa <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800799a:	f107 030f 	add.w	r3, r7, #15
 800799e:	2201      	movs	r2, #1
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f9ff 	bl	8008da6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079a8:	e01c      	b.n	80079e4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 f989 	bl	8008cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 80079b2:	2303      	movs	r3, #3
 80079b4:	75fb      	strb	r3, [r7, #23]
          break;
 80079b6:	e015      	b.n	80079e4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d00f      	beq.n	80079e2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f97d 	bl	8008cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 80079ca:	2303      	movs	r3, #3
 80079cc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80079ce:	e008      	b.n	80079e2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 f976 	bl	8008cc4 <USBD_CtlError>
          ret = USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	75fb      	strb	r3, [r7, #23]
          break;
 80079dc:	e002      	b.n	80079e4 <USBD_CDC_Setup+0x15c>
          break;
 80079de:	bf00      	nop
 80079e0:	e008      	b.n	80079f4 <USBD_CDC_Setup+0x16c>
          break;
 80079e2:	bf00      	nop
      }
      break;
 80079e4:	e006      	b.n	80079f4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f96b 	bl	8008cc4 <USBD_CtlError>
      ret = USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	75fb      	strb	r3, [r7, #23]
      break;
 80079f2:	bf00      	nop
  }

  return (uint8_t)ret;
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop

08007a00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e04f      	b.n	8007ac2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	3318      	adds	r3, #24
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d029      	beq.n	8007a94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	3318      	adds	r3, #24
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	78f9      	ldrb	r1, [r7, #3]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	460b      	mov	r3, r1
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	4403      	add	r3, r0
 8007a60:	3338      	adds	r3, #56	; 0x38
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a68:	fb03 f301 	mul.w	r3, r3, r1
 8007a6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d110      	bne.n	8007a94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	3318      	adds	r3, #24
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a86:	78f9      	ldrb	r1, [r7, #3]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fe07 	bl	80096a0 <USBD_LL_Transmit>
 8007a92:	e015      	b.n	8007ac0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007adc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e015      	b.n	8007b18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fe17 	bl	8009724 <USBD_LL_GetRxDataSize>
 8007af6:	4602      	mov	r2, r0
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b12:	4611      	mov	r1, r2
 8007b14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b2e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d015      	beq.n	8007b66 <USBD_CDC_EP0_RxReady+0x46>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b40:	2bff      	cmp	r3, #255	; 0xff
 8007b42:	d010      	beq.n	8007b66 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007b52:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b5a:	b292      	uxth	r2, r2
 8007b5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	22ff      	movs	r2, #255	; 0xff
 8007b62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2243      	movs	r2, #67	; 0x43
 8007b7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007b7e:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	20000098 	.word	0x20000098

08007b90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2243      	movs	r2, #67	; 0x43
 8007b9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007b9e:	4b03      	ldr	r3, [pc, #12]	; (8007bac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	20000054 	.word	0x20000054

08007bb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2243      	movs	r2, #67	; 0x43
 8007bbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007bbe:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	200000dc 	.word	0x200000dc

08007bd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	220a      	movs	r2, #10
 8007bdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007bde:	4b03      	ldr	r3, [pc, #12]	; (8007bec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20000010 	.word	0x20000010

08007bf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e004      	b.n	8007c0e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b087      	sub	sp, #28
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c2c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c5c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e016      	b.n	8007cc0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7c1b      	ldrb	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d109      	bne.n	8007cae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fd1b 	bl	80096e2 <USBD_LL_PrepareReceive>
 8007cac:	e007      	b.n	8007cbe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cb4:	2340      	movs	r3, #64	; 0x40
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 fd12 	bl	80096e2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e01f      	b.n	8007d20 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	79fa      	ldrb	r2, [r7, #7]
 8007d12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f001 fb79 	bl	800940c <USBD_LL_Init>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e016      	b.n	8007d6e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	f107 020e 	add.w	r2, r7, #14
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
 8007d64:	4602      	mov	r2, r0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fba4 	bl	80094cc <USBD_LL_Start>
 8007d84:	4603      	mov	r3, r0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	78fa      	ldrb	r2, [r7, #3]
 8007dc8:	4611      	mov	r1, r2
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	4798      	blx	r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	78fa      	ldrb	r2, [r7, #3]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
  }

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 ff16 	bl	8008c50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e32:	461a      	mov	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d00e      	beq.n	8007e66 <USBD_LL_SetupStage+0x5a>
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d302      	bcc.n	8007e52 <USBD_LL_SetupStage+0x46>
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d014      	beq.n	8007e7a <USBD_LL_SetupStage+0x6e>
 8007e50:	e01d      	b.n	8007e8e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f9d6 	bl	800820c <USBD_StdDevReq>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]
      break;
 8007e64:	e020      	b.n	8007ea8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa3a 	bl	80082e8 <USBD_StdItfReq>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
      break;
 8007e78:	e016      	b.n	8007ea8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa76 	bl	8008374 <USBD_StdEPReq>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8c:	e00c      	b.n	8007ea8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 fb75 	bl	800958c <USBD_LL_StallEP>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea6:	bf00      	nop
  }

  return ret;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	607a      	str	r2, [r7, #4]
 8007ebe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d137      	bne.n	8007f36 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ecc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d14a      	bne.n	8007f6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d913      	bls.n	8007f0c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	1ad2      	subs	r2, r2, r3
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	4293      	cmp	r3, r2
 8007efc:	bf28      	it	cs
 8007efe:	4613      	movcs	r3, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 ff97 	bl	8008e38 <USBD_CtlContinueRx>
 8007f0a:	e030      	b.n	8007f6e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d105      	bne.n	8007f2e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 ff93 	bl	8008e5a <USBD_CtlSendStatus>
 8007f34:	e01b      	b.n	8007f6e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d013      	beq.n	8007f6a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d10e      	bne.n	8007f6a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	7afa      	ldrb	r2, [r7, #11]
 8007f56:	4611      	mov	r1, r2
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	4798      	blx	r3
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	e002      	b.n	8007f70 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e000      	b.n	8007f70 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	460b      	mov	r3, r1
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d16a      	bne.n	8008062 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3314      	adds	r3, #20
 8007f90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d155      	bne.n	8008048 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d914      	bls.n	8007fd2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	1ad2      	subs	r2, r2, r3
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 ff0c 	bl	8008ddc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2100      	movs	r1, #0
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f001 fb89 	bl	80096e2 <USBD_LL_PrepareReceive>
 8007fd0:	e03a      	b.n	8008048 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d11c      	bne.n	8008018 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d316      	bcc.n	8008018 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d20f      	bcs.n	8008018 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 feed 	bl	8008ddc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800800a:	2300      	movs	r3, #0
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f001 fb66 	bl	80096e2 <USBD_LL_PrepareReceive>
 8008016:	e017      	b.n	8008048 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800802a:	2b03      	cmp	r3, #3
 800802c:	d105      	bne.n	800803a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f001 faa5 	bl	800958c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 ff1c 	bl	8008e80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800804e:	2b01      	cmp	r3, #1
 8008050:	d123      	bne.n	800809a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f7ff fe9b 	bl	8007d8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008060:	e01b      	b.n	800809a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d013      	beq.n	8008096 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008074:	2b03      	cmp	r3, #3
 8008076:	d10e      	bne.n	8008096 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	7afa      	ldrb	r2, [r7, #11]
 8008082:	4611      	mov	r1, r2
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
 800808a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	e002      	b.n	800809c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008096:	2303      	movs	r3, #3
 8008098:	e000      	b.n	800809c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d009      	beq.n	80080e8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6852      	ldr	r2, [r2, #4]
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	4611      	mov	r1, r2
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080e8:	2340      	movs	r3, #64	; 0x40
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 fa07 	bl	8009502 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2240      	movs	r2, #64	; 0x40
 8008100:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008104:	2340      	movs	r3, #64	; 0x40
 8008106:	2200      	movs	r2, #0
 8008108:	2180      	movs	r1, #128	; 0x80
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 f9f9 	bl	8009502 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2240      	movs	r2, #64	; 0x40
 800811a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	78fa      	ldrb	r2, [r7, #3]
 8008136:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2204      	movs	r2, #4
 800815e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817e:	2b04      	cmp	r3, #4
 8008180:	d105      	bne.n	800818e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d10b      	bne.n	80081c6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	3301      	adds	r3, #1
 80081e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081ee:	8a3b      	ldrh	r3, [r7, #16]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b21a      	sxth	r2, r3
 80081f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	b21b      	sxth	r3, r3
 80081fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081fe:	89fb      	ldrh	r3, [r7, #14]
}
 8008200:	4618      	mov	r0, r3
 8008202:	371c      	adds	r7, #28
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008222:	2b20      	cmp	r3, #32
 8008224:	d004      	beq.n	8008230 <USBD_StdDevReq+0x24>
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d002      	beq.n	8008230 <USBD_StdDevReq+0x24>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00a      	beq.n	8008244 <USBD_StdDevReq+0x38>
 800822e:	e050      	b.n	80082d2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	4798      	blx	r3
 800823e:	4603      	mov	r3, r0
 8008240:	73fb      	strb	r3, [r7, #15]
    break;
 8008242:	e04b      	b.n	80082dc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	2b09      	cmp	r3, #9
 800824a:	d83c      	bhi.n	80082c6 <USBD_StdDevReq+0xba>
 800824c:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <USBD_StdDevReq+0x48>)
 800824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008252:	bf00      	nop
 8008254:	080082a9 	.word	0x080082a9
 8008258:	080082bd 	.word	0x080082bd
 800825c:	080082c7 	.word	0x080082c7
 8008260:	080082b3 	.word	0x080082b3
 8008264:	080082c7 	.word	0x080082c7
 8008268:	08008287 	.word	0x08008287
 800826c:	0800827d 	.word	0x0800827d
 8008270:	080082c7 	.word	0x080082c7
 8008274:	0800829f 	.word	0x0800829f
 8008278:	08008291 	.word	0x08008291
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9d0 	bl	8008624 <USBD_GetDescriptor>
      break;
 8008284:	e024      	b.n	80082d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fb5f 	bl	800894c <USBD_SetAddress>
      break;
 800828e:	e01f      	b.n	80082d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fb9c 	bl	80089d0 <USBD_SetConfig>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]
      break;
 800829c:	e018      	b.n	80082d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fc39 	bl	8008b18 <USBD_GetConfig>
      break;
 80082a6:	e013      	b.n	80082d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fc68 	bl	8008b80 <USBD_GetStatus>
      break;
 80082b0:	e00e      	b.n	80082d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc96 	bl	8008be6 <USBD_SetFeature>
      break;
 80082ba:	e009      	b.n	80082d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fca5 	bl	8008c0e <USBD_ClrFeature>
      break;
 80082c4:	e004      	b.n	80082d0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fcfb 	bl	8008cc4 <USBD_CtlError>
      break;
 80082ce:	bf00      	nop
    }
    break;
 80082d0:	e004      	b.n	80082dc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fcf5 	bl	8008cc4 <USBD_CtlError>
    break;
 80082da:	bf00      	nop
  }

  return ret;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop

080082e8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082fe:	2b20      	cmp	r3, #32
 8008300:	d003      	beq.n	800830a <USBD_StdItfReq+0x22>
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d001      	beq.n	800830a <USBD_StdItfReq+0x22>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d12a      	bne.n	8008360 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008310:	3b01      	subs	r3, #1
 8008312:	2b02      	cmp	r3, #2
 8008314:	d81d      	bhi.n	8008352 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	889b      	ldrh	r3, [r3, #4]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b01      	cmp	r3, #1
 800831e:	d813      	bhi.n	8008348 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d110      	bne.n	800835c <USBD_StdItfReq+0x74>
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10d      	bne.n	800835c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fd8a 	bl	8008e5a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008346:	e009      	b.n	800835c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fcba 	bl	8008cc4 <USBD_CtlError>
      break;
 8008350:	e004      	b.n	800835c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fcb5 	bl	8008cc4 <USBD_CtlError>
      break;
 800835a:	e000      	b.n	800835e <USBD_StdItfReq+0x76>
      break;
 800835c:	bf00      	nop
    }
    break;
 800835e:	e004      	b.n	800836a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fcae 	bl	8008cc4 <USBD_CtlError>
    break;
 8008368:	bf00      	nop
  }

  return ret;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	889b      	ldrh	r3, [r3, #4]
 8008386:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008390:	2b20      	cmp	r3, #32
 8008392:	d004      	beq.n	800839e <USBD_StdEPReq+0x2a>
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	d002      	beq.n	800839e <USBD_StdEPReq+0x2a>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <USBD_StdEPReq+0x3e>
 800839c:	e137      	b.n	800860e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
    break;
 80083b0:	e132      	b.n	8008618 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d03e      	beq.n	8008438 <USBD_StdEPReq+0xc4>
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d002      	beq.n	80083c4 <USBD_StdEPReq+0x50>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d079      	beq.n	80084b6 <USBD_StdEPReq+0x142>
 80083c2:	e11e      	b.n	8008602 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d002      	beq.n	80083d4 <USBD_StdEPReq+0x60>
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d015      	beq.n	80083fe <USBD_StdEPReq+0x8a>
 80083d2:	e02b      	b.n	800842c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00c      	beq.n	80083f4 <USBD_StdEPReq+0x80>
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	2b80      	cmp	r3, #128	; 0x80
 80083de:	d009      	beq.n	80083f4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 f8d1 	bl	800958c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083ea:	2180      	movs	r1, #128	; 0x80
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f8cd 	bl	800958c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80083f2:	e020      	b.n	8008436 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fc64 	bl	8008cc4 <USBD_CtlError>
        break;
 80083fc:	e01b      	b.n	8008436 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10e      	bne.n	8008424 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_StdEPReq+0xb0>
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d008      	beq.n	8008424 <USBD_StdEPReq+0xb0>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	88db      	ldrh	r3, [r3, #6]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d104      	bne.n	8008424 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 f8b4 	bl	800958c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fd18 	bl	8008e5a <USBD_CtlSendStatus>

        break;
 800842a:	e004      	b.n	8008436 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fc48 	bl	8008cc4 <USBD_CtlError>
        break;
 8008434:	bf00      	nop
      }
      break;
 8008436:	e0e9      	b.n	800860c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843e:	2b02      	cmp	r3, #2
 8008440:	d002      	beq.n	8008448 <USBD_StdEPReq+0xd4>
 8008442:	2b03      	cmp	r3, #3
 8008444:	d015      	beq.n	8008472 <USBD_StdEPReq+0xfe>
 8008446:	e02f      	b.n	80084a8 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00c      	beq.n	8008468 <USBD_StdEPReq+0xf4>
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b80      	cmp	r3, #128	; 0x80
 8008452:	d009      	beq.n	8008468 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f897 	bl	800958c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800845e:	2180      	movs	r1, #128	; 0x80
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f893 	bl	800958c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008466:	e025      	b.n	80084b4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc2a 	bl	8008cc4 <USBD_CtlError>
        break;
 8008470:	e020      	b.n	80084b4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	885b      	ldrh	r3, [r3, #2]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d11b      	bne.n	80084b2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 f89e 	bl	80095ca <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fce3 	bl	8008e5a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084a6:	e004      	b.n	80084b2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fc0a 	bl	8008cc4 <USBD_CtlError>
        break;
 80084b0:	e000      	b.n	80084b4 <USBD_StdEPReq+0x140>
        break;
 80084b2:	bf00      	nop
      }
      break;
 80084b4:	e0aa      	b.n	800860c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d002      	beq.n	80084c6 <USBD_StdEPReq+0x152>
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d032      	beq.n	800852a <USBD_StdEPReq+0x1b6>
 80084c4:	e097      	b.n	80085f6 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d007      	beq.n	80084dc <USBD_StdEPReq+0x168>
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	2b80      	cmp	r3, #128	; 0x80
 80084d0:	d004      	beq.n	80084dc <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fbf5 	bl	8008cc4 <USBD_CtlError>
          break;
 80084da:	e091      	b.n	8008600 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	da0b      	bge.n	80084fc <USBD_StdEPReq+0x188>
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	3310      	adds	r3, #16
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	4413      	add	r3, r2
 80084f8:	3304      	adds	r3, #4
 80084fa:	e00b      	b.n	8008514 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	4413      	add	r3, r2
 8008512:	3304      	adds	r3, #4
 8008514:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2202      	movs	r2, #2
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fc3f 	bl	8008da6 <USBD_CtlSendData>
        break;
 8008528:	e06a      	b.n	8008600 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800852a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800852e:	2b00      	cmp	r3, #0
 8008530:	da11      	bge.n	8008556 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	f003 020f 	and.w	r2, r3, #15
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	3324      	adds	r3, #36	; 0x24
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d117      	bne.n	800857c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fbb8 	bl	8008cc4 <USBD_CtlError>
            break;
 8008554:	e054      	b.n	8008600 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	f003 020f 	and.w	r2, r3, #15
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fba5 	bl	8008cc4 <USBD_CtlError>
            break;
 800857a:	e041      	b.n	8008600 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800857c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008580:	2b00      	cmp	r3, #0
 8008582:	da0b      	bge.n	800859c <USBD_StdEPReq+0x228>
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	3310      	adds	r3, #16
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	4413      	add	r3, r2
 8008598:	3304      	adds	r3, #4
 800859a:	e00b      	b.n	80085b4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	3304      	adds	r3, #4
 80085b4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <USBD_StdEPReq+0x24e>
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b80      	cmp	r3, #128	; 0x80
 80085c0:	d103      	bne.n	80085ca <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e00e      	b.n	80085e8 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 f81a 	bl	8009608 <USBD_LL_IsStallEP>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2201      	movs	r2, #1
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e002      	b.n	80085e8 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2202      	movs	r2, #2
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fbd9 	bl	8008da6 <USBD_CtlSendData>
          break;
 80085f4:	e004      	b.n	8008600 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fb63 	bl	8008cc4 <USBD_CtlError>
        break;
 80085fe:	bf00      	nop
      }
      break;
 8008600:	e004      	b.n	800860c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb5d 	bl	8008cc4 <USBD_CtlError>
      break;
 800860a:	bf00      	nop
    }
    break;
 800860c:	e004      	b.n	8008618 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fb57 	bl	8008cc4 <USBD_CtlError>
    break;
 8008616:	bf00      	nop
  }

  return ret;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	885b      	ldrh	r3, [r3, #2]
 800863e:	0a1b      	lsrs	r3, r3, #8
 8008640:	b29b      	uxth	r3, r3
 8008642:	3b01      	subs	r3, #1
 8008644:	2b0e      	cmp	r3, #14
 8008646:	f200 8152 	bhi.w	80088ee <USBD_GetDescriptor+0x2ca>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <USBD_GetDescriptor+0x2c>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	080086c1 	.word	0x080086c1
 8008654:	080086d9 	.word	0x080086d9
 8008658:	08008719 	.word	0x08008719
 800865c:	080088ef 	.word	0x080088ef
 8008660:	080088ef 	.word	0x080088ef
 8008664:	0800888f 	.word	0x0800888f
 8008668:	080088bb 	.word	0x080088bb
 800866c:	080088ef 	.word	0x080088ef
 8008670:	080088ef 	.word	0x080088ef
 8008674:	080088ef 	.word	0x080088ef
 8008678:	080088ef 	.word	0x080088ef
 800867c:	080088ef 	.word	0x080088ef
 8008680:	080088ef 	.word	0x080088ef
 8008684:	080088ef 	.word	0x080088ef
 8008688:	0800868d 	.word	0x0800868d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80086ae:	e126      	b.n	80088fe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fb06 	bl	8008cc4 <USBD_CtlError>
      err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
    break;
 80086be:	e11e      	b.n	80088fe <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	7c12      	ldrb	r2, [r2, #16]
 80086cc:	f107 0108 	add.w	r1, r7, #8
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	60f8      	str	r0, [r7, #12]
    break;
 80086d6:	e112      	b.n	80088fe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7c1b      	ldrb	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10d      	bne.n	80086fc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e8:	f107 0208 	add.w	r2, r7, #8
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
 80086f0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3301      	adds	r3, #1
 80086f6:	2202      	movs	r2, #2
 80086f8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80086fa:	e100      	b.n	80088fe <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f107 0208 	add.w	r2, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	2202      	movs	r2, #2
 8008714:	701a      	strb	r2, [r3, #0]
    break;
 8008716:	e0f2      	b.n	80088fe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	885b      	ldrh	r3, [r3, #2]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b05      	cmp	r3, #5
 8008720:	f200 80ac 	bhi.w	800887c <USBD_GetDescriptor+0x258>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <USBD_GetDescriptor+0x108>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008745 	.word	0x08008745
 8008730:	08008779 	.word	0x08008779
 8008734:	080087ad 	.word	0x080087ad
 8008738:	080087e1 	.word	0x080087e1
 800873c:	08008815 	.word	0x08008815
 8008740:	08008849 	.word	0x08008849
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	7c12      	ldrb	r2, [r2, #16]
 800875c:	f107 0108 	add.w	r1, r7, #8
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
 8008764:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008766:	e091      	b.n	800888c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 faaa 	bl	8008cc4 <USBD_CtlError>
        err++;
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	3301      	adds	r3, #1
 8008774:	72fb      	strb	r3, [r7, #11]
      break;
 8008776:	e089      	b.n	800888c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	7c12      	ldrb	r2, [r2, #16]
 8008790:	f107 0108 	add.w	r1, r7, #8
 8008794:	4610      	mov	r0, r2
 8008796:	4798      	blx	r3
 8008798:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800879a:	e077      	b.n	800888c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa90 	bl	8008cc4 <USBD_CtlError>
        err++;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	3301      	adds	r3, #1
 80087a8:	72fb      	strb	r3, [r7, #11]
      break;
 80087aa:	e06f      	b.n	800888c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	7c12      	ldrb	r2, [r2, #16]
 80087c4:	f107 0108 	add.w	r1, r7, #8
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087ce:	e05d      	b.n	800888c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa76 	bl	8008cc4 <USBD_CtlError>
        err++;
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	3301      	adds	r3, #1
 80087dc:	72fb      	strb	r3, [r7, #11]
      break;
 80087de:	e055      	b.n	800888c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00b      	beq.n	8008804 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7c12      	ldrb	r2, [r2, #16]
 80087f8:	f107 0108 	add.w	r1, r7, #8
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
 8008800:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008802:	e043      	b.n	800888c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa5c 	bl	8008cc4 <USBD_CtlError>
        err++;
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	3301      	adds	r3, #1
 8008810:	72fb      	strb	r3, [r7, #11]
      break;
 8008812:	e03b      	b.n	800888c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	7c12      	ldrb	r2, [r2, #16]
 800882c:	f107 0108 	add.w	r1, r7, #8
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
 8008834:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008836:	e029      	b.n	800888c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fa42 	bl	8008cc4 <USBD_CtlError>
        err++;
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	3301      	adds	r3, #1
 8008844:	72fb      	strb	r3, [r7, #11]
      break;
 8008846:	e021      	b.n	800888c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00b      	beq.n	800886c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	7c12      	ldrb	r2, [r2, #16]
 8008860:	f107 0108 	add.w	r1, r7, #8
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
 8008868:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800886a:	e00f      	b.n	800888c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fa28 	bl	8008cc4 <USBD_CtlError>
        err++;
 8008874:	7afb      	ldrb	r3, [r7, #11]
 8008876:	3301      	adds	r3, #1
 8008878:	72fb      	strb	r3, [r7, #11]
      break;
 800887a:	e007      	b.n	800888c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fa20 	bl	8008cc4 <USBD_CtlError>
      err++;
 8008884:	7afb      	ldrb	r3, [r7, #11]
 8008886:	3301      	adds	r3, #1
 8008888:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800888a:	bf00      	nop
    }
    break;
 800888c:	e037      	b.n	80088fe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7c1b      	ldrb	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889e:	f107 0208 	add.w	r2, r7, #8
 80088a2:	4610      	mov	r0, r2
 80088a4:	4798      	blx	r3
 80088a6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80088a8:	e029      	b.n	80088fe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fa09 	bl	8008cc4 <USBD_CtlError>
      err++;
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	3301      	adds	r3, #1
 80088b6:	72fb      	strb	r3, [r7, #11]
    break;
 80088b8:	e021      	b.n	80088fe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	7c1b      	ldrb	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10d      	bne.n	80088de <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ca:	f107 0208 	add.w	r2, r7, #8
 80088ce:	4610      	mov	r0, r2
 80088d0:	4798      	blx	r3
 80088d2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	2207      	movs	r2, #7
 80088da:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80088dc:	e00f      	b.n	80088fe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f9ef 	bl	8008cc4 <USBD_CtlError>
      err++;
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	3301      	adds	r3, #1
 80088ea:	72fb      	strb	r3, [r7, #11]
    break;
 80088ec:	e007      	b.n	80088fe <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f9e7 	bl	8008cc4 <USBD_CtlError>
    err++;
 80088f6:	7afb      	ldrb	r3, [r7, #11]
 80088f8:	3301      	adds	r3, #1
 80088fa:	72fb      	strb	r3, [r7, #11]
    break;
 80088fc:	bf00      	nop
  }

  if (err != 0U)
 80088fe:	7afb      	ldrb	r3, [r7, #11]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d11e      	bne.n	8008942 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	88db      	ldrh	r3, [r3, #6]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d016      	beq.n	800893a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800890c:	893b      	ldrh	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00e      	beq.n	8008930 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	88da      	ldrh	r2, [r3, #6]
 8008916:	893b      	ldrh	r3, [r7, #8]
 8008918:	4293      	cmp	r3, r2
 800891a:	bf28      	it	cs
 800891c:	4613      	movcs	r3, r2
 800891e:	b29b      	uxth	r3, r3
 8008920:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008922:	893b      	ldrh	r3, [r7, #8]
 8008924:	461a      	mov	r2, r3
 8008926:	68f9      	ldr	r1, [r7, #12]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fa3c 	bl	8008da6 <USBD_CtlSendData>
 800892e:	e009      	b.n	8008944 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f9c6 	bl	8008cc4 <USBD_CtlError>
 8008938:	e004      	b.n	8008944 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa8d 	bl	8008e5a <USBD_CtlSendStatus>
 8008940:	e000      	b.n	8008944 <USBD_GetDescriptor+0x320>
    return;
 8008942:	bf00      	nop
    }
  }
}
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop

0800894c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	889b      	ldrh	r3, [r3, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d130      	bne.n	80089c0 <USBD_SetAddress+0x74>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	88db      	ldrh	r3, [r3, #6]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d12c      	bne.n	80089c0 <USBD_SetAddress+0x74>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	885b      	ldrh	r3, [r3, #2]
 800896a:	2b7f      	cmp	r3, #127	; 0x7f
 800896c:	d828      	bhi.n	80089c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008978:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008980:	2b03      	cmp	r3, #3
 8008982:	d104      	bne.n	800898e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f99c 	bl	8008cc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898c:	e01c      	b.n	80089c8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	7bfa      	ldrb	r2, [r7, #15]
 8008992:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fe61 	bl	8009662 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fa5a 	bl	8008e5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b4:	e008      	b.n	80089c8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089be:	e003      	b.n	80089c8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f97e 	bl	8008cc4 <USBD_CtlError>
  }
}
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	885b      	ldrh	r3, [r3, #2]
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	4b4b      	ldr	r3, [pc, #300]	; (8008b14 <USBD_SetConfig+0x144>)
 80089e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089e8:	4b4a      	ldr	r3, [pc, #296]	; (8008b14 <USBD_SetConfig+0x144>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d905      	bls.n	80089fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f966 	bl	8008cc4 <USBD_CtlError>
    return USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e087      	b.n	8008b0c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d002      	beq.n	8008a0c <USBD_SetConfig+0x3c>
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d025      	beq.n	8008a56 <USBD_SetConfig+0x86>
 8008a0a:	e071      	b.n	8008af0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008a0c:	4b41      	ldr	r3, [pc, #260]	; (8008b14 <USBD_SetConfig+0x144>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d01c      	beq.n	8008a4e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008a14:	4b3f      	ldr	r3, [pc, #252]	; (8008b14 <USBD_SetConfig+0x144>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a1e:	4b3d      	ldr	r3, [pc, #244]	; (8008b14 <USBD_SetConfig+0x144>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff f9bd 	bl	8007da4 <USBD_SetClassConfig>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d004      	beq.n	8008a3e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f944 	bl	8008cc4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008a3c:	e065      	b.n	8008b0a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa0b 	bl	8008e5a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2203      	movs	r2, #3
 8008a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008a4c:	e05d      	b.n	8008b0a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa03 	bl	8008e5a <USBD_CtlSendStatus>
    break;
 8008a54:	e059      	b.n	8008b0a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008a56:	4b2f      	ldr	r3, [pc, #188]	; (8008b14 <USBD_SetConfig+0x144>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d112      	bne.n	8008a84 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2202      	movs	r2, #2
 8008a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008a66:	4b2b      	ldr	r3, [pc, #172]	; (8008b14 <USBD_SetConfig+0x144>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a70:	4b28      	ldr	r3, [pc, #160]	; (8008b14 <USBD_SetConfig+0x144>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff f9b0 	bl	8007ddc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f9ec 	bl	8008e5a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008a82:	e042      	b.n	8008b0a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008a84:	4b23      	ldr	r3, [pc, #140]	; (8008b14 <USBD_SetConfig+0x144>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d02a      	beq.n	8008ae8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff f99e 	bl	8007ddc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008aa0:	4b1c      	ldr	r3, [pc, #112]	; (8008b14 <USBD_SetConfig+0x144>)
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008aaa:	4b1a      	ldr	r3, [pc, #104]	; (8008b14 <USBD_SetConfig+0x144>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff f977 	bl	8007da4 <USBD_SetClassConfig>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00f      	beq.n	8008ae0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f8fe 	bl	8008cc4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff f983 	bl	8007ddc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ade:	e014      	b.n	8008b0a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f9ba 	bl	8008e5a <USBD_CtlSendStatus>
    break;
 8008ae6:	e010      	b.n	8008b0a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f9b6 	bl	8008e5a <USBD_CtlSendStatus>
    break;
 8008aee:	e00c      	b.n	8008b0a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f8e6 	bl	8008cc4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <USBD_SetConfig+0x144>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff f96c 	bl	8007ddc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008b04:	2303      	movs	r3, #3
 8008b06:	73fb      	strb	r3, [r7, #15]
    break;
 8008b08:	bf00      	nop
  }

  return ret;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	2000020d 	.word	0x2000020d

08008b18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	88db      	ldrh	r3, [r3, #6]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d004      	beq.n	8008b34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f8c9 	bl	8008cc4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008b32:	e021      	b.n	8008b78 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	db17      	blt.n	8008b6e <USBD_GetConfig+0x56>
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	dd02      	ble.n	8008b48 <USBD_GetConfig+0x30>
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d00b      	beq.n	8008b5e <USBD_GetConfig+0x46>
 8008b46:	e012      	b.n	8008b6e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	3308      	adds	r3, #8
 8008b52:	2201      	movs	r2, #1
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f925 	bl	8008da6 <USBD_CtlSendData>
      break;
 8008b5c:	e00c      	b.n	8008b78 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3304      	adds	r3, #4
 8008b62:	2201      	movs	r2, #1
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f91d 	bl	8008da6 <USBD_CtlSendData>
      break;
 8008b6c:	e004      	b.n	8008b78 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f8a7 	bl	8008cc4 <USBD_CtlError>
      break;
 8008b76:	bf00      	nop
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b90:	3b01      	subs	r3, #1
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d81e      	bhi.n	8008bd4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	88db      	ldrh	r3, [r3, #6]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d004      	beq.n	8008ba8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f88f 	bl	8008cc4 <USBD_CtlError>
      break;
 8008ba6:	e01a      	b.n	8008bde <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f043 0202 	orr.w	r2, r3, #2
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	330c      	adds	r3, #12
 8008bc8:	2202      	movs	r2, #2
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f8ea 	bl	8008da6 <USBD_CtlSendData>
    break;
 8008bd2:	e004      	b.n	8008bde <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f874 	bl	8008cc4 <USBD_CtlError>
    break;
 8008bdc:	bf00      	nop
  }
}
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	885b      	ldrh	r3, [r3, #2]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d106      	bne.n	8008c06 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f92a 	bl	8008e5a <USBD_CtlSendStatus>
  }
}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d80b      	bhi.n	8008c3c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d10c      	bne.n	8008c46 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f910 	bl	8008e5a <USBD_CtlSendStatus>
      }
      break;
 8008c3a:	e004      	b.n	8008c46 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f840 	bl	8008cc4 <USBD_CtlError>
      break;
 8008c44:	e000      	b.n	8008c48 <USBD_ClrFeature+0x3a>
      break;
 8008c46:	bf00      	nop
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	781a      	ldrb	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	781a      	ldrb	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f7ff faa8 	bl	80081d0 <SWAPBYTE>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3301      	adds	r3, #1
 8008c92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f7ff fa9b 	bl	80081d0 <SWAPBYTE>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3301      	adds	r3, #1
 8008cac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f7ff fa8e 	bl	80081d0 <SWAPBYTE>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	80da      	strh	r2, [r3, #6]
}
 8008cbc:	bf00      	nop
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cce:	2180      	movs	r1, #128	; 0x80
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fc5b 	bl	800958c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fc57 	bl	800958c <USBD_LL_StallEP>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b086      	sub	sp, #24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d036      	beq.n	8008d6a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d00:	6938      	ldr	r0, [r7, #16]
 8008d02:	f000 f836 	bl	8008d72 <USBD_GetLen>
 8008d06:	4603      	mov	r3, r0
 8008d08:	3301      	adds	r3, #1
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	4413      	add	r3, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	7812      	ldrb	r2, [r2, #0]
 8008d1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	3301      	adds	r3, #1
 8008d24:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
 8008d32:	3301      	adds	r3, #1
 8008d34:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d36:	e013      	b.n	8008d60 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	7812      	ldrb	r2, [r2, #0]
 8008d42:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	3301      	adds	r3, #1
 8008d48:	613b      	str	r3, [r7, #16]
    idx++;
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	4413      	add	r3, r2
 8008d56:	2200      	movs	r2, #0
 8008d58:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e7      	bne.n	8008d38 <USBD_GetString+0x52>
 8008d68:	e000      	b.n	8008d6c <USBD_GetString+0x86>
    return;
 8008d6a:	bf00      	nop
  }
}
 8008d6c:	3718      	adds	r7, #24
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d82:	e005      	b.n	8008d90 <USBD_GetLen+0x1e>
  {
    len++;
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	3301      	adds	r3, #1
 8008d88:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1f5      	bne.n	8008d84 <USBD_GetLen+0x12>
  }

  return len;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2202      	movs	r2, #2
 8008db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 fc67 	bl	80096a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	2100      	movs	r1, #0
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 fc56 	bl	80096a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2203      	movs	r2, #3
 8008e0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	2100      	movs	r1, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fc5a 	bl	80096e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	2100      	movs	r1, #0
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fc49 	bl	80096e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2204      	movs	r2, #4
 8008e66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2100      	movs	r1, #0
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fc15 	bl	80096a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2205      	movs	r2, #5
 8008e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e90:	2300      	movs	r3, #0
 8008e92:	2200      	movs	r2, #0
 8008e94:	2100      	movs	r1, #0
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fc23 	bl	80096e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008eac:	2200      	movs	r2, #0
 8008eae:	4912      	ldr	r1, [pc, #72]	; (8008ef8 <MX_USB_Device_Init+0x50>)
 8008eb0:	4812      	ldr	r0, [pc, #72]	; (8008efc <MX_USB_Device_Init+0x54>)
 8008eb2:	f7fe ff09 	bl	8007cc8 <USBD_Init>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008ebc:	f7f8 fb96 	bl	80015ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008ec0:	490f      	ldr	r1, [pc, #60]	; (8008f00 <MX_USB_Device_Init+0x58>)
 8008ec2:	480e      	ldr	r0, [pc, #56]	; (8008efc <MX_USB_Device_Init+0x54>)
 8008ec4:	f7fe ff30 	bl	8007d28 <USBD_RegisterClass>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008ece:	f7f8 fb8d 	bl	80015ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008ed2:	490c      	ldr	r1, [pc, #48]	; (8008f04 <MX_USB_Device_Init+0x5c>)
 8008ed4:	4809      	ldr	r0, [pc, #36]	; (8008efc <MX_USB_Device_Init+0x54>)
 8008ed6:	f7fe fe8b 	bl	8007bf0 <USBD_CDC_RegisterInterface>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008ee0:	f7f8 fb84 	bl	80015ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008ee4:	4805      	ldr	r0, [pc, #20]	; (8008efc <MX_USB_Device_Init+0x54>)
 8008ee6:	f7fe ff46 	bl	8007d76 <USBD_Start>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008ef0:	f7f8 fb7c 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008ef4:	bf00      	nop
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000134 	.word	0x20000134
 8008efc:	200006ac 	.word	0x200006ac
 8008f00:	2000001c 	.word	0x2000001c
 8008f04:	20000120 	.word	0x20000120

08008f08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4905      	ldr	r1, [pc, #20]	; (8008f24 <CDC_Init_FS+0x1c>)
 8008f10:	4805      	ldr	r0, [pc, #20]	; (8008f28 <CDC_Init_FS+0x20>)
 8008f12:	f7fe fe82 	bl	8007c1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f16:	4905      	ldr	r1, [pc, #20]	; (8008f2c <CDC_Init_FS+0x24>)
 8008f18:	4803      	ldr	r0, [pc, #12]	; (8008f28 <CDC_Init_FS+0x20>)
 8008f1a:	f7fe fe97 	bl	8007c4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000d64 	.word	0x20000d64
 8008f28:	200006ac 	.word	0x200006ac
 8008f2c:	2000097c 	.word	0x2000097c

08008f30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b23      	cmp	r3, #35	; 0x23
 8008f54:	d84a      	bhi.n	8008fec <CDC_Control_FS+0xac>
 8008f56:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <CDC_Control_FS+0x1c>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008fed 	.word	0x08008fed
 8008f60:	08008fed 	.word	0x08008fed
 8008f64:	08008fed 	.word	0x08008fed
 8008f68:	08008fed 	.word	0x08008fed
 8008f6c:	08008fed 	.word	0x08008fed
 8008f70:	08008fed 	.word	0x08008fed
 8008f74:	08008fed 	.word	0x08008fed
 8008f78:	08008fed 	.word	0x08008fed
 8008f7c:	08008fed 	.word	0x08008fed
 8008f80:	08008fed 	.word	0x08008fed
 8008f84:	08008fed 	.word	0x08008fed
 8008f88:	08008fed 	.word	0x08008fed
 8008f8c:	08008fed 	.word	0x08008fed
 8008f90:	08008fed 	.word	0x08008fed
 8008f94:	08008fed 	.word	0x08008fed
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08008fed 	.word	0x08008fed
 8008fa0:	08008fed 	.word	0x08008fed
 8008fa4:	08008fed 	.word	0x08008fed
 8008fa8:	08008fed 	.word	0x08008fed
 8008fac:	08008fed 	.word	0x08008fed
 8008fb0:	08008fed 	.word	0x08008fed
 8008fb4:	08008fed 	.word	0x08008fed
 8008fb8:	08008fed 	.word	0x08008fed
 8008fbc:	08008fed 	.word	0x08008fed
 8008fc0:	08008fed 	.word	0x08008fed
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	08008fed 	.word	0x08008fed
 8008fd0:	08008fed 	.word	0x08008fed
 8008fd4:	08008fed 	.word	0x08008fed
 8008fd8:	08008fed 	.word	0x08008fed
 8008fdc:	08008fed 	.word	0x08008fed
 8008fe0:	08008fed 	.word	0x08008fed
 8008fe4:	08008fed 	.word	0x08008fed
 8008fe8:	08008fed 	.word	0x08008fed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fec:	bf00      	nop
  }

  return (USBD_OK);
 8008fee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	  CDC_On_Receive(Buf, Len); // (1)
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7f7 fdb9 	bl	8000b80 <CDC_On_Receive>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800900e:	6879      	ldr	r1, [r7, #4]
 8009010:	4805      	ldr	r0, [pc, #20]	; (8009028 <CDC_Receive_FS+0x2c>)
 8009012:	f7fe fe1b 	bl	8007c4c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009016:	4804      	ldr	r0, [pc, #16]	; (8009028 <CDC_Receive_FS+0x2c>)
 8009018:	f7fe fe2c 	bl	8007c74 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800901c:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200006ac 	.word	0x200006ac

0800902c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800903e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009042:	4618      	mov	r0, r3
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	6039      	str	r1, [r7, #0]
 800905a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2212      	movs	r2, #18
 8009060:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009062:	4b03      	ldr	r3, [pc, #12]	; (8009070 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000154 	.word	0x20000154

08009074 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2204      	movs	r2, #4
 8009084:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009086:	4b03      	ldr	r3, [pc, #12]	; (8009094 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	20000168 	.word	0x20000168

08009098 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	4907      	ldr	r1, [pc, #28]	; (80090cc <USBD_CDC_ProductStrDescriptor+0x34>)
 80090ae:	4808      	ldr	r0, [pc, #32]	; (80090d0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80090b0:	f7ff fe19 	bl	8008ce6 <USBD_GetString>
 80090b4:	e004      	b.n	80090c0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4904      	ldr	r1, [pc, #16]	; (80090cc <USBD_CDC_ProductStrDescriptor+0x34>)
 80090ba:	4805      	ldr	r0, [pc, #20]	; (80090d0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80090bc:	f7ff fe13 	bl	8008ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	2000114c 	.word	0x2000114c
 80090d0:	0800a994 	.word	0x0800a994

080090d4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	4904      	ldr	r1, [pc, #16]	; (80090f4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80090e4:	4804      	ldr	r0, [pc, #16]	; (80090f8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80090e6:	f7ff fdfe 	bl	8008ce6 <USBD_GetString>
  return USBD_StrDesc;
 80090ea:	4b02      	ldr	r3, [pc, #8]	; (80090f4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	2000114c 	.word	0x2000114c
 80090f8:	0800a9ac 	.word	0x0800a9ac

080090fc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	6039      	str	r1, [r7, #0]
 8009106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	221a      	movs	r2, #26
 800910c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800910e:	f000 f843 	bl	8009198 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009112:	4b02      	ldr	r3, [pc, #8]	; (800911c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	2000016c 	.word	0x2000016c

08009120 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d105      	bne.n	800913e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	4907      	ldr	r1, [pc, #28]	; (8009154 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009136:	4808      	ldr	r0, [pc, #32]	; (8009158 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009138:	f7ff fdd5 	bl	8008ce6 <USBD_GetString>
 800913c:	e004      	b.n	8009148 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	4904      	ldr	r1, [pc, #16]	; (8009154 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009142:	4805      	ldr	r0, [pc, #20]	; (8009158 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009144:	f7ff fdcf 	bl	8008ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009148:	4b02      	ldr	r3, [pc, #8]	; (8009154 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	2000114c 	.word	0x2000114c
 8009158:	0800a9c0 	.word	0x0800a9c0

0800915c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	6039      	str	r1, [r7, #0]
 8009166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d105      	bne.n	800917a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	4907      	ldr	r1, [pc, #28]	; (8009190 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009172:	4808      	ldr	r0, [pc, #32]	; (8009194 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009174:	f7ff fdb7 	bl	8008ce6 <USBD_GetString>
 8009178:	e004      	b.n	8009184 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	4904      	ldr	r1, [pc, #16]	; (8009190 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800917e:	4805      	ldr	r0, [pc, #20]	; (8009194 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009180:	f7ff fdb1 	bl	8008ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009184:	4b02      	ldr	r3, [pc, #8]	; (8009190 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	2000114c 	.word	0x2000114c
 8009194:	0800a9cc 	.word	0x0800a9cc

08009198 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800919e:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <Get_SerialNum+0x44>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091a4:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <Get_SerialNum+0x48>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091aa:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <Get_SerialNum+0x4c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4413      	add	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d009      	beq.n	80091d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091be:	2208      	movs	r2, #8
 80091c0:	4909      	ldr	r1, [pc, #36]	; (80091e8 <Get_SerialNum+0x50>)
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f814 	bl	80091f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091c8:	2204      	movs	r2, #4
 80091ca:	4908      	ldr	r1, [pc, #32]	; (80091ec <Get_SerialNum+0x54>)
 80091cc:	68b8      	ldr	r0, [r7, #8]
 80091ce:	f000 f80f 	bl	80091f0 <IntToUnicode>
  }
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	1fff7590 	.word	0x1fff7590
 80091e0:	1fff7594 	.word	0x1fff7594
 80091e4:	1fff7598 	.word	0x1fff7598
 80091e8:	2000016e 	.word	0x2000016e
 80091ec:	2000017e 	.word	0x2000017e

080091f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	4613      	mov	r3, r2
 80091fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091fe:	2300      	movs	r3, #0
 8009200:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009202:	2300      	movs	r3, #0
 8009204:	75fb      	strb	r3, [r7, #23]
 8009206:	e027      	b.n	8009258 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	0f1b      	lsrs	r3, r3, #28
 800920c:	2b09      	cmp	r3, #9
 800920e:	d80b      	bhi.n	8009228 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	0f1b      	lsrs	r3, r3, #28
 8009214:	b2da      	uxtb	r2, r3
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	4619      	mov	r1, r3
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	440b      	add	r3, r1
 8009220:	3230      	adds	r2, #48	; 0x30
 8009222:	b2d2      	uxtb	r2, r2
 8009224:	701a      	strb	r2, [r3, #0]
 8009226:	e00a      	b.n	800923e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	0f1b      	lsrs	r3, r3, #28
 800922c:	b2da      	uxtb	r2, r3
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	4619      	mov	r1, r3
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	440b      	add	r3, r1
 8009238:	3237      	adds	r2, #55	; 0x37
 800923a:	b2d2      	uxtb	r2, r2
 800923c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	011b      	lsls	r3, r3, #4
 8009242:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	3301      	adds	r3, #1
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	2200      	movs	r2, #0
 8009250:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	3301      	adds	r3, #1
 8009256:	75fb      	strb	r3, [r7, #23]
 8009258:	7dfa      	ldrb	r2, [r7, #23]
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	429a      	cmp	r2, r3
 800925e:	d3d3      	bcc.n	8009208 <IntToUnicode+0x18>
  }
}
 8009260:	bf00      	nop
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a0d      	ldr	r2, [pc, #52]	; (80092b0 <HAL_PCD_MspInit+0x44>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d113      	bne.n	80092a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800927e:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <HAL_PCD_MspInit+0x48>)
 8009280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009282:	4a0c      	ldr	r2, [pc, #48]	; (80092b4 <HAL_PCD_MspInit+0x48>)
 8009284:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009288:	6593      	str	r3, [r2, #88]	; 0x58
 800928a:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <HAL_PCD_MspInit+0x48>)
 800928c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009296:	2200      	movs	r2, #0
 8009298:	2100      	movs	r1, #0
 800929a:	2014      	movs	r0, #20
 800929c:	f7f8 fd0d 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80092a0:	2014      	movs	r0, #20
 80092a2:	f7f8 fd24 	bl	8001cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092a6:	bf00      	nop
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	40005c00 	.word	0x40005c00
 80092b4:	40021000 	.word	0x40021000

080092b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	f7fe fd9c 	bl	8007e0c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80092ee:	78fa      	ldrb	r2, [r7, #3]
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	00db      	lsls	r3, r3, #3
 80092fa:	440b      	add	r3, r1
 80092fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	4619      	mov	r1, r3
 8009306:	f7fe fdd4 	bl	8007eb2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	440b      	add	r3, r1
 8009332:	333c      	adds	r3, #60	; 0x3c
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	4619      	mov	r1, r3
 800933a:	f7fe fe1d 	bl	8007f78 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe ff21 	bl	800819c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800936a:	2301      	movs	r3, #1
 800936c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d001      	beq.n	800937a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009376:	f7f8 f939 	bl	80015ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009380:	7bfa      	ldrb	r2, [r7, #15]
 8009382:	4611      	mov	r1, r2
 8009384:	4618      	mov	r0, r3
 8009386:	f7fe fece 	bl	8008126 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe fe87 	bl	80080a4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fec9 	bl	8008146 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d005      	beq.n	80093c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093bc:	4b04      	ldr	r3, [pc, #16]	; (80093d0 <HAL_PCD_SuspendCallback+0x30>)
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	4a03      	ldr	r2, [pc, #12]	; (80093d0 <HAL_PCD_SuspendCallback+0x30>)
 80093c2:	f043 0306 	orr.w	r3, r3, #6
 80093c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	e000ed00 	.word	0xe000ed00

080093d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d007      	beq.n	80093f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093e4:	4b08      	ldr	r3, [pc, #32]	; (8009408 <HAL_PCD_ResumeCallback+0x34>)
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	4a07      	ldr	r2, [pc, #28]	; (8009408 <HAL_PCD_ResumeCallback+0x34>)
 80093ea:	f023 0306 	bic.w	r3, r3, #6
 80093ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80093f0:	f000 f9fa 	bl	80097e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe feb8 	bl	8008170 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	e000ed00 	.word	0xe000ed00

0800940c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009414:	4a2b      	ldr	r2, [pc, #172]	; (80094c4 <USBD_LL_Init+0xb8>)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a29      	ldr	r2, [pc, #164]	; (80094c4 <USBD_LL_Init+0xb8>)
 8009420:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009424:	4b27      	ldr	r3, [pc, #156]	; (80094c4 <USBD_LL_Init+0xb8>)
 8009426:	4a28      	ldr	r2, [pc, #160]	; (80094c8 <USBD_LL_Init+0xbc>)
 8009428:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800942a:	4b26      	ldr	r3, [pc, #152]	; (80094c4 <USBD_LL_Init+0xb8>)
 800942c:	2208      	movs	r2, #8
 800942e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009430:	4b24      	ldr	r3, [pc, #144]	; (80094c4 <USBD_LL_Init+0xb8>)
 8009432:	2202      	movs	r2, #2
 8009434:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009436:	4b23      	ldr	r3, [pc, #140]	; (80094c4 <USBD_LL_Init+0xb8>)
 8009438:	2202      	movs	r2, #2
 800943a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800943c:	4b21      	ldr	r3, [pc, #132]	; (80094c4 <USBD_LL_Init+0xb8>)
 800943e:	2200      	movs	r2, #0
 8009440:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009442:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <USBD_LL_Init+0xb8>)
 8009444:	2200      	movs	r2, #0
 8009446:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009448:	4b1e      	ldr	r3, [pc, #120]	; (80094c4 <USBD_LL_Init+0xb8>)
 800944a:	2200      	movs	r2, #0
 800944c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800944e:	4b1d      	ldr	r3, [pc, #116]	; (80094c4 <USBD_LL_Init+0xb8>)
 8009450:	2200      	movs	r2, #0
 8009452:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009454:	481b      	ldr	r0, [pc, #108]	; (80094c4 <USBD_LL_Init+0xb8>)
 8009456:	f7f8 fe19 	bl	800208c <HAL_PCD_Init>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009460:	f7f8 f8c4 	bl	80015ec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800946a:	2318      	movs	r3, #24
 800946c:	2200      	movs	r2, #0
 800946e:	2100      	movs	r1, #0
 8009470:	f7fa f907 	bl	8003682 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800947a:	2358      	movs	r3, #88	; 0x58
 800947c:	2200      	movs	r2, #0
 800947e:	2180      	movs	r1, #128	; 0x80
 8009480:	f7fa f8ff 	bl	8003682 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800948a:	23c0      	movs	r3, #192	; 0xc0
 800948c:	2200      	movs	r2, #0
 800948e:	2181      	movs	r1, #129	; 0x81
 8009490:	f7fa f8f7 	bl	8003682 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800949a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800949e:	2200      	movs	r2, #0
 80094a0:	2101      	movs	r1, #1
 80094a2:	f7fa f8ee 	bl	8003682 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094b0:	2200      	movs	r2, #0
 80094b2:	2182      	movs	r1, #130	; 0x82
 80094b4:	f7fa f8e5 	bl	8003682 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	2000134c 	.word	0x2000134c
 80094c8:	40005c00 	.word	0x40005c00

080094cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f8 feb7 	bl	8002256 <HAL_PCD_Start>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f980 	bl	80097f4 <USBD_Get_USB_Status>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	461a      	mov	r2, r3
 8009510:	4603      	mov	r3, r0
 8009512:	70fb      	strb	r3, [r7, #3]
 8009514:	460b      	mov	r3, r1
 8009516:	70bb      	strb	r3, [r7, #2]
 8009518:	4613      	mov	r3, r2
 800951a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800952a:	78bb      	ldrb	r3, [r7, #2]
 800952c:	883a      	ldrh	r2, [r7, #0]
 800952e:	78f9      	ldrb	r1, [r7, #3]
 8009530:	f7f9 f826 	bl	8002580 <HAL_PCD_EP_Open>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f95a 	bl	80097f4 <USBD_Get_USB_Status>
 8009540:	4603      	mov	r3, r0
 8009542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009544:	7bbb      	ldrb	r3, [r7, #14]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	4611      	mov	r1, r2
 800956c:	4618      	mov	r0, r3
 800956e:	f7f9 f86d 	bl	800264c <HAL_PCD_EP_Close>
 8009572:	4603      	mov	r3, r0
 8009574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f93b 	bl	80097f4 <USBD_Get_USB_Status>
 800957e:	4603      	mov	r3, r0
 8009580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009582:	7bbb      	ldrb	r3, [r7, #14]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f9 f92e 	bl	800280c <HAL_PCD_EP_SetStall>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f91c 	bl	80097f4 <USBD_Get_USB_Status>
 80095bc:	4603      	mov	r3, r0
 80095be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	460b      	mov	r3, r1
 80095d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095e4:	78fa      	ldrb	r2, [r7, #3]
 80095e6:	4611      	mov	r1, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7f9 f96f 	bl	80028cc <HAL_PCD_EP_ClrStall>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 f8fd 	bl	80097f4 <USBD_Get_USB_Status>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800961a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800961c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009620:	2b00      	cmp	r3, #0
 8009622:	da0c      	bge.n	800963e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962a:	68f9      	ldr	r1, [r7, #12]
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	440b      	add	r3, r1
 8009638:	3302      	adds	r3, #2
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	e00b      	b.n	8009656 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009644:	68f9      	ldr	r1, [r7, #12]
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	00db      	lsls	r3, r3, #3
 800964e:	440b      	add	r3, r1
 8009650:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009654:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800967c:	78fa      	ldrb	r2, [r7, #3]
 800967e:	4611      	mov	r1, r2
 8009680:	4618      	mov	r0, r3
 8009682:	f7f8 ff58 	bl	8002536 <HAL_PCD_SetAddress>
 8009686:	4603      	mov	r3, r0
 8009688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	4618      	mov	r0, r3
 800968e:	f000 f8b1 	bl	80097f4 <USBD_Get_USB_Status>
 8009692:	4603      	mov	r3, r0
 8009694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009696:	7bbb      	ldrb	r3, [r7, #14]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096be:	7af9      	ldrb	r1, [r7, #11]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	f7f9 f85f 	bl	8002786 <HAL_PCD_EP_Transmit>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 f890 	bl	80097f4 <USBD_Get_USB_Status>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	603b      	str	r3, [r7, #0]
 80096ee:	460b      	mov	r3, r1
 80096f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009700:	7af9      	ldrb	r1, [r7, #11]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	f7f8 ffe9 	bl	80026dc <HAL_PCD_EP_Receive>
 800970a:	4603      	mov	r3, r0
 800970c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	4618      	mov	r0, r3
 8009712:	f000 f86f 	bl	80097f4 <USBD_Get_USB_Status>
 8009716:	4603      	mov	r3, r0
 8009718:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800971a:	7dbb      	ldrb	r3, [r7, #22]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009736:	78fa      	ldrb	r2, [r7, #3]
 8009738:	4611      	mov	r1, r2
 800973a:	4618      	mov	r0, r3
 800973c:	f7f9 f80b 	bl	8002756 <HAL_PCD_EP_GetRxCount>
 8009740:	4603      	mov	r3, r0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <HAL_PCDEx_LPM_Callback+0x18>
 800975e:	2b01      	cmp	r3, #1
 8009760:	d013      	beq.n	800978a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009762:	e023      	b.n	80097ac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d007      	beq.n	800977c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800976c:	f000 f83c 	bl	80097e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009770:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	4a0f      	ldr	r2, [pc, #60]	; (80097b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009776:	f023 0306 	bic.w	r3, r3, #6
 800977a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe fcf4 	bl	8008170 <USBD_LL_Resume>
    break;
 8009788:	e010      	b.n	80097ac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe fcd8 	bl	8008146 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800979e:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	4a04      	ldr	r2, [pc, #16]	; (80097b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80097a4:	f043 0306 	orr.w	r3, r3, #6
 80097a8:	6113      	str	r3, [r2, #16]
    break;
 80097aa:	bf00      	nop
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	e000ed00 	.word	0xe000ed00

080097b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097c0:	4b03      	ldr	r3, [pc, #12]	; (80097d0 <USBD_static_malloc+0x18>)
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20000210 	.word	0x20000210

080097d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]

}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80097ec:	f7f7 fb9a 	bl	8000f24 <SystemClock_Config>
}
 80097f0:	bf00      	nop
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	2b03      	cmp	r3, #3
 8009806:	d817      	bhi.n	8009838 <USBD_Get_USB_Status+0x44>
 8009808:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <USBD_Get_USB_Status+0x1c>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	08009821 	.word	0x08009821
 8009814:	08009827 	.word	0x08009827
 8009818:	0800982d 	.word	0x0800982d
 800981c:	08009833 	.word	0x08009833
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
    break;
 8009824:	e00b      	b.n	800983e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009826:	2303      	movs	r3, #3
 8009828:	73fb      	strb	r3, [r7, #15]
    break;
 800982a:	e008      	b.n	800983e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800982c:	2301      	movs	r3, #1
 800982e:	73fb      	strb	r3, [r7, #15]
    break;
 8009830:	e005      	b.n	800983e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009832:	2303      	movs	r3, #3
 8009834:	73fb      	strb	r3, [r7, #15]
    break;
 8009836:	e002      	b.n	800983e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	73fb      	strb	r3, [r7, #15]
    break;
 800983c:	bf00      	nop
  }
  return usb_status;
 800983e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <__errno>:
 800984c:	4b01      	ldr	r3, [pc, #4]	; (8009854 <__errno+0x8>)
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000188 	.word	0x20000188

08009858 <__libc_init_array>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4e0d      	ldr	r6, [pc, #52]	; (8009890 <__libc_init_array+0x38>)
 800985c:	4c0d      	ldr	r4, [pc, #52]	; (8009894 <__libc_init_array+0x3c>)
 800985e:	1ba4      	subs	r4, r4, r6
 8009860:	10a4      	asrs	r4, r4, #2
 8009862:	2500      	movs	r5, #0
 8009864:	42a5      	cmp	r5, r4
 8009866:	d109      	bne.n	800987c <__libc_init_array+0x24>
 8009868:	4e0b      	ldr	r6, [pc, #44]	; (8009898 <__libc_init_array+0x40>)
 800986a:	4c0c      	ldr	r4, [pc, #48]	; (800989c <__libc_init_array+0x44>)
 800986c:	f001 f882 	bl	800a974 <_init>
 8009870:	1ba4      	subs	r4, r4, r6
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	2500      	movs	r5, #0
 8009876:	42a5      	cmp	r5, r4
 8009878:	d105      	bne.n	8009886 <__libc_init_array+0x2e>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009880:	4798      	blx	r3
 8009882:	3501      	adds	r5, #1
 8009884:	e7ee      	b.n	8009864 <__libc_init_array+0xc>
 8009886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800988a:	4798      	blx	r3
 800988c:	3501      	adds	r5, #1
 800988e:	e7f2      	b.n	8009876 <__libc_init_array+0x1e>
 8009890:	0800aa30 	.word	0x0800aa30
 8009894:	0800aa30 	.word	0x0800aa30
 8009898:	0800aa30 	.word	0x0800aa30
 800989c:	0800aa34 	.word	0x0800aa34

080098a0 <memcpy>:
 80098a0:	b510      	push	{r4, lr}
 80098a2:	1e43      	subs	r3, r0, #1
 80098a4:	440a      	add	r2, r1
 80098a6:	4291      	cmp	r1, r2
 80098a8:	d100      	bne.n	80098ac <memcpy+0xc>
 80098aa:	bd10      	pop	{r4, pc}
 80098ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098b4:	e7f7      	b.n	80098a6 <memcpy+0x6>

080098b6 <memset>:
 80098b6:	4402      	add	r2, r0
 80098b8:	4603      	mov	r3, r0
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d100      	bne.n	80098c0 <memset+0xa>
 80098be:	4770      	bx	lr
 80098c0:	f803 1b01 	strb.w	r1, [r3], #1
 80098c4:	e7f9      	b.n	80098ba <memset+0x4>
	...

080098c8 <pow>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	ed2d 8b04 	vpush	{d8-d9}
 80098d0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009ba4 <pow+0x2dc>
 80098d4:	b08d      	sub	sp, #52	; 0x34
 80098d6:	ec57 6b10 	vmov	r6, r7, d0
 80098da:	ec55 4b11 	vmov	r4, r5, d1
 80098de:	f000 f963 	bl	8009ba8 <__ieee754_pow>
 80098e2:	f999 3000 	ldrsb.w	r3, [r9]
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	3301      	adds	r3, #1
 80098ea:	eeb0 8a40 	vmov.f32	s16, s0
 80098ee:	eef0 8a60 	vmov.f32	s17, s1
 80098f2:	46c8      	mov	r8, r9
 80098f4:	d05f      	beq.n	80099b6 <pow+0xee>
 80098f6:	4622      	mov	r2, r4
 80098f8:	462b      	mov	r3, r5
 80098fa:	4620      	mov	r0, r4
 80098fc:	4629      	mov	r1, r5
 80098fe:	f7f7 f8e1 	bl	8000ac4 <__aeabi_dcmpun>
 8009902:	4683      	mov	fp, r0
 8009904:	2800      	cmp	r0, #0
 8009906:	d156      	bne.n	80099b6 <pow+0xee>
 8009908:	4632      	mov	r2, r6
 800990a:	463b      	mov	r3, r7
 800990c:	4630      	mov	r0, r6
 800990e:	4639      	mov	r1, r7
 8009910:	f7f7 f8d8 	bl	8000ac4 <__aeabi_dcmpun>
 8009914:	9001      	str	r0, [sp, #4]
 8009916:	b1e8      	cbz	r0, 8009954 <pow+0x8c>
 8009918:	2200      	movs	r2, #0
 800991a:	2300      	movs	r3, #0
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	f7f7 f89e 	bl	8000a60 <__aeabi_dcmpeq>
 8009924:	2800      	cmp	r0, #0
 8009926:	d046      	beq.n	80099b6 <pow+0xee>
 8009928:	2301      	movs	r3, #1
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	4b96      	ldr	r3, [pc, #600]	; (8009b88 <pow+0x2c0>)
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	4b96      	ldr	r3, [pc, #600]	; (8009b8c <pow+0x2c4>)
 8009932:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009936:	2200      	movs	r2, #0
 8009938:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800993c:	9b00      	ldr	r3, [sp, #0]
 800993e:	2b02      	cmp	r3, #2
 8009940:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009944:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009948:	d033      	beq.n	80099b2 <pow+0xea>
 800994a:	a802      	add	r0, sp, #8
 800994c:	f000 fefb 	bl	800a746 <matherr>
 8009950:	bb48      	cbnz	r0, 80099a6 <pow+0xde>
 8009952:	e05d      	b.n	8009a10 <pow+0x148>
 8009954:	f04f 0a00 	mov.w	sl, #0
 8009958:	f04f 0b00 	mov.w	fp, #0
 800995c:	4652      	mov	r2, sl
 800995e:	465b      	mov	r3, fp
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	f7f7 f87c 	bl	8000a60 <__aeabi_dcmpeq>
 8009968:	ec4b ab19 	vmov	d9, sl, fp
 800996c:	2800      	cmp	r0, #0
 800996e:	d054      	beq.n	8009a1a <pow+0x152>
 8009970:	4652      	mov	r2, sl
 8009972:	465b      	mov	r3, fp
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f7 f872 	bl	8000a60 <__aeabi_dcmpeq>
 800997c:	4680      	mov	r8, r0
 800997e:	b318      	cbz	r0, 80099c8 <pow+0x100>
 8009980:	2301      	movs	r3, #1
 8009982:	9302      	str	r3, [sp, #8]
 8009984:	4b80      	ldr	r3, [pc, #512]	; (8009b88 <pow+0x2c0>)
 8009986:	9303      	str	r3, [sp, #12]
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	930a      	str	r3, [sp, #40]	; 0x28
 800998c:	9b00      	ldr	r3, [sp, #0]
 800998e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009992:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009996:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0d5      	beq.n	800994a <pow+0x82>
 800999e:	4b7b      	ldr	r3, [pc, #492]	; (8009b8c <pow+0x2c4>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a8:	b11b      	cbz	r3, 80099b2 <pow+0xea>
 80099aa:	f7ff ff4f 	bl	800984c <__errno>
 80099ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80099b6:	eeb0 0a48 	vmov.f32	s0, s16
 80099ba:	eef0 0a68 	vmov.f32	s1, s17
 80099be:	b00d      	add	sp, #52	; 0x34
 80099c0:	ecbd 8b04 	vpop	{d8-d9}
 80099c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c8:	ec45 4b10 	vmov	d0, r4, r5
 80099cc:	f000 feb3 	bl	800a736 <finite>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0f0      	beq.n	80099b6 <pow+0xee>
 80099d4:	4652      	mov	r2, sl
 80099d6:	465b      	mov	r3, fp
 80099d8:	4620      	mov	r0, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	f7f7 f84a 	bl	8000a74 <__aeabi_dcmplt>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d0e8      	beq.n	80099b6 <pow+0xee>
 80099e4:	2301      	movs	r3, #1
 80099e6:	9302      	str	r3, [sp, #8]
 80099e8:	4b67      	ldr	r3, [pc, #412]	; (8009b88 <pow+0x2c0>)
 80099ea:	9303      	str	r3, [sp, #12]
 80099ec:	f999 3000 	ldrsb.w	r3, [r9]
 80099f0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80099f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80099f8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80099fc:	b913      	cbnz	r3, 8009a04 <pow+0x13c>
 80099fe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009a02:	e7a2      	b.n	800994a <pow+0x82>
 8009a04:	4962      	ldr	r1, [pc, #392]	; (8009b90 <pow+0x2c8>)
 8009a06:	2000      	movs	r0, #0
 8009a08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d19c      	bne.n	800994a <pow+0x82>
 8009a10:	f7ff ff1c 	bl	800984c <__errno>
 8009a14:	2321      	movs	r3, #33	; 0x21
 8009a16:	6003      	str	r3, [r0, #0]
 8009a18:	e7c5      	b.n	80099a6 <pow+0xde>
 8009a1a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a1e:	eef0 0a68 	vmov.f32	s1, s17
 8009a22:	f000 fe88 	bl	800a736 <finite>
 8009a26:	9000      	str	r0, [sp, #0]
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f040 8081 	bne.w	8009b30 <pow+0x268>
 8009a2e:	ec47 6b10 	vmov	d0, r6, r7
 8009a32:	f000 fe80 	bl	800a736 <finite>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d07a      	beq.n	8009b30 <pow+0x268>
 8009a3a:	ec45 4b10 	vmov	d0, r4, r5
 8009a3e:	f000 fe7a 	bl	800a736 <finite>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d074      	beq.n	8009b30 <pow+0x268>
 8009a46:	ec53 2b18 	vmov	r2, r3, d8
 8009a4a:	ee18 0a10 	vmov	r0, s16
 8009a4e:	4619      	mov	r1, r3
 8009a50:	f7f7 f838 	bl	8000ac4 <__aeabi_dcmpun>
 8009a54:	f999 9000 	ldrsb.w	r9, [r9]
 8009a58:	4b4b      	ldr	r3, [pc, #300]	; (8009b88 <pow+0x2c0>)
 8009a5a:	b1b0      	cbz	r0, 8009a8a <pow+0x1c2>
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a62:	9b00      	ldr	r3, [sp, #0]
 8009a64:	930a      	str	r3, [sp, #40]	; 0x28
 8009a66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009a6e:	f1b9 0f00 	cmp.w	r9, #0
 8009a72:	d0c4      	beq.n	80099fe <pow+0x136>
 8009a74:	4652      	mov	r2, sl
 8009a76:	465b      	mov	r3, fp
 8009a78:	4650      	mov	r0, sl
 8009a7a:	4659      	mov	r1, fp
 8009a7c:	f7f6 feb2 	bl	80007e4 <__aeabi_ddiv>
 8009a80:	f1b9 0f02 	cmp.w	r9, #2
 8009a84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a88:	e7c1      	b.n	8009a0e <pow+0x146>
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a90:	900a      	str	r0, [sp, #40]	; 0x28
 8009a92:	4629      	mov	r1, r5
 8009a94:	4620      	mov	r0, r4
 8009a96:	2200      	movs	r2, #0
 8009a98:	4b3e      	ldr	r3, [pc, #248]	; (8009b94 <pow+0x2cc>)
 8009a9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009a9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009aa2:	f7f6 fd75 	bl	8000590 <__aeabi_dmul>
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	f1b9 0f00 	cmp.w	r9, #0
 8009aae:	d124      	bne.n	8009afa <pow+0x232>
 8009ab0:	4b39      	ldr	r3, [pc, #228]	; (8009b98 <pow+0x2d0>)
 8009ab2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009ab6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009aba:	4630      	mov	r0, r6
 8009abc:	4652      	mov	r2, sl
 8009abe:	465b      	mov	r3, fp
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	f7f6 ffd7 	bl	8000a74 <__aeabi_dcmplt>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d056      	beq.n	8009b78 <pow+0x2b0>
 8009aca:	ec45 4b10 	vmov	d0, r4, r5
 8009ace:	f000 fe47 	bl	800a760 <rint>
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	462b      	mov	r3, r5
 8009ad6:	ec51 0b10 	vmov	r0, r1, d0
 8009ada:	f7f6 ffc1 	bl	8000a60 <__aeabi_dcmpeq>
 8009ade:	b920      	cbnz	r0, 8009aea <pow+0x222>
 8009ae0:	4b2e      	ldr	r3, [pc, #184]	; (8009b9c <pow+0x2d4>)
 8009ae2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009ae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009aea:	f998 3000 	ldrsb.w	r3, [r8]
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d142      	bne.n	8009b78 <pow+0x2b0>
 8009af2:	f7ff feab 	bl	800984c <__errno>
 8009af6:	2322      	movs	r3, #34	; 0x22
 8009af8:	e78d      	b.n	8009a16 <pow+0x14e>
 8009afa:	4b29      	ldr	r3, [pc, #164]	; (8009ba0 <pow+0x2d8>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b02:	4630      	mov	r0, r6
 8009b04:	4652      	mov	r2, sl
 8009b06:	465b      	mov	r3, fp
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7f6 ffb3 	bl	8000a74 <__aeabi_dcmplt>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d0eb      	beq.n	8009aea <pow+0x222>
 8009b12:	ec45 4b10 	vmov	d0, r4, r5
 8009b16:	f000 fe23 	bl	800a760 <rint>
 8009b1a:	4622      	mov	r2, r4
 8009b1c:	462b      	mov	r3, r5
 8009b1e:	ec51 0b10 	vmov	r0, r1, d0
 8009b22:	f7f6 ff9d 	bl	8000a60 <__aeabi_dcmpeq>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d1df      	bne.n	8009aea <pow+0x222>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4b18      	ldr	r3, [pc, #96]	; (8009b90 <pow+0x2c8>)
 8009b2e:	e7da      	b.n	8009ae6 <pow+0x21e>
 8009b30:	2200      	movs	r2, #0
 8009b32:	2300      	movs	r3, #0
 8009b34:	ec51 0b18 	vmov	r0, r1, d8
 8009b38:	f7f6 ff92 	bl	8000a60 <__aeabi_dcmpeq>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f43f af3a 	beq.w	80099b6 <pow+0xee>
 8009b42:	ec47 6b10 	vmov	d0, r6, r7
 8009b46:	f000 fdf6 	bl	800a736 <finite>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f43f af33 	beq.w	80099b6 <pow+0xee>
 8009b50:	ec45 4b10 	vmov	d0, r4, r5
 8009b54:	f000 fdef 	bl	800a736 <finite>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	f43f af2c 	beq.w	80099b6 <pow+0xee>
 8009b5e:	2304      	movs	r3, #4
 8009b60:	9302      	str	r3, [sp, #8]
 8009b62:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <pow+0x2c0>)
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	2300      	movs	r3, #0
 8009b68:	930a      	str	r3, [sp, #40]	; 0x28
 8009b6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b72:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009b76:	e7b8      	b.n	8009aea <pow+0x222>
 8009b78:	a802      	add	r0, sp, #8
 8009b7a:	f000 fde4 	bl	800a746 <matherr>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f47f af11 	bne.w	80099a6 <pow+0xde>
 8009b84:	e7b5      	b.n	8009af2 <pow+0x22a>
 8009b86:	bf00      	nop
 8009b88:	0800a9ec 	.word	0x0800a9ec
 8009b8c:	3ff00000 	.word	0x3ff00000
 8009b90:	fff00000 	.word	0xfff00000
 8009b94:	3fe00000 	.word	0x3fe00000
 8009b98:	47efffff 	.word	0x47efffff
 8009b9c:	c7efffff 	.word	0xc7efffff
 8009ba0:	7ff00000 	.word	0x7ff00000
 8009ba4:	200001ec 	.word	0x200001ec

08009ba8 <__ieee754_pow>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	b091      	sub	sp, #68	; 0x44
 8009bae:	ed8d 1b00 	vstr	d1, [sp]
 8009bb2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009bb6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009bba:	ea58 0302 	orrs.w	r3, r8, r2
 8009bbe:	ec57 6b10 	vmov	r6, r7, d0
 8009bc2:	f000 84be 	beq.w	800a542 <__ieee754_pow+0x99a>
 8009bc6:	4b7a      	ldr	r3, [pc, #488]	; (8009db0 <__ieee754_pow+0x208>)
 8009bc8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	463d      	mov	r5, r7
 8009bd0:	ee10 aa10 	vmov	sl, s0
 8009bd4:	dc09      	bgt.n	8009bea <__ieee754_pow+0x42>
 8009bd6:	d103      	bne.n	8009be0 <__ieee754_pow+0x38>
 8009bd8:	b93e      	cbnz	r6, 8009bea <__ieee754_pow+0x42>
 8009bda:	45a0      	cmp	r8, r4
 8009bdc:	dc0d      	bgt.n	8009bfa <__ieee754_pow+0x52>
 8009bde:	e001      	b.n	8009be4 <__ieee754_pow+0x3c>
 8009be0:	4598      	cmp	r8, r3
 8009be2:	dc02      	bgt.n	8009bea <__ieee754_pow+0x42>
 8009be4:	4598      	cmp	r8, r3
 8009be6:	d10e      	bne.n	8009c06 <__ieee754_pow+0x5e>
 8009be8:	b16a      	cbz	r2, 8009c06 <__ieee754_pow+0x5e>
 8009bea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009bee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009bf2:	ea54 030a 	orrs.w	r3, r4, sl
 8009bf6:	f000 84a4 	beq.w	800a542 <__ieee754_pow+0x99a>
 8009bfa:	486e      	ldr	r0, [pc, #440]	; (8009db4 <__ieee754_pow+0x20c>)
 8009bfc:	b011      	add	sp, #68	; 0x44
 8009bfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c02:	f000 bda5 	b.w	800a750 <nan>
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	da53      	bge.n	8009cb2 <__ieee754_pow+0x10a>
 8009c0a:	4b6b      	ldr	r3, [pc, #428]	; (8009db8 <__ieee754_pow+0x210>)
 8009c0c:	4598      	cmp	r8, r3
 8009c0e:	dc4d      	bgt.n	8009cac <__ieee754_pow+0x104>
 8009c10:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009c14:	4598      	cmp	r8, r3
 8009c16:	dd4c      	ble.n	8009cb2 <__ieee754_pow+0x10a>
 8009c18:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009c1c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c20:	2b14      	cmp	r3, #20
 8009c22:	dd26      	ble.n	8009c72 <__ieee754_pow+0xca>
 8009c24:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009c28:	fa22 f103 	lsr.w	r1, r2, r3
 8009c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d13e      	bne.n	8009cb2 <__ieee754_pow+0x10a>
 8009c34:	f001 0101 	and.w	r1, r1, #1
 8009c38:	f1c1 0b02 	rsb	fp, r1, #2
 8009c3c:	2a00      	cmp	r2, #0
 8009c3e:	d15b      	bne.n	8009cf8 <__ieee754_pow+0x150>
 8009c40:	4b5b      	ldr	r3, [pc, #364]	; (8009db0 <__ieee754_pow+0x208>)
 8009c42:	4598      	cmp	r8, r3
 8009c44:	d124      	bne.n	8009c90 <__ieee754_pow+0xe8>
 8009c46:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009c4a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009c4e:	ea53 030a 	orrs.w	r3, r3, sl
 8009c52:	f000 8476 	beq.w	800a542 <__ieee754_pow+0x99a>
 8009c56:	4b59      	ldr	r3, [pc, #356]	; (8009dbc <__ieee754_pow+0x214>)
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	dd2d      	ble.n	8009cb8 <__ieee754_pow+0x110>
 8009c5c:	f1b9 0f00 	cmp.w	r9, #0
 8009c60:	f280 8473 	bge.w	800a54a <__ieee754_pow+0x9a2>
 8009c64:	2000      	movs	r0, #0
 8009c66:	2100      	movs	r1, #0
 8009c68:	ec41 0b10 	vmov	d0, r0, r1
 8009c6c:	b011      	add	sp, #68	; 0x44
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	d13e      	bne.n	8009cf4 <__ieee754_pow+0x14c>
 8009c76:	f1c3 0314 	rsb	r3, r3, #20
 8009c7a:	fa48 f103 	asr.w	r1, r8, r3
 8009c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c82:	4543      	cmp	r3, r8
 8009c84:	f040 8469 	bne.w	800a55a <__ieee754_pow+0x9b2>
 8009c88:	f001 0101 	and.w	r1, r1, #1
 8009c8c:	f1c1 0b02 	rsb	fp, r1, #2
 8009c90:	4b4b      	ldr	r3, [pc, #300]	; (8009dc0 <__ieee754_pow+0x218>)
 8009c92:	4598      	cmp	r8, r3
 8009c94:	d118      	bne.n	8009cc8 <__ieee754_pow+0x120>
 8009c96:	f1b9 0f00 	cmp.w	r9, #0
 8009c9a:	f280 845a 	bge.w	800a552 <__ieee754_pow+0x9aa>
 8009c9e:	4948      	ldr	r1, [pc, #288]	; (8009dc0 <__ieee754_pow+0x218>)
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	463b      	mov	r3, r7
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	f7f6 fd9d 	bl	80007e4 <__aeabi_ddiv>
 8009caa:	e7dd      	b.n	8009c68 <__ieee754_pow+0xc0>
 8009cac:	f04f 0b02 	mov.w	fp, #2
 8009cb0:	e7c4      	b.n	8009c3c <__ieee754_pow+0x94>
 8009cb2:	f04f 0b00 	mov.w	fp, #0
 8009cb6:	e7c1      	b.n	8009c3c <__ieee754_pow+0x94>
 8009cb8:	f1b9 0f00 	cmp.w	r9, #0
 8009cbc:	dad2      	bge.n	8009c64 <__ieee754_pow+0xbc>
 8009cbe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009cc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009cc6:	e7cf      	b.n	8009c68 <__ieee754_pow+0xc0>
 8009cc8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009ccc:	d106      	bne.n	8009cdc <__ieee754_pow+0x134>
 8009cce:	4632      	mov	r2, r6
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	f7f6 fc5b 	bl	8000590 <__aeabi_dmul>
 8009cda:	e7c5      	b.n	8009c68 <__ieee754_pow+0xc0>
 8009cdc:	4b39      	ldr	r3, [pc, #228]	; (8009dc4 <__ieee754_pow+0x21c>)
 8009cde:	4599      	cmp	r9, r3
 8009ce0:	d10a      	bne.n	8009cf8 <__ieee754_pow+0x150>
 8009ce2:	2d00      	cmp	r5, #0
 8009ce4:	db08      	blt.n	8009cf8 <__ieee754_pow+0x150>
 8009ce6:	ec47 6b10 	vmov	d0, r6, r7
 8009cea:	b011      	add	sp, #68	; 0x44
 8009cec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	f000 bc68 	b.w	800a5c4 <__ieee754_sqrt>
 8009cf4:	f04f 0b00 	mov.w	fp, #0
 8009cf8:	ec47 6b10 	vmov	d0, r6, r7
 8009cfc:	f000 fd12 	bl	800a724 <fabs>
 8009d00:	ec51 0b10 	vmov	r0, r1, d0
 8009d04:	f1ba 0f00 	cmp.w	sl, #0
 8009d08:	d127      	bne.n	8009d5a <__ieee754_pow+0x1b2>
 8009d0a:	b124      	cbz	r4, 8009d16 <__ieee754_pow+0x16e>
 8009d0c:	4b2c      	ldr	r3, [pc, #176]	; (8009dc0 <__ieee754_pow+0x218>)
 8009d0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d121      	bne.n	8009d5a <__ieee754_pow+0x1b2>
 8009d16:	f1b9 0f00 	cmp.w	r9, #0
 8009d1a:	da05      	bge.n	8009d28 <__ieee754_pow+0x180>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	2000      	movs	r0, #0
 8009d22:	4927      	ldr	r1, [pc, #156]	; (8009dc0 <__ieee754_pow+0x218>)
 8009d24:	f7f6 fd5e 	bl	80007e4 <__aeabi_ddiv>
 8009d28:	2d00      	cmp	r5, #0
 8009d2a:	da9d      	bge.n	8009c68 <__ieee754_pow+0xc0>
 8009d2c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009d30:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d34:	ea54 030b 	orrs.w	r3, r4, fp
 8009d38:	d108      	bne.n	8009d4c <__ieee754_pow+0x1a4>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	f7f6 fa6d 	bl	8000220 <__aeabi_dsub>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	e7ac      	b.n	8009ca6 <__ieee754_pow+0xfe>
 8009d4c:	f1bb 0f01 	cmp.w	fp, #1
 8009d50:	d18a      	bne.n	8009c68 <__ieee754_pow+0xc0>
 8009d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d56:	4619      	mov	r1, r3
 8009d58:	e786      	b.n	8009c68 <__ieee754_pow+0xc0>
 8009d5a:	0fed      	lsrs	r5, r5, #31
 8009d5c:	1e6b      	subs	r3, r5, #1
 8009d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d60:	ea5b 0303 	orrs.w	r3, fp, r3
 8009d64:	d102      	bne.n	8009d6c <__ieee754_pow+0x1c4>
 8009d66:	4632      	mov	r2, r6
 8009d68:	463b      	mov	r3, r7
 8009d6a:	e7e8      	b.n	8009d3e <__ieee754_pow+0x196>
 8009d6c:	4b16      	ldr	r3, [pc, #88]	; (8009dc8 <__ieee754_pow+0x220>)
 8009d6e:	4598      	cmp	r8, r3
 8009d70:	f340 80fe 	ble.w	8009f70 <__ieee754_pow+0x3c8>
 8009d74:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009d78:	4598      	cmp	r8, r3
 8009d7a:	dd0a      	ble.n	8009d92 <__ieee754_pow+0x1ea>
 8009d7c:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <__ieee754_pow+0x214>)
 8009d7e:	429c      	cmp	r4, r3
 8009d80:	dc0d      	bgt.n	8009d9e <__ieee754_pow+0x1f6>
 8009d82:	f1b9 0f00 	cmp.w	r9, #0
 8009d86:	f6bf af6d 	bge.w	8009c64 <__ieee754_pow+0xbc>
 8009d8a:	a307      	add	r3, pc, #28	; (adr r3, 8009da8 <__ieee754_pow+0x200>)
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	e79f      	b.n	8009cd2 <__ieee754_pow+0x12a>
 8009d92:	4b0e      	ldr	r3, [pc, #56]	; (8009dcc <__ieee754_pow+0x224>)
 8009d94:	429c      	cmp	r4, r3
 8009d96:	ddf4      	ble.n	8009d82 <__ieee754_pow+0x1da>
 8009d98:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <__ieee754_pow+0x218>)
 8009d9a:	429c      	cmp	r4, r3
 8009d9c:	dd18      	ble.n	8009dd0 <__ieee754_pow+0x228>
 8009d9e:	f1b9 0f00 	cmp.w	r9, #0
 8009da2:	dcf2      	bgt.n	8009d8a <__ieee754_pow+0x1e2>
 8009da4:	e75e      	b.n	8009c64 <__ieee754_pow+0xbc>
 8009da6:	bf00      	nop
 8009da8:	8800759c 	.word	0x8800759c
 8009dac:	7e37e43c 	.word	0x7e37e43c
 8009db0:	7ff00000 	.word	0x7ff00000
 8009db4:	0800a9ef 	.word	0x0800a9ef
 8009db8:	433fffff 	.word	0x433fffff
 8009dbc:	3fefffff 	.word	0x3fefffff
 8009dc0:	3ff00000 	.word	0x3ff00000
 8009dc4:	3fe00000 	.word	0x3fe00000
 8009dc8:	41e00000 	.word	0x41e00000
 8009dcc:	3feffffe 	.word	0x3feffffe
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4b63      	ldr	r3, [pc, #396]	; (8009f60 <__ieee754_pow+0x3b8>)
 8009dd4:	f7f6 fa24 	bl	8000220 <__aeabi_dsub>
 8009dd8:	a355      	add	r3, pc, #340	; (adr r3, 8009f30 <__ieee754_pow+0x388>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	4604      	mov	r4, r0
 8009de0:	460d      	mov	r5, r1
 8009de2:	f7f6 fbd5 	bl	8000590 <__aeabi_dmul>
 8009de6:	a354      	add	r3, pc, #336	; (adr r3, 8009f38 <__ieee754_pow+0x390>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	4606      	mov	r6, r0
 8009dee:	460f      	mov	r7, r1
 8009df0:	4620      	mov	r0, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 fbcc 	bl	8000590 <__aeabi_dmul>
 8009df8:	2200      	movs	r2, #0
 8009dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dfe:	4b59      	ldr	r3, [pc, #356]	; (8009f64 <__ieee754_pow+0x3bc>)
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	f7f6 fbc4 	bl	8000590 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	a14c      	add	r1, pc, #304	; (adr r1, 8009f40 <__ieee754_pow+0x398>)
 8009e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e12:	f7f6 fa05 	bl	8000220 <__aeabi_dsub>
 8009e16:	4622      	mov	r2, r4
 8009e18:	462b      	mov	r3, r5
 8009e1a:	f7f6 fbb9 	bl	8000590 <__aeabi_dmul>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	2000      	movs	r0, #0
 8009e24:	4950      	ldr	r1, [pc, #320]	; (8009f68 <__ieee754_pow+0x3c0>)
 8009e26:	f7f6 f9fb 	bl	8000220 <__aeabi_dsub>
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	462b      	mov	r3, r5
 8009e2e:	4680      	mov	r8, r0
 8009e30:	4689      	mov	r9, r1
 8009e32:	4620      	mov	r0, r4
 8009e34:	4629      	mov	r1, r5
 8009e36:	f7f6 fbab 	bl	8000590 <__aeabi_dmul>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 fba5 	bl	8000590 <__aeabi_dmul>
 8009e46:	a340      	add	r3, pc, #256	; (adr r3, 8009f48 <__ieee754_pow+0x3a0>)
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f7f6 fba0 	bl	8000590 <__aeabi_dmul>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e58:	f7f6 f9e2 	bl	8000220 <__aeabi_dsub>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 f9dc 	bl	8000224 <__adddf3>
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e72:	4632      	mov	r2, r6
 8009e74:	463b      	mov	r3, r7
 8009e76:	f7f6 f9d3 	bl	8000220 <__aeabi_dsub>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 f9cd 	bl	8000220 <__aeabi_dsub>
 8009e86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e88:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	4606      	mov	r6, r0
 8009e90:	460f      	mov	r7, r1
 8009e92:	f040 81eb 	bne.w	800a26c <__ieee754_pow+0x6c4>
 8009e96:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009f50 <__ieee754_pow+0x3a8>
 8009e9a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009e9e:	2400      	movs	r4, #0
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009eac:	f7f6 f9b8 	bl	8000220 <__aeabi_dsub>
 8009eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eb4:	f7f6 fb6c 	bl	8000590 <__aeabi_dmul>
 8009eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ebc:	4680      	mov	r8, r0
 8009ebe:	4689      	mov	r9, r1
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fb64 	bl	8000590 <__aeabi_dmul>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 f9a8 	bl	8000224 <__adddf3>
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	462b      	mov	r3, r5
 8009ed8:	4680      	mov	r8, r0
 8009eda:	4689      	mov	r9, r1
 8009edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ee0:	f7f6 fb56 	bl	8000590 <__aeabi_dmul>
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	460d      	mov	r5, r1
 8009eea:	4602      	mov	r2, r0
 8009eec:	4649      	mov	r1, r9
 8009eee:	4640      	mov	r0, r8
 8009ef0:	e9cd 4500 	strd	r4, r5, [sp]
 8009ef4:	f7f6 f996 	bl	8000224 <__adddf3>
 8009ef8:	4b1c      	ldr	r3, [pc, #112]	; (8009f6c <__ieee754_pow+0x3c4>)
 8009efa:	4299      	cmp	r1, r3
 8009efc:	4606      	mov	r6, r0
 8009efe:	460f      	mov	r7, r1
 8009f00:	468b      	mov	fp, r1
 8009f02:	f340 82f7 	ble.w	800a4f4 <__ieee754_pow+0x94c>
 8009f06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009f0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009f0e:	4303      	orrs	r3, r0
 8009f10:	f000 81ea 	beq.w	800a2e8 <__ieee754_pow+0x740>
 8009f14:	a310      	add	r3, pc, #64	; (adr r3, 8009f58 <__ieee754_pow+0x3b0>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f1e:	f7f6 fb37 	bl	8000590 <__aeabi_dmul>
 8009f22:	a30d      	add	r3, pc, #52	; (adr r3, 8009f58 <__ieee754_pow+0x3b0>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	e6d5      	b.n	8009cd6 <__ieee754_pow+0x12e>
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w
 8009f30:	60000000 	.word	0x60000000
 8009f34:	3ff71547 	.word	0x3ff71547
 8009f38:	f85ddf44 	.word	0xf85ddf44
 8009f3c:	3e54ae0b 	.word	0x3e54ae0b
 8009f40:	55555555 	.word	0x55555555
 8009f44:	3fd55555 	.word	0x3fd55555
 8009f48:	652b82fe 	.word	0x652b82fe
 8009f4c:	3ff71547 	.word	0x3ff71547
 8009f50:	00000000 	.word	0x00000000
 8009f54:	bff00000 	.word	0xbff00000
 8009f58:	8800759c 	.word	0x8800759c
 8009f5c:	7e37e43c 	.word	0x7e37e43c
 8009f60:	3ff00000 	.word	0x3ff00000
 8009f64:	3fd00000 	.word	0x3fd00000
 8009f68:	3fe00000 	.word	0x3fe00000
 8009f6c:	408fffff 	.word	0x408fffff
 8009f70:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	da05      	bge.n	8009f86 <__ieee754_pow+0x3de>
 8009f7a:	4bd3      	ldr	r3, [pc, #844]	; (800a2c8 <__ieee754_pow+0x720>)
 8009f7c:	f7f6 fb08 	bl	8000590 <__aeabi_dmul>
 8009f80:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009f84:	460c      	mov	r4, r1
 8009f86:	1523      	asrs	r3, r4, #20
 8009f88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f8c:	4413      	add	r3, r2
 8009f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f90:	4bce      	ldr	r3, [pc, #824]	; (800a2cc <__ieee754_pow+0x724>)
 8009f92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009f96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009f9a:	429c      	cmp	r4, r3
 8009f9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009fa0:	dd08      	ble.n	8009fb4 <__ieee754_pow+0x40c>
 8009fa2:	4bcb      	ldr	r3, [pc, #812]	; (800a2d0 <__ieee754_pow+0x728>)
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	f340 815e 	ble.w	800a266 <__ieee754_pow+0x6be>
 8009faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fac:	3301      	adds	r3, #1
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009fb4:	f04f 0a00 	mov.w	sl, #0
 8009fb8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8009fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fc0:	4bc4      	ldr	r3, [pc, #784]	; (800a2d4 <__ieee754_pow+0x72c>)
 8009fc2:	4413      	add	r3, r2
 8009fc4:	ed93 7b00 	vldr	d7, [r3]
 8009fc8:	4629      	mov	r1, r5
 8009fca:	ec53 2b17 	vmov	r2, r3, d7
 8009fce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009fd6:	f7f6 f923 	bl	8000220 <__aeabi_dsub>
 8009fda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009fde:	4606      	mov	r6, r0
 8009fe0:	460f      	mov	r7, r1
 8009fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fe6:	f7f6 f91d 	bl	8000224 <__adddf3>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	2000      	movs	r0, #0
 8009ff0:	49b9      	ldr	r1, [pc, #740]	; (800a2d8 <__ieee754_pow+0x730>)
 8009ff2:	f7f6 fbf7 	bl	80007e4 <__aeabi_ddiv>
 8009ff6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4630      	mov	r0, r6
 800a000:	4639      	mov	r1, r7
 800a002:	f7f6 fac5 	bl	8000590 <__aeabi_dmul>
 800a006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a00a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a00e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a012:	2300      	movs	r3, #0
 800a014:	9302      	str	r3, [sp, #8]
 800a016:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a01a:	106d      	asrs	r5, r5, #1
 800a01c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a020:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a024:	2200      	movs	r2, #0
 800a026:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a02a:	4640      	mov	r0, r8
 800a02c:	4649      	mov	r1, r9
 800a02e:	4614      	mov	r4, r2
 800a030:	461d      	mov	r5, r3
 800a032:	f7f6 faad 	bl	8000590 <__aeabi_dmul>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4630      	mov	r0, r6
 800a03c:	4639      	mov	r1, r7
 800a03e:	f7f6 f8ef 	bl	8000220 <__aeabi_dsub>
 800a042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a046:	4606      	mov	r6, r0
 800a048:	460f      	mov	r7, r1
 800a04a:	4620      	mov	r0, r4
 800a04c:	4629      	mov	r1, r5
 800a04e:	f7f6 f8e7 	bl	8000220 <__aeabi_dsub>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a05a:	f7f6 f8e1 	bl	8000220 <__aeabi_dsub>
 800a05e:	4642      	mov	r2, r8
 800a060:	464b      	mov	r3, r9
 800a062:	f7f6 fa95 	bl	8000590 <__aeabi_dmul>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4630      	mov	r0, r6
 800a06c:	4639      	mov	r1, r7
 800a06e:	f7f6 f8d7 	bl	8000220 <__aeabi_dsub>
 800a072:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a076:	f7f6 fa8b 	bl	8000590 <__aeabi_dmul>
 800a07a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a07e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a082:	4610      	mov	r0, r2
 800a084:	4619      	mov	r1, r3
 800a086:	f7f6 fa83 	bl	8000590 <__aeabi_dmul>
 800a08a:	a37b      	add	r3, pc, #492	; (adr r3, 800a278 <__ieee754_pow+0x6d0>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	f7f6 fa7c 	bl	8000590 <__aeabi_dmul>
 800a098:	a379      	add	r3, pc, #484	; (adr r3, 800a280 <__ieee754_pow+0x6d8>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f8c1 	bl	8000224 <__adddf3>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	f7f6 fa73 	bl	8000590 <__aeabi_dmul>
 800a0aa:	a377      	add	r3, pc, #476	; (adr r3, 800a288 <__ieee754_pow+0x6e0>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 f8b8 	bl	8000224 <__adddf3>
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	462b      	mov	r3, r5
 800a0b8:	f7f6 fa6a 	bl	8000590 <__aeabi_dmul>
 800a0bc:	a374      	add	r3, pc, #464	; (adr r3, 800a290 <__ieee754_pow+0x6e8>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	f7f6 f8af 	bl	8000224 <__adddf3>
 800a0c6:	4622      	mov	r2, r4
 800a0c8:	462b      	mov	r3, r5
 800a0ca:	f7f6 fa61 	bl	8000590 <__aeabi_dmul>
 800a0ce:	a372      	add	r3, pc, #456	; (adr r3, 800a298 <__ieee754_pow+0x6f0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 f8a6 	bl	8000224 <__adddf3>
 800a0d8:	4622      	mov	r2, r4
 800a0da:	462b      	mov	r3, r5
 800a0dc:	f7f6 fa58 	bl	8000590 <__aeabi_dmul>
 800a0e0:	a36f      	add	r3, pc, #444	; (adr r3, 800a2a0 <__ieee754_pow+0x6f8>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f7f6 f89d 	bl	8000224 <__adddf3>
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	460f      	mov	r7, r1
 800a0f0:	462b      	mov	r3, r5
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	f7f6 fa4b 	bl	8000590 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4630      	mov	r0, r6
 800a100:	4639      	mov	r1, r7
 800a102:	f7f6 fa45 	bl	8000590 <__aeabi_dmul>
 800a106:	4642      	mov	r2, r8
 800a108:	4604      	mov	r4, r0
 800a10a:	460d      	mov	r5, r1
 800a10c:	464b      	mov	r3, r9
 800a10e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a112:	f7f6 f887 	bl	8000224 <__adddf3>
 800a116:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a11a:	f7f6 fa39 	bl	8000590 <__aeabi_dmul>
 800a11e:	4622      	mov	r2, r4
 800a120:	462b      	mov	r3, r5
 800a122:	f7f6 f87f 	bl	8000224 <__adddf3>
 800a126:	4642      	mov	r2, r8
 800a128:	4606      	mov	r6, r0
 800a12a:	460f      	mov	r7, r1
 800a12c:	464b      	mov	r3, r9
 800a12e:	4640      	mov	r0, r8
 800a130:	4649      	mov	r1, r9
 800a132:	f7f6 fa2d 	bl	8000590 <__aeabi_dmul>
 800a136:	2200      	movs	r2, #0
 800a138:	4b68      	ldr	r3, [pc, #416]	; (800a2dc <__ieee754_pow+0x734>)
 800a13a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a13e:	f7f6 f871 	bl	8000224 <__adddf3>
 800a142:	4632      	mov	r2, r6
 800a144:	463b      	mov	r3, r7
 800a146:	f7f6 f86d 	bl	8000224 <__adddf3>
 800a14a:	9802      	ldr	r0, [sp, #8]
 800a14c:	460d      	mov	r5, r1
 800a14e:	4604      	mov	r4, r0
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4640      	mov	r0, r8
 800a156:	4649      	mov	r1, r9
 800a158:	f7f6 fa1a 	bl	8000590 <__aeabi_dmul>
 800a15c:	2200      	movs	r2, #0
 800a15e:	4680      	mov	r8, r0
 800a160:	4689      	mov	r9, r1
 800a162:	4b5e      	ldr	r3, [pc, #376]	; (800a2dc <__ieee754_pow+0x734>)
 800a164:	4620      	mov	r0, r4
 800a166:	4629      	mov	r1, r5
 800a168:	f7f6 f85a 	bl	8000220 <__aeabi_dsub>
 800a16c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a170:	f7f6 f856 	bl	8000220 <__aeabi_dsub>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 f850 	bl	8000220 <__aeabi_dsub>
 800a180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a184:	f7f6 fa04 	bl	8000590 <__aeabi_dmul>
 800a188:	4622      	mov	r2, r4
 800a18a:	4606      	mov	r6, r0
 800a18c:	460f      	mov	r7, r1
 800a18e:	462b      	mov	r3, r5
 800a190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a194:	f7f6 f9fc 	bl	8000590 <__aeabi_dmul>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 f840 	bl	8000224 <__adddf3>
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7f6 f838 	bl	8000224 <__adddf3>
 800a1b4:	9802      	ldr	r0, [sp, #8]
 800a1b6:	a33c      	add	r3, pc, #240	; (adr r3, 800a2a8 <__ieee754_pow+0x700>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	4604      	mov	r4, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	f7f6 f9e6 	bl	8000590 <__aeabi_dmul>
 800a1c4:	4642      	mov	r2, r8
 800a1c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1ca:	464b      	mov	r3, r9
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	f7f6 f826 	bl	8000220 <__aeabi_dsub>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f7f6 f820 	bl	8000220 <__aeabi_dsub>
 800a1e0:	a333      	add	r3, pc, #204	; (adr r3, 800a2b0 <__ieee754_pow+0x708>)
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	f7f6 f9d3 	bl	8000590 <__aeabi_dmul>
 800a1ea:	a333      	add	r3, pc, #204	; (adr r3, 800a2b8 <__ieee754_pow+0x710>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	460f      	mov	r7, r1
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	f7f6 f9ca 	bl	8000590 <__aeabi_dmul>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4630      	mov	r0, r6
 800a202:	4639      	mov	r1, r7
 800a204:	f7f6 f80e 	bl	8000224 <__adddf3>
 800a208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a20a:	4b35      	ldr	r3, [pc, #212]	; (800a2e0 <__ieee754_pow+0x738>)
 800a20c:	4413      	add	r3, r2
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f7f6 f807 	bl	8000224 <__adddf3>
 800a216:	4604      	mov	r4, r0
 800a218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a21a:	460d      	mov	r5, r1
 800a21c:	f7f6 f94e 	bl	80004bc <__aeabi_i2d>
 800a220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a222:	4b30      	ldr	r3, [pc, #192]	; (800a2e4 <__ieee754_pow+0x73c>)
 800a224:	4413      	add	r3, r2
 800a226:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	4622      	mov	r2, r4
 800a230:	462b      	mov	r3, r5
 800a232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a236:	f7f5 fff5 	bl	8000224 <__adddf3>
 800a23a:	4642      	mov	r2, r8
 800a23c:	464b      	mov	r3, r9
 800a23e:	f7f5 fff1 	bl	8000224 <__adddf3>
 800a242:	4632      	mov	r2, r6
 800a244:	463b      	mov	r3, r7
 800a246:	f7f5 ffed 	bl	8000224 <__adddf3>
 800a24a:	9802      	ldr	r0, [sp, #8]
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a254:	f7f5 ffe4 	bl	8000220 <__aeabi_dsub>
 800a258:	4642      	mov	r2, r8
 800a25a:	464b      	mov	r3, r9
 800a25c:	f7f5 ffe0 	bl	8000220 <__aeabi_dsub>
 800a260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a264:	e607      	b.n	8009e76 <__ieee754_pow+0x2ce>
 800a266:	f04f 0a01 	mov.w	sl, #1
 800a26a:	e6a5      	b.n	8009fb8 <__ieee754_pow+0x410>
 800a26c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a2c0 <__ieee754_pow+0x718>
 800a270:	e613      	b.n	8009e9a <__ieee754_pow+0x2f2>
 800a272:	bf00      	nop
 800a274:	f3af 8000 	nop.w
 800a278:	4a454eef 	.word	0x4a454eef
 800a27c:	3fca7e28 	.word	0x3fca7e28
 800a280:	93c9db65 	.word	0x93c9db65
 800a284:	3fcd864a 	.word	0x3fcd864a
 800a288:	a91d4101 	.word	0xa91d4101
 800a28c:	3fd17460 	.word	0x3fd17460
 800a290:	518f264d 	.word	0x518f264d
 800a294:	3fd55555 	.word	0x3fd55555
 800a298:	db6fabff 	.word	0xdb6fabff
 800a29c:	3fdb6db6 	.word	0x3fdb6db6
 800a2a0:	33333303 	.word	0x33333303
 800a2a4:	3fe33333 	.word	0x3fe33333
 800a2a8:	e0000000 	.word	0xe0000000
 800a2ac:	3feec709 	.word	0x3feec709
 800a2b0:	dc3a03fd 	.word	0xdc3a03fd
 800a2b4:	3feec709 	.word	0x3feec709
 800a2b8:	145b01f5 	.word	0x145b01f5
 800a2bc:	be3e2fe0 	.word	0xbe3e2fe0
 800a2c0:	00000000 	.word	0x00000000
 800a2c4:	3ff00000 	.word	0x3ff00000
 800a2c8:	43400000 	.word	0x43400000
 800a2cc:	0003988e 	.word	0x0003988e
 800a2d0:	000bb679 	.word	0x000bb679
 800a2d4:	0800a9f0 	.word	0x0800a9f0
 800a2d8:	3ff00000 	.word	0x3ff00000
 800a2dc:	40080000 	.word	0x40080000
 800a2e0:	0800aa10 	.word	0x0800aa10
 800a2e4:	0800aa00 	.word	0x0800aa00
 800a2e8:	a3b4      	add	r3, pc, #720	; (adr r3, 800a5bc <__ieee754_pow+0xa14>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f5 ff97 	bl	8000224 <__adddf3>
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	4630      	mov	r0, r6
 800a300:	4639      	mov	r1, r7
 800a302:	f7f5 ff8d 	bl	8000220 <__aeabi_dsub>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a30e:	f7f6 fbcf 	bl	8000ab0 <__aeabi_dcmpgt>
 800a312:	2800      	cmp	r0, #0
 800a314:	f47f adfe 	bne.w	8009f14 <__ieee754_pow+0x36c>
 800a318:	4aa3      	ldr	r2, [pc, #652]	; (800a5a8 <__ieee754_pow+0xa00>)
 800a31a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a31e:	4293      	cmp	r3, r2
 800a320:	f340 810a 	ble.w	800a538 <__ieee754_pow+0x990>
 800a324:	151b      	asrs	r3, r3, #20
 800a326:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a32a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a32e:	fa4a f303 	asr.w	r3, sl, r3
 800a332:	445b      	add	r3, fp
 800a334:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a338:	4e9c      	ldr	r6, [pc, #624]	; (800a5ac <__ieee754_pow+0xa04>)
 800a33a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a33e:	4116      	asrs	r6, r2
 800a340:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a344:	2000      	movs	r0, #0
 800a346:	ea23 0106 	bic.w	r1, r3, r6
 800a34a:	f1c2 0214 	rsb	r2, r2, #20
 800a34e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a352:	fa4a fa02 	asr.w	sl, sl, r2
 800a356:	f1bb 0f00 	cmp.w	fp, #0
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4620      	mov	r0, r4
 800a360:	4629      	mov	r1, r5
 800a362:	bfb8      	it	lt
 800a364:	f1ca 0a00 	rsblt	sl, sl, #0
 800a368:	f7f5 ff5a 	bl	8000220 <__aeabi_dsub>
 800a36c:	e9cd 0100 	strd	r0, r1, [sp]
 800a370:	4642      	mov	r2, r8
 800a372:	464b      	mov	r3, r9
 800a374:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a378:	f7f5 ff54 	bl	8000224 <__adddf3>
 800a37c:	2000      	movs	r0, #0
 800a37e:	a378      	add	r3, pc, #480	; (adr r3, 800a560 <__ieee754_pow+0x9b8>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	4604      	mov	r4, r0
 800a386:	460d      	mov	r5, r1
 800a388:	f7f6 f902 	bl	8000590 <__aeabi_dmul>
 800a38c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a390:	4606      	mov	r6, r0
 800a392:	460f      	mov	r7, r1
 800a394:	4620      	mov	r0, r4
 800a396:	4629      	mov	r1, r5
 800a398:	f7f5 ff42 	bl	8000220 <__aeabi_dsub>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	f7f5 ff3c 	bl	8000220 <__aeabi_dsub>
 800a3a8:	a36f      	add	r3, pc, #444	; (adr r3, 800a568 <__ieee754_pow+0x9c0>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	f7f6 f8ef 	bl	8000590 <__aeabi_dmul>
 800a3b2:	a36f      	add	r3, pc, #444	; (adr r3, 800a570 <__ieee754_pow+0x9c8>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	4680      	mov	r8, r0
 800a3ba:	4689      	mov	r9, r1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7f6 f8e6 	bl	8000590 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f5 ff2a 	bl	8000224 <__adddf3>
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f5 ff22 	bl	8000224 <__adddf3>
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	4680      	mov	r8, r0
 800a3e6:	4689      	mov	r9, r1
 800a3e8:	f7f5 ff1a 	bl	8000220 <__aeabi_dsub>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	f7f5 ff14 	bl	8000220 <__aeabi_dsub>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460f      	mov	r7, r1
 800a3fe:	464b      	mov	r3, r9
 800a400:	4640      	mov	r0, r8
 800a402:	4649      	mov	r1, r9
 800a404:	f7f6 f8c4 	bl	8000590 <__aeabi_dmul>
 800a408:	a35b      	add	r3, pc, #364	; (adr r3, 800a578 <__ieee754_pow+0x9d0>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	4604      	mov	r4, r0
 800a410:	460d      	mov	r5, r1
 800a412:	f7f6 f8bd 	bl	8000590 <__aeabi_dmul>
 800a416:	a35a      	add	r3, pc, #360	; (adr r3, 800a580 <__ieee754_pow+0x9d8>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	f7f5 ff00 	bl	8000220 <__aeabi_dsub>
 800a420:	4622      	mov	r2, r4
 800a422:	462b      	mov	r3, r5
 800a424:	f7f6 f8b4 	bl	8000590 <__aeabi_dmul>
 800a428:	a357      	add	r3, pc, #348	; (adr r3, 800a588 <__ieee754_pow+0x9e0>)
 800a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42e:	f7f5 fef9 	bl	8000224 <__adddf3>
 800a432:	4622      	mov	r2, r4
 800a434:	462b      	mov	r3, r5
 800a436:	f7f6 f8ab 	bl	8000590 <__aeabi_dmul>
 800a43a:	a355      	add	r3, pc, #340	; (adr r3, 800a590 <__ieee754_pow+0x9e8>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	f7f5 feee 	bl	8000220 <__aeabi_dsub>
 800a444:	4622      	mov	r2, r4
 800a446:	462b      	mov	r3, r5
 800a448:	f7f6 f8a2 	bl	8000590 <__aeabi_dmul>
 800a44c:	a352      	add	r3, pc, #328	; (adr r3, 800a598 <__ieee754_pow+0x9f0>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	f7f5 fee7 	bl	8000224 <__adddf3>
 800a456:	4622      	mov	r2, r4
 800a458:	462b      	mov	r3, r5
 800a45a:	f7f6 f899 	bl	8000590 <__aeabi_dmul>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f5 fedb 	bl	8000220 <__aeabi_dsub>
 800a46a:	4604      	mov	r4, r0
 800a46c:	460d      	mov	r5, r1
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f6 f88b 	bl	8000590 <__aeabi_dmul>
 800a47a:	2200      	movs	r2, #0
 800a47c:	e9cd 0100 	strd	r0, r1, [sp]
 800a480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a484:	4620      	mov	r0, r4
 800a486:	4629      	mov	r1, r5
 800a488:	f7f5 feca 	bl	8000220 <__aeabi_dsub>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a494:	f7f6 f9a6 	bl	80007e4 <__aeabi_ddiv>
 800a498:	4632      	mov	r2, r6
 800a49a:	4604      	mov	r4, r0
 800a49c:	460d      	mov	r5, r1
 800a49e:	463b      	mov	r3, r7
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	f7f6 f874 	bl	8000590 <__aeabi_dmul>
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	463b      	mov	r3, r7
 800a4ac:	f7f5 feba 	bl	8000224 <__adddf3>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	f7f5 feb2 	bl	8000220 <__aeabi_dsub>
 800a4bc:	4642      	mov	r2, r8
 800a4be:	464b      	mov	r3, r9
 800a4c0:	f7f5 feae 	bl	8000220 <__aeabi_dsub>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	4939      	ldr	r1, [pc, #228]	; (800a5b0 <__ieee754_pow+0xa08>)
 800a4cc:	f7f5 fea8 	bl	8000220 <__aeabi_dsub>
 800a4d0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a4d4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	da2f      	bge.n	800a53e <__ieee754_pow+0x996>
 800a4de:	4650      	mov	r0, sl
 800a4e0:	ec43 2b10 	vmov	d0, r2, r3
 800a4e4:	f000 f9c0 	bl	800a868 <scalbn>
 800a4e8:	ec51 0b10 	vmov	r0, r1, d0
 800a4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4f0:	f7ff bbf1 	b.w	8009cd6 <__ieee754_pow+0x12e>
 800a4f4:	4b2f      	ldr	r3, [pc, #188]	; (800a5b4 <__ieee754_pow+0xa0c>)
 800a4f6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a4fa:	429e      	cmp	r6, r3
 800a4fc:	f77f af0c 	ble.w	800a318 <__ieee754_pow+0x770>
 800a500:	4b2d      	ldr	r3, [pc, #180]	; (800a5b8 <__ieee754_pow+0xa10>)
 800a502:	440b      	add	r3, r1
 800a504:	4303      	orrs	r3, r0
 800a506:	d00b      	beq.n	800a520 <__ieee754_pow+0x978>
 800a508:	a325      	add	r3, pc, #148	; (adr r3, 800a5a0 <__ieee754_pow+0x9f8>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a512:	f7f6 f83d 	bl	8000590 <__aeabi_dmul>
 800a516:	a322      	add	r3, pc, #136	; (adr r3, 800a5a0 <__ieee754_pow+0x9f8>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7ff bbdb 	b.w	8009cd6 <__ieee754_pow+0x12e>
 800a520:	4622      	mov	r2, r4
 800a522:	462b      	mov	r3, r5
 800a524:	f7f5 fe7c 	bl	8000220 <__aeabi_dsub>
 800a528:	4642      	mov	r2, r8
 800a52a:	464b      	mov	r3, r9
 800a52c:	f7f6 fab6 	bl	8000a9c <__aeabi_dcmpge>
 800a530:	2800      	cmp	r0, #0
 800a532:	f43f aef1 	beq.w	800a318 <__ieee754_pow+0x770>
 800a536:	e7e7      	b.n	800a508 <__ieee754_pow+0x960>
 800a538:	f04f 0a00 	mov.w	sl, #0
 800a53c:	e718      	b.n	800a370 <__ieee754_pow+0x7c8>
 800a53e:	4621      	mov	r1, r4
 800a540:	e7d4      	b.n	800a4ec <__ieee754_pow+0x944>
 800a542:	2000      	movs	r0, #0
 800a544:	491a      	ldr	r1, [pc, #104]	; (800a5b0 <__ieee754_pow+0xa08>)
 800a546:	f7ff bb8f 	b.w	8009c68 <__ieee754_pow+0xc0>
 800a54a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a54e:	f7ff bb8b 	b.w	8009c68 <__ieee754_pow+0xc0>
 800a552:	4630      	mov	r0, r6
 800a554:	4639      	mov	r1, r7
 800a556:	f7ff bb87 	b.w	8009c68 <__ieee754_pow+0xc0>
 800a55a:	4693      	mov	fp, r2
 800a55c:	f7ff bb98 	b.w	8009c90 <__ieee754_pow+0xe8>
 800a560:	00000000 	.word	0x00000000
 800a564:	3fe62e43 	.word	0x3fe62e43
 800a568:	fefa39ef 	.word	0xfefa39ef
 800a56c:	3fe62e42 	.word	0x3fe62e42
 800a570:	0ca86c39 	.word	0x0ca86c39
 800a574:	be205c61 	.word	0xbe205c61
 800a578:	72bea4d0 	.word	0x72bea4d0
 800a57c:	3e663769 	.word	0x3e663769
 800a580:	c5d26bf1 	.word	0xc5d26bf1
 800a584:	3ebbbd41 	.word	0x3ebbbd41
 800a588:	af25de2c 	.word	0xaf25de2c
 800a58c:	3f11566a 	.word	0x3f11566a
 800a590:	16bebd93 	.word	0x16bebd93
 800a594:	3f66c16c 	.word	0x3f66c16c
 800a598:	5555553e 	.word	0x5555553e
 800a59c:	3fc55555 	.word	0x3fc55555
 800a5a0:	c2f8f359 	.word	0xc2f8f359
 800a5a4:	01a56e1f 	.word	0x01a56e1f
 800a5a8:	3fe00000 	.word	0x3fe00000
 800a5ac:	000fffff 	.word	0x000fffff
 800a5b0:	3ff00000 	.word	0x3ff00000
 800a5b4:	4090cbff 	.word	0x4090cbff
 800a5b8:	3f6f3400 	.word	0x3f6f3400
 800a5bc:	652b82fe 	.word	0x652b82fe
 800a5c0:	3c971547 	.word	0x3c971547

0800a5c4 <__ieee754_sqrt>:
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	4955      	ldr	r1, [pc, #340]	; (800a720 <__ieee754_sqrt+0x15c>)
 800a5ca:	ec55 4b10 	vmov	r4, r5, d0
 800a5ce:	43a9      	bics	r1, r5
 800a5d0:	462b      	mov	r3, r5
 800a5d2:	462a      	mov	r2, r5
 800a5d4:	d112      	bne.n	800a5fc <__ieee754_sqrt+0x38>
 800a5d6:	ee10 2a10 	vmov	r2, s0
 800a5da:	ee10 0a10 	vmov	r0, s0
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f7f5 ffd6 	bl	8000590 <__aeabi_dmul>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	f7f5 fe1a 	bl	8000224 <__adddf3>
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	460d      	mov	r5, r1
 800a5f4:	ec45 4b10 	vmov	d0, r4, r5
 800a5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5fc:	2d00      	cmp	r5, #0
 800a5fe:	ee10 0a10 	vmov	r0, s0
 800a602:	4621      	mov	r1, r4
 800a604:	dc0f      	bgt.n	800a626 <__ieee754_sqrt+0x62>
 800a606:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a60a:	4330      	orrs	r0, r6
 800a60c:	d0f2      	beq.n	800a5f4 <__ieee754_sqrt+0x30>
 800a60e:	b155      	cbz	r5, 800a626 <__ieee754_sqrt+0x62>
 800a610:	ee10 2a10 	vmov	r2, s0
 800a614:	4620      	mov	r0, r4
 800a616:	4629      	mov	r1, r5
 800a618:	f7f5 fe02 	bl	8000220 <__aeabi_dsub>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	f7f6 f8e0 	bl	80007e4 <__aeabi_ddiv>
 800a624:	e7e4      	b.n	800a5f0 <__ieee754_sqrt+0x2c>
 800a626:	151b      	asrs	r3, r3, #20
 800a628:	d073      	beq.n	800a712 <__ieee754_sqrt+0x14e>
 800a62a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a62e:	07dd      	lsls	r5, r3, #31
 800a630:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a634:	bf48      	it	mi
 800a636:	0fc8      	lsrmi	r0, r1, #31
 800a638:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a63c:	bf44      	itt	mi
 800a63e:	0049      	lslmi	r1, r1, #1
 800a640:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a644:	2500      	movs	r5, #0
 800a646:	1058      	asrs	r0, r3, #1
 800a648:	0fcb      	lsrs	r3, r1, #31
 800a64a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a64e:	0049      	lsls	r1, r1, #1
 800a650:	2316      	movs	r3, #22
 800a652:	462c      	mov	r4, r5
 800a654:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a658:	19a7      	adds	r7, r4, r6
 800a65a:	4297      	cmp	r7, r2
 800a65c:	bfde      	ittt	le
 800a65e:	19bc      	addle	r4, r7, r6
 800a660:	1bd2      	suble	r2, r2, r7
 800a662:	19ad      	addle	r5, r5, r6
 800a664:	0fcf      	lsrs	r7, r1, #31
 800a666:	3b01      	subs	r3, #1
 800a668:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a66c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a670:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a674:	d1f0      	bne.n	800a658 <__ieee754_sqrt+0x94>
 800a676:	f04f 0c20 	mov.w	ip, #32
 800a67a:	469e      	mov	lr, r3
 800a67c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a680:	42a2      	cmp	r2, r4
 800a682:	eb06 070e 	add.w	r7, r6, lr
 800a686:	dc02      	bgt.n	800a68e <__ieee754_sqrt+0xca>
 800a688:	d112      	bne.n	800a6b0 <__ieee754_sqrt+0xec>
 800a68a:	428f      	cmp	r7, r1
 800a68c:	d810      	bhi.n	800a6b0 <__ieee754_sqrt+0xec>
 800a68e:	2f00      	cmp	r7, #0
 800a690:	eb07 0e06 	add.w	lr, r7, r6
 800a694:	da42      	bge.n	800a71c <__ieee754_sqrt+0x158>
 800a696:	f1be 0f00 	cmp.w	lr, #0
 800a69a:	db3f      	blt.n	800a71c <__ieee754_sqrt+0x158>
 800a69c:	f104 0801 	add.w	r8, r4, #1
 800a6a0:	1b12      	subs	r2, r2, r4
 800a6a2:	428f      	cmp	r7, r1
 800a6a4:	bf88      	it	hi
 800a6a6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a6aa:	1bc9      	subs	r1, r1, r7
 800a6ac:	4433      	add	r3, r6
 800a6ae:	4644      	mov	r4, r8
 800a6b0:	0052      	lsls	r2, r2, #1
 800a6b2:	f1bc 0c01 	subs.w	ip, ip, #1
 800a6b6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a6ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a6be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a6c2:	d1dd      	bne.n	800a680 <__ieee754_sqrt+0xbc>
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	d006      	beq.n	800a6d6 <__ieee754_sqrt+0x112>
 800a6c8:	1c5c      	adds	r4, r3, #1
 800a6ca:	bf13      	iteet	ne
 800a6cc:	3301      	addne	r3, #1
 800a6ce:	3501      	addeq	r5, #1
 800a6d0:	4663      	moveq	r3, ip
 800a6d2:	f023 0301 	bicne.w	r3, r3, #1
 800a6d6:	106a      	asrs	r2, r5, #1
 800a6d8:	085b      	lsrs	r3, r3, #1
 800a6da:	07e9      	lsls	r1, r5, #31
 800a6dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a6e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a6e4:	bf48      	it	mi
 800a6e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a6ea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a6ee:	461c      	mov	r4, r3
 800a6f0:	e780      	b.n	800a5f4 <__ieee754_sqrt+0x30>
 800a6f2:	0aca      	lsrs	r2, r1, #11
 800a6f4:	3815      	subs	r0, #21
 800a6f6:	0549      	lsls	r1, r1, #21
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d0fa      	beq.n	800a6f2 <__ieee754_sqrt+0x12e>
 800a6fc:	02d6      	lsls	r6, r2, #11
 800a6fe:	d50a      	bpl.n	800a716 <__ieee754_sqrt+0x152>
 800a700:	f1c3 0420 	rsb	r4, r3, #32
 800a704:	fa21 f404 	lsr.w	r4, r1, r4
 800a708:	1e5d      	subs	r5, r3, #1
 800a70a:	4099      	lsls	r1, r3
 800a70c:	4322      	orrs	r2, r4
 800a70e:	1b43      	subs	r3, r0, r5
 800a710:	e78b      	b.n	800a62a <__ieee754_sqrt+0x66>
 800a712:	4618      	mov	r0, r3
 800a714:	e7f0      	b.n	800a6f8 <__ieee754_sqrt+0x134>
 800a716:	0052      	lsls	r2, r2, #1
 800a718:	3301      	adds	r3, #1
 800a71a:	e7ef      	b.n	800a6fc <__ieee754_sqrt+0x138>
 800a71c:	46a0      	mov	r8, r4
 800a71e:	e7bf      	b.n	800a6a0 <__ieee754_sqrt+0xdc>
 800a720:	7ff00000 	.word	0x7ff00000

0800a724 <fabs>:
 800a724:	ec51 0b10 	vmov	r0, r1, d0
 800a728:	ee10 2a10 	vmov	r2, s0
 800a72c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a730:	ec43 2b10 	vmov	d0, r2, r3
 800a734:	4770      	bx	lr

0800a736 <finite>:
 800a736:	ee10 3a90 	vmov	r3, s1
 800a73a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a73e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a742:	0fc0      	lsrs	r0, r0, #31
 800a744:	4770      	bx	lr

0800a746 <matherr>:
 800a746:	2000      	movs	r0, #0
 800a748:	4770      	bx	lr
 800a74a:	0000      	movs	r0, r0
 800a74c:	0000      	movs	r0, r0
	...

0800a750 <nan>:
 800a750:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a758 <nan+0x8>
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	00000000 	.word	0x00000000
 800a75c:	7ff80000 	.word	0x7ff80000

0800a760 <rint>:
 800a760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a762:	ec51 0b10 	vmov	r0, r1, d0
 800a766:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a76a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a76e:	2e13      	cmp	r6, #19
 800a770:	460b      	mov	r3, r1
 800a772:	ee10 4a10 	vmov	r4, s0
 800a776:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a77a:	dc56      	bgt.n	800a82a <rint+0xca>
 800a77c:	2e00      	cmp	r6, #0
 800a77e:	da2b      	bge.n	800a7d8 <rint+0x78>
 800a780:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a784:	4302      	orrs	r2, r0
 800a786:	d023      	beq.n	800a7d0 <rint+0x70>
 800a788:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a78c:	4302      	orrs	r2, r0
 800a78e:	4254      	negs	r4, r2
 800a790:	4314      	orrs	r4, r2
 800a792:	0c4b      	lsrs	r3, r1, #17
 800a794:	0b24      	lsrs	r4, r4, #12
 800a796:	045b      	lsls	r3, r3, #17
 800a798:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a79c:	ea44 0103 	orr.w	r1, r4, r3
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	492f      	ldr	r1, [pc, #188]	; (800a860 <rint+0x100>)
 800a7a4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a7a8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f7f5 fd37 	bl	8000224 <__adddf3>
 800a7b6:	e9cd 0100 	strd	r0, r1, [sp]
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	4632      	mov	r2, r6
 800a7be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7c2:	f7f5 fd2d 	bl	8000220 <__aeabi_dsub>
 800a7c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	ec41 0b10 	vmov	d0, r0, r1
 800a7d4:	b003      	add	sp, #12
 800a7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7d8:	4a22      	ldr	r2, [pc, #136]	; (800a864 <rint+0x104>)
 800a7da:	4132      	asrs	r2, r6
 800a7dc:	ea01 0702 	and.w	r7, r1, r2
 800a7e0:	4307      	orrs	r7, r0
 800a7e2:	d0f5      	beq.n	800a7d0 <rint+0x70>
 800a7e4:	0852      	lsrs	r2, r2, #1
 800a7e6:	4011      	ands	r1, r2
 800a7e8:	430c      	orrs	r4, r1
 800a7ea:	d00b      	beq.n	800a804 <rint+0xa4>
 800a7ec:	ea23 0202 	bic.w	r2, r3, r2
 800a7f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7f4:	2e13      	cmp	r6, #19
 800a7f6:	fa43 f306 	asr.w	r3, r3, r6
 800a7fa:	bf0c      	ite	eq
 800a7fc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a800:	2400      	movne	r4, #0
 800a802:	4313      	orrs	r3, r2
 800a804:	4916      	ldr	r1, [pc, #88]	; (800a860 <rint+0x100>)
 800a806:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a80a:	4622      	mov	r2, r4
 800a80c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a810:	4620      	mov	r0, r4
 800a812:	4629      	mov	r1, r5
 800a814:	f7f5 fd06 	bl	8000224 <__adddf3>
 800a818:	e9cd 0100 	strd	r0, r1, [sp]
 800a81c:	4622      	mov	r2, r4
 800a81e:	462b      	mov	r3, r5
 800a820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a824:	f7f5 fcfc 	bl	8000220 <__aeabi_dsub>
 800a828:	e7d2      	b.n	800a7d0 <rint+0x70>
 800a82a:	2e33      	cmp	r6, #51	; 0x33
 800a82c:	dd07      	ble.n	800a83e <rint+0xde>
 800a82e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a832:	d1cd      	bne.n	800a7d0 <rint+0x70>
 800a834:	ee10 2a10 	vmov	r2, s0
 800a838:	f7f5 fcf4 	bl	8000224 <__adddf3>
 800a83c:	e7c8      	b.n	800a7d0 <rint+0x70>
 800a83e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a842:	f04f 32ff 	mov.w	r2, #4294967295
 800a846:	40f2      	lsrs	r2, r6
 800a848:	4210      	tst	r0, r2
 800a84a:	d0c1      	beq.n	800a7d0 <rint+0x70>
 800a84c:	0852      	lsrs	r2, r2, #1
 800a84e:	4210      	tst	r0, r2
 800a850:	bf1f      	itttt	ne
 800a852:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a856:	ea20 0202 	bicne.w	r2, r0, r2
 800a85a:	4134      	asrne	r4, r6
 800a85c:	4314      	orrne	r4, r2
 800a85e:	e7d1      	b.n	800a804 <rint+0xa4>
 800a860:	0800aa20 	.word	0x0800aa20
 800a864:	000fffff 	.word	0x000fffff

0800a868 <scalbn>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	ec55 4b10 	vmov	r4, r5, d0
 800a86e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a872:	4606      	mov	r6, r0
 800a874:	462b      	mov	r3, r5
 800a876:	b9aa      	cbnz	r2, 800a8a4 <scalbn+0x3c>
 800a878:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a87c:	4323      	orrs	r3, r4
 800a87e:	d03b      	beq.n	800a8f8 <scalbn+0x90>
 800a880:	4b31      	ldr	r3, [pc, #196]	; (800a948 <scalbn+0xe0>)
 800a882:	4629      	mov	r1, r5
 800a884:	2200      	movs	r2, #0
 800a886:	ee10 0a10 	vmov	r0, s0
 800a88a:	f7f5 fe81 	bl	8000590 <__aeabi_dmul>
 800a88e:	4b2f      	ldr	r3, [pc, #188]	; (800a94c <scalbn+0xe4>)
 800a890:	429e      	cmp	r6, r3
 800a892:	4604      	mov	r4, r0
 800a894:	460d      	mov	r5, r1
 800a896:	da12      	bge.n	800a8be <scalbn+0x56>
 800a898:	a327      	add	r3, pc, #156	; (adr r3, 800a938 <scalbn+0xd0>)
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	f7f5 fe77 	bl	8000590 <__aeabi_dmul>
 800a8a2:	e009      	b.n	800a8b8 <scalbn+0x50>
 800a8a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a8a8:	428a      	cmp	r2, r1
 800a8aa:	d10c      	bne.n	800a8c6 <scalbn+0x5e>
 800a8ac:	ee10 2a10 	vmov	r2, s0
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	f7f5 fcb6 	bl	8000224 <__adddf3>
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	e01c      	b.n	800a8f8 <scalbn+0x90>
 800a8be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	3a36      	subs	r2, #54	; 0x36
 800a8c6:	4432      	add	r2, r6
 800a8c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8cc:	428a      	cmp	r2, r1
 800a8ce:	dd0b      	ble.n	800a8e8 <scalbn+0x80>
 800a8d0:	ec45 4b11 	vmov	d1, r4, r5
 800a8d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a940 <scalbn+0xd8>
 800a8d8:	f000 f83c 	bl	800a954 <copysign>
 800a8dc:	a318      	add	r3, pc, #96	; (adr r3, 800a940 <scalbn+0xd8>)
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	ec51 0b10 	vmov	r0, r1, d0
 800a8e6:	e7da      	b.n	800a89e <scalbn+0x36>
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	dd08      	ble.n	800a8fe <scalbn+0x96>
 800a8ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8f8:	ec45 4b10 	vmov	d0, r4, r5
 800a8fc:	bd70      	pop	{r4, r5, r6, pc}
 800a8fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a902:	da0d      	bge.n	800a920 <scalbn+0xb8>
 800a904:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a908:	429e      	cmp	r6, r3
 800a90a:	ec45 4b11 	vmov	d1, r4, r5
 800a90e:	dce1      	bgt.n	800a8d4 <scalbn+0x6c>
 800a910:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a938 <scalbn+0xd0>
 800a914:	f000 f81e 	bl	800a954 <copysign>
 800a918:	a307      	add	r3, pc, #28	; (adr r3, 800a938 <scalbn+0xd0>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	e7e0      	b.n	800a8e2 <scalbn+0x7a>
 800a920:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a924:	3236      	adds	r2, #54	; 0x36
 800a926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a92a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	2200      	movs	r2, #0
 800a934:	4b06      	ldr	r3, [pc, #24]	; (800a950 <scalbn+0xe8>)
 800a936:	e7b2      	b.n	800a89e <scalbn+0x36>
 800a938:	c2f8f359 	.word	0xc2f8f359
 800a93c:	01a56e1f 	.word	0x01a56e1f
 800a940:	8800759c 	.word	0x8800759c
 800a944:	7e37e43c 	.word	0x7e37e43c
 800a948:	43500000 	.word	0x43500000
 800a94c:	ffff3cb0 	.word	0xffff3cb0
 800a950:	3c900000 	.word	0x3c900000

0800a954 <copysign>:
 800a954:	ec51 0b10 	vmov	r0, r1, d0
 800a958:	ee11 0a90 	vmov	r0, s3
 800a95c:	ee10 2a10 	vmov	r2, s0
 800a960:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a964:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a968:	ea41 0300 	orr.w	r3, r1, r0
 800a96c:	ec43 2b10 	vmov	d0, r2, r3
 800a970:	4770      	bx	lr
	...

0800a974 <_init>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	bf00      	nop
 800a978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97a:	bc08      	pop	{r3}
 800a97c:	469e      	mov	lr, r3
 800a97e:	4770      	bx	lr

0800a980 <_fini>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	bf00      	nop
 800a984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a986:	bc08      	pop	{r3}
 800a988:	469e      	mov	lr, r3
 800a98a:	4770      	bx	lr
